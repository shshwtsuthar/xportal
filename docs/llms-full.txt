# Create API key
Source: https://resend.com/docs/api-reference/api-keys/create-api-key

POST /api-keys
Add a new API key to authenticate communications with Resend.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Body Parameters

<ParamField body="name" type="string" required>
  The API key name.
</ParamField>

<ParamField body="permission" type="full_access | sending_access">
  The API key can have full access to Resend's API or be only restricted to send
  emails. \* `full_access`: Can create, delete, get, and update any resource. \*
  `sending_access`: Can only send emails.
</ParamField>

<ResendParamField body="domain_id" type="string">
  Restrict an API key to send emails only from a specific domain. This is only
  used when the `permission` is set to `sending_access`.
</ResendParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.apiKeys.create({ name: 'Production' });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->apiKeys->create([
    'name' => 'Production'
  ]);
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  params: resend.ApiKeys.CreateParams = {
    "name": "Production",
  }

  resend.ApiKeys.create(params)
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  params = {
    name: "Production"
  }
  Resend::ApiKeys.create(params)
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")
  params := &resend.CreateApiKeyRequest{
      Name: "Production",
  }
  apiKey, _ := client.ApiKeys.Create(params)
  ```

  ```rust Rust theme={null}
  use resend_rs::{types::CreateApiKeyOptions, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _api_key = resend
      .api_keys
      .create(CreateApiKeyOptions::new("Production"))
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          CreateApiKeyOptions params = CreateApiKeyOptions
                  .builder()
                  .name("Production").build();

          CreateApiKeyResponse apiKey = resend.apiKeys().create(params);
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.ApiKeyCreateAsync( "Production" );
  Console.WriteLine( "Token={0}", resp.Content.Token );
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/api-keys' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "name": "Production"
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "id": "dacf4072-4119-4d88-932f-6202748ac7c8",
    "token": "re_c1tpEyD8_NKFusih9vKVQknRAQfmFcWCv"
  }
  ```
</ResponseExample>


# Delete API key
Source: https://resend.com/docs/api-reference/api-keys/delete-api-key

DELETE /api-keys/:api_key_id
Remove an existing API key.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Path Parameters

<ResendParamField path="api_key_id" type="string" required>
  The API key ID.
</ResendParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.apiKeys.remove(
    'b6d24b8e-af0b-4c3c-be0c-359bbd97381e',
  );
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->apiKeys->remove('b6d24b8e-af0b-4c3c-be0c-359bbd97381e');
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"
  resend.ApiKeys.remove(api_key_id="b6d24b8e-af0b-4c3c-be0c-359bbd97381e")
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::ApiKeys.remove "b6d24b8e-af0b-4c3c-be0c-359bbd97381e"
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")
  client.ApiKeys.Remove("b6d24b8e-af0b-4c3c-be0c-359bbd97381e")
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    resend
      .api_keys
      .delete("b6d24b8e-af0b-4c3c-be0c-359bbd97381e")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          resend.apiKeys().remove("b6d24b8e-af0b-4c3c-be0c-359bbd97381e");
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  await resend.ApiKeyDeleteAsync( new Guid( "b6d24b8e-af0b-4c3c-be0c-359bbd97381e" ) );
  ```

  ```bash cURL theme={null}
  curl -X DELETE 'https://api.resend.com/api-keys/b6d24b8e-af0b-4c3c-be0c-359bbd97381e' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```text Response theme={null}
  HTTP 200 OK
  ```
</ResponseExample>


# List API keys
Source: https://resend.com/docs/api-reference/api-keys/list-api-keys

GET /api-keys
Retrieve a list of API keys for the authenticated user.

export const QueryParams = ({type, isRequired}) => {
  return <>
      <h2>Query Parameters</h2>

      {isRequired ? <ParamField query="limit" type="number">
          Number of {type} to retrieve.
          <ul>
            <li>
              Default value: <code>20</code>
            </li>
            <li>
              Maximum value: <code>100</code>
            </li>
            <li>
              Minimum value: <code>1</code>
            </li>
          </ul>
        </ParamField> : <>
          <p>
            Note that the <code>limit</code> parameter is <em>optional</em>. If
            you do not provide a <code>limit</code>, all {type} will be returned
            in a single response.
          </p>
          <ParamField query="limit" type="number">
            Number of {type} to retrieve.
            <ul>
              <li>
                Maximum value: <code>100</code>
              </li>
              <li>
                Minimum value: <code>1</code>
              </li>
            </ul>
          </ParamField>
        </>}

      <ParamField query="after" type="string">
        The ID <em>after</em> which we'll retrieve more {type} (for pagination).
        This ID will <em>not</em> be included in the returned list. Cannot be
        used with the
        <code>before</code> parameter.
      </ParamField>
      <ParamField query="before" type="string">
        The ID <em>before</em> which we'll retrieve more {type} (for
        pagination). This ID will <em>not</em> be included in the returned list.
        Cannot be used with the <code>after</code> parameter.
      </ParamField>
      <Info>
        You can only use either <code>after</code> or <code>before</code>{' '}
        parameter, not both. See our{' '}
        <a href="/api-reference/pagination">pagination guide</a> for more
        information.
      </Info>
    </>;
};

<QueryParams type="API keys" isRequired={false} />

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.apiKeys.list();
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->apiKeys->list();
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"
  resend.ApiKeys.list()
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::ApiKeys.list
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")
  keys, err := client.ApiKeys.List()
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result, list_opts::ListOptions};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _api_keys = resend.api_keys.list(ListOptions::default()).await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          resend.apiKeys().list();
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.ApiKeyListAsync();
  Console.WriteLine( "Nr keys={0}", resp.Content.Count );
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/api-keys' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "list",
    "has_more": false,
    "data": [
      {
        "id": "91f3200a-df72-4654-b0cd-f202395f5354",
        "name": "Production",
        "created_at": "2023-04-08T00:11:13.110779+00:00"
      }
    ]
  }
  ```
</ResponseExample>


# List Attachments
Source: https://resend.com/docs/api-reference/attachments/list-received-email-attachments

GET /emails/receiving/:email_id/attachments
Retrieve a list of email attachments and their contents.

export const QueryParams = ({type, isRequired}) => {
  return <>
      <h2>Query Parameters</h2>

      {isRequired ? <ParamField query="limit" type="number">
          Number of {type} to retrieve.
          <ul>
            <li>
              Default value: <code>20</code>
            </li>
            <li>
              Maximum value: <code>100</code>
            </li>
            <li>
              Minimum value: <code>1</code>
            </li>
          </ul>
        </ParamField> : <>
          <p>
            Note that the <code>limit</code> parameter is <em>optional</em>. If
            you do not provide a <code>limit</code>, all {type} will be returned
            in a single response.
          </p>
          <ParamField query="limit" type="number">
            Number of {type} to retrieve.
            <ul>
              <li>
                Maximum value: <code>100</code>
              </li>
              <li>
                Minimum value: <code>1</code>
              </li>
            </ul>
          </ParamField>
        </>}

      <ParamField query="after" type="string">
        The ID <em>after</em> which we'll retrieve more {type} (for pagination).
        This ID will <em>not</em> be included in the returned list. Cannot be
        used with the
        <code>before</code> parameter.
      </ParamField>
      <ParamField query="before" type="string">
        The ID <em>before</em> which we'll retrieve more {type} (for
        pagination). This ID will <em>not</em> be included in the returned list.
        Cannot be used with the <code>after</code> parameter.
      </ParamField>
      <Info>
        You can only use either <code>after</code> or <code>before</code>{' '}
        parameter, not both. See our{' '}
        <a href="/api-reference/pagination">pagination guide</a> for more
        information.
      </Info>
    </>;
};

<Warning>
  Receiving emails are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.4.0-canary.0
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-inbound-emails
    ```

    ```python Python theme={null}
    pip install resend==2.18.0a1
    ```

    ```ruby Ruby theme={null}
    gem install resend -v 0.27.0.alpha.1
    ```

    ```go Go theme={null}
    go get github.com/resend/resend-go/v2@v2.28.0-alpha.1
    ```

    ```rust Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Join the waitlist](https://resend.com/inbound) if you're interested in testing
  this feature.
</Warning>

<QueryParams type="attachments" isRequired={false} />

## Path Parameters

<ParamField path="email_id" type="string" required>
  The Email ID.
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.emails.receiving.attachments.list({
    emailId: '4ef9a417-02e9-4d39-ad75-9611e0fcc33c',
  });
  ```

  ```php PHP theme={null}
  // PHP SDK is not available yet
  ```

  ```python Python theme={null}
  # Python SDK is not available yet
  ```

  ```ruby Ruby theme={null}
  # Ruby SDK is not available yet
  ```

  ```go Go theme={null}
  // Go SDK is not available yet
  ```

  ```rust Rust theme={null}
  use resend_rs::{list_opts::ListOptions, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _email = resend
      .receiving
      .list_attachments(
        "4ef9a417-02e9-4d39-ad75-9611e0fcc33c",
        ListOptions::default(),
      )
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/emails/receiving/4ef9a417-02e9-4d39-ad75-9611e0fcc33c/attachments' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "list",
    "has_more": false,
    "data": [
      {
        "id": "2a0c9ce0-3112-4728-976e-47ddcd16a318",
        "filename": "avatar.png",
        "content_type": "image/png",
        "content_disposition": "inline",
        "content_id": "img001",
        "download_url": "https://inbound-cdn.resend.com/4ef9a417-02e9-4d39-ad75-9611e0fcc33c/attachments/2a0c9ce0-3112-4728-976e-47ddcd16a318?some-params=example&signature=sig-123",
        "expires_at": "2025-10-17T14:29:41.521Z"
      }
    ]
  }
  ```
</ResponseExample>


# List Attachments
Source: https://resend.com/docs/api-reference/attachments/list-sent-email-attachments

GET /emails/:email_id/attachments
Retrieve a list of email attachments and their contents.

export const QueryParams = ({type, isRequired}) => {
  return <>
      <h2>Query Parameters</h2>

      {isRequired ? <ParamField query="limit" type="number">
          Number of {type} to retrieve.
          <ul>
            <li>
              Default value: <code>20</code>
            </li>
            <li>
              Maximum value: <code>100</code>
            </li>
            <li>
              Minimum value: <code>1</code>
            </li>
          </ul>
        </ParamField> : <>
          <p>
            Note that the <code>limit</code> parameter is <em>optional</em>. If
            you do not provide a <code>limit</code>, all {type} will be returned
            in a single response.
          </p>
          <ParamField query="limit" type="number">
            Number of {type} to retrieve.
            <ul>
              <li>
                Maximum value: <code>100</code>
              </li>
              <li>
                Minimum value: <code>1</code>
              </li>
            </ul>
          </ParamField>
        </>}

      <ParamField query="after" type="string">
        The ID <em>after</em> which we'll retrieve more {type} (for pagination).
        This ID will <em>not</em> be included in the returned list. Cannot be
        used with the
        <code>before</code> parameter.
      </ParamField>
      <ParamField query="before" type="string">
        The ID <em>before</em> which we'll retrieve more {type} (for
        pagination). This ID will <em>not</em> be included in the returned list.
        Cannot be used with the <code>after</code> parameter.
      </ParamField>
      <Info>
        You can only use either <code>after</code> or <code>before</code>{' '}
        parameter, not both. See our{' '}
        <a href="/api-reference/pagination">pagination guide</a> for more
        information.
      </Info>
    </>;
};

<Warning>
  Email attachments are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.4.0-canary.0
    ```

    ```php PHP theme={null}
    // PHP SDK is not available yet
    ```

    ```python Python theme={null}
    # Python SDK is not available yet
    ```

    ```ruby Ruby theme={null}
    # Ruby SDK is not available yet
    ```

    ```go Go theme={null}
    // Go SDK is not available yet
    ```

    ```rust Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>
</Warning>

<QueryParams type="attachments" isRequired={false} />

## Path Parameters

<ParamField path="email_id" type="string" required>
  The Email ID.
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.emails.attachments.list({
    emailId: '4ef9a417-02e9-4d39-ad75-9611e0fcc33c',
  });
  ```

  ```php PHP theme={null}
  // PHP SDK is not available yet
  ```

  ```python Python theme={null}
  # Python SDK is not available yet
  ```

  ```ruby Ruby theme={null}
  # Ruby SDK is not available yet
  ```

  ```go Go theme={null}
  // Go SDK is not available yet
  ```

  ```rust Rust theme={null}
  use resend_rs::{list_opts::ListOptions, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _email = resend
      .emails
      .list_attachments(
        "4ef9a417-02e9-4d39-ad75-9611e0fcc33c",
        ListOptions::default(),
      )
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/emails/4ef9a417-02e9-4d39-ad75-9611e0fcc33c/attachments' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "list",
    "has_more": false,
    "data": [
      {
        "id": "2a0c9ce0-3112-4728-976e-47ddcd16a318",
        "filename": "avatar.png",
        "size": 4096,
        "content_type": "image/png",
        "content_disposition": "inline",
        "content_id": "img001",
        "download_url": "https://outbound-cdn.resend.com/4ef9a417-02e9-4d39-ad75-9611e0fcc33c/attachments/2a0c9ce0-3112-4728-976e-47ddcd16a318?some-params=example&signature=sig-123",
        "expires_at": "2025-10-17T14:29:41.521Z"
      }
    ]
  }
  ```
</ResponseExample>


# Retrieve Attachment
Source: https://resend.com/docs/api-reference/attachments/retrieve-received-email-attachment

GET /emails/receiving/:email_id/attachments/:id
Retrieve a single attachment from a received email.

<Warning>
  Receiving emails are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.4.0-canary.0
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-inbound-emails
    ```

    ```python Python theme={null}
    pip install resend==2.18.0a1
    ```

    ```ruby Ruby theme={null}
    gem install resend -v 0.27.0.alpha.1
    ```

    ```go Go theme={null}
    go get github.com/resend/resend-go/v2@v2.28.0-alpha.1
    ```

    ```rust Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Join the waitlist](https://resend.com/inbound) if you're interested in testing
  this feature.
</Warning>

## Path Parameters

<ParamField path="id" type="string" required>
  The Attachment ID.
</ParamField>

<ParamField path="email_id" type="string" required>
  The Email ID.
</ParamField>

<RequestExample>
  ```js Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.emails.receiving.attachments.get({
    id: '2a0c9ce0-3112-4728-976e-47ddcd16a318',
    emailId: '4ef9a417-02e9-4d39-ad75-9611e0fcc33c',
  });
  ```

  ```php PHP theme={null}
  // PHP SDK is not available yet
  ```

  ```python Python theme={null}
  # Python SDK is not available yet
  ```

  ```ruby Ruby theme={null}
  # Ruby SDK is not available yet
  ```

  ```go Go theme={null}
  // Go SDK is not available yet
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _email = resend
      .receiving
      .get_attachment(
        "2a0c9ce0-3112-4728-976e-47ddcd16a318",
        "4ef9a417-02e9-4d39-ad75-9611e0fcc33c",
      )
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/emails/receiving/4ef9a417-02e9-4d39-ad75-9611e0fcc33c/attachments/2a0c9ce0-3112-4728-976e-47ddcd16a318' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "attachment",
    "id": "2a0c9ce0-3112-4728-976e-47ddcd16a318",
    "filename": "avatar.png",
    "content_type": "image/png",
    "content_disposition": "inline",
    "content_id": "img001",
    "download_url": "https://inbound-cdn.resend.com/4ef9a417-02e9-4d39-ad75-9611e0fcc33c/attachments/2a0c9ce0-3112-4728-976e-47ddcd16a318?some-params=example&signature=sig-123",
    "expires_at": "2025-10-17T14:29:41.521Z"
  }
  ```
</ResponseExample>


# Retrieve Attachment
Source: https://resend.com/docs/api-reference/attachments/retrieve-sent-email-attachment

GET /emails/:email_id/attachments/:id
Retrieve a single attachment from a sent email.

<Warning>
  Email attachments are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.4.0-canary.0
    ```

    ```php PHP theme={null}
    // PHP SDK is not available yet
    ```

    ```python Python theme={null}
    # Python SDK is not available yet
    ```

    ```ruby Ruby theme={null}
    # Ruby SDK is not available yet
    ```

    ```go Go theme={null}
    // Go SDK is not available yet
    ```

    ```rust Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>
</Warning>

## Path Parameters

<ParamField path="id" type="string" required>
  The Attachment ID.
</ParamField>

<ParamField path="email_id" type="string" required>
  The Email ID.
</ParamField>

<RequestExample>
  ```js Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.emails.attachments.get({
    id: '2a0c9ce0-3112-4728-976e-47ddcd16a318',
    emailId: '4ef9a417-02e9-4d39-ad75-9611e0fcc33c',
  });
  ```

  ```php PHP theme={null}
  // PHP SDK is not available yet
  ```

  ```python Python theme={null}
  # Python SDK is not available yet
  ```

  ```ruby Ruby theme={null}
  # Ruby SDK is not available yet
  ```

  ```go Go theme={null}
  // Go SDK is not available yet
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _email = resend
      .emails
      .get_attachment(
        "2a0c9ce0-3112-4728-976e-47ddcd16a318",
        "4ef9a417-02e9-4d39-ad75-9611e0fcc33c",
      )
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/emails/4ef9a417-02e9-4d39-ad75-9611e0fcc33c/attachments/2a0c9ce0-3112-4728-976e-47ddcd16a318' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "attachment",
    "id": "2a0c9ce0-3112-4728-976e-47ddcd16a318",
    "filename": "avatar.png",
    "size": 4096,
    "content_type": "image/png",
    "content_disposition": "inline",
    "content_id": "img001",
    "download_url": "https://outbound-cdn.resend.com/4ef9a417-02e9-4d39-ad75-9611e0fcc33c/attachments/2a0c9ce0-3112-4728-976e-47ddcd16a318?some-params=example&signature=sig-123",
    "expires_at": "2025-10-17T14:29:41.521Z"
  }
  ```
</ResponseExample>


# Create Audience
Source: https://resend.com/docs/api-reference/audiences/create-audience

POST /audiences
Create a list of contacts.

## Body Parameters

<ParamField body="name" type="string" required>
  The name of the audience you want to create.
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.audiences.create({
    name: 'Registered Users',
  });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->audiences->create([
    'name' => 'Registered Users'
  ]);
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  params: resend.Audiences.CreateParams = {
    "name": "Registered Users"
  }

  resend.Audiences.create(params)
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Audiences.create({ name: "Registered Users" })
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  params := &resend.CreateAudienceRequest{
    Name: "Registered Users",
  }

  audience, err := client.Audiences.Create(params)
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _audience = resend.audiences.create("Registered Users").await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          CreateAudienceOptions params = CreateAudienceOptions
                  .builder()
                  .name("Registered Users").build();

          CreateAudienceResponseSuccess data = resend.audiences().create(params);
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.AudienceAddAsync( "Registered Users" );
  Console.WriteLine( "AudienceId={0}", resp.Content );
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/audiences' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "name": "Registered Users"
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "audience",
    "id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "name": "Registered Users"
  }
  ```
</ResponseExample>


# Delete Audience
Source: https://resend.com/docs/api-reference/audiences/delete-audience

DELETE /audiences/:audience_id
Remove an existing audience.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Path Parameters

<ResendParamField path="audience_id" type="string" required>
  The Audience ID.
</ResendParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.audiences.remove(
    '78261eea-8f8b-4381-83c6-79fa7120f1cf',
  );
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->audiences->remove('78261eea-8f8b-4381-83c6-79fa7120f1cf');
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Audiences.remove("78261eea-8f8b-4381-83c6-79fa7120f1cf")
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Audiences.remove("78261eea-8f8b-4381-83c6-79fa7120f1cf")
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  removed, err := client.Audiences.Remove("78261eea-8f8b-4381-83c6-79fa7120f1cf")
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _deleted = resend
      .audiences
      .delete("78261eea-8f8b-4381-83c6-79fa7120f1cf")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          RemoveAudienceResponseSuccess data = resend.audiences().remove("78261eea-8f8b-4381-83c6-79fa7120f1cf");
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  await resend.AudienceDeleteAsync( new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ) );
  ```

  ```bash cURL theme={null}
  curl -X DELETE 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "audience",
    "id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "deleted": true
  }
  ```
</ResponseExample>


# Retrieve Audience
Source: https://resend.com/docs/api-reference/audiences/get-audience

GET /audiences/:audience_id
Retrieve a single audience.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Path Parameters

<ResendParamField path="audience_id" type="string" required>
  The Audience ID.
</ResendParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.audiences.get(
    '78261eea-8f8b-4381-83c6-79fa7120f1cf',
  );
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->audiences->get('78261eea-8f8b-4381-83c6-79fa7120f1cf');
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Audiences.get("78261eea-8f8b-4381-83c6-79fa7120f1cf")
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Audiences.get("78261eea-8f8b-4381-83c6-79fa7120f1cf")
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  audience, err := client.Audiences.Get("78261eea-8f8b-4381-83c6-79fa7120f1cf")
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _audience = resend
      .audiences
      .get("78261eea-8f8b-4381-83c6-79fa7120f1cf")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          GetAudienceResponseSuccess data = resend.audiences().get("78261eea-8f8b-4381-83c6-79fa7120f1cf");
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.AudienceRetrieveAsync( new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ) );
  Console.WriteLine( "Name={0}", resp.Content.Name );
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "audience",
    "id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "name": "Registered Users",
    "created_at": "2023-10-06T22:59:55.977Z"
  }
  ```
</ResponseExample>


# List Audiences
Source: https://resend.com/docs/api-reference/audiences/list-audiences

GET /audiences
Retrieve a list of audiences.

export const QueryParams = ({type, isRequired}) => {
  return <>
      <h2>Query Parameters</h2>

      {isRequired ? <ParamField query="limit" type="number">
          Number of {type} to retrieve.
          <ul>
            <li>
              Default value: <code>20</code>
            </li>
            <li>
              Maximum value: <code>100</code>
            </li>
            <li>
              Minimum value: <code>1</code>
            </li>
          </ul>
        </ParamField> : <>
          <p>
            Note that the <code>limit</code> parameter is <em>optional</em>. If
            you do not provide a <code>limit</code>, all {type} will be returned
            in a single response.
          </p>
          <ParamField query="limit" type="number">
            Number of {type} to retrieve.
            <ul>
              <li>
                Maximum value: <code>100</code>
              </li>
              <li>
                Minimum value: <code>1</code>
              </li>
            </ul>
          </ParamField>
        </>}

      <ParamField query="after" type="string">
        The ID <em>after</em> which we'll retrieve more {type} (for pagination).
        This ID will <em>not</em> be included in the returned list. Cannot be
        used with the
        <code>before</code> parameter.
      </ParamField>
      <ParamField query="before" type="string">
        The ID <em>before</em> which we'll retrieve more {type} (for
        pagination). This ID will <em>not</em> be included in the returned list.
        Cannot be used with the <code>after</code> parameter.
      </ParamField>
      <Info>
        You can only use either <code>after</code> or <code>before</code>{' '}
        parameter, not both. See our{' '}
        <a href="/api-reference/pagination">pagination guide</a> for more
        information.
      </Info>
    </>;
};

<QueryParams type="audiences" isRequired={false} />

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.audiences.list();
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->audiences->list();
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Audiences.list()
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Audiences.list
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  audiences, err := client.Audiences.List()
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result, list_opts::ListOptions};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _audiences = resend.audiences.list(ListOptions::default()).await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          ListAudiencesResponseSuccess data = resend.audiences().list();
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.AudienceListAsync();
  Console.WriteLine( "Nr Audience={0}", resp.Content.Count );
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/audiences' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "list",
    "has_more": false,
    "data": [
      {
        "id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
        "name": "Registered Users",
        "created_at": "2023-10-06T22:59:55.977Z"
      }
    ]
  }
  ```
</ResponseExample>


# Create Broadcast
Source: https://resend.com/docs/api-reference/broadcasts/create-broadcast

POST /broadcasts
Create a new broadcast to send to your audience.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Body Parameters

<ResendParamField body="audience_id" type="string" required>
  The ID of the audience you want to send to.
</ResendParamField>

<ParamField body="from" type="string" required>
  Sender email address.

  To include a friendly name, use the format `"Your Name <sender@domain.com>"`.
</ParamField>

<ParamField body="subject" type="string" required>
  Email subject.
</ParamField>

<ResendParamField body="reply_to" type="string | string[]">
  Reply-to email address. For multiple addresses, send as an array of strings.
</ResendParamField>

<ParamField body="html" type="string">
  The HTML version of the message.
</ParamField>

<ParamField body="text" type="string">
  The plain text version of the message.

  <Info>
    If not provided, the HTML will be used to generate a plain text version. You
    can opt out of this behavior by setting value to an empty string.
  </Info>
</ParamField>

<ParamField body="react" type="React.ReactNode">
  The React component used to write the message. *Only available in the Node.js
  SDK.*
</ParamField>

<ParamField body="name" type="string">
  The friendly name of the broadcast. Only used for internal reference.
</ParamField>

<ResendParamField body="topic_id" type="string">
  The topic ID that the broadcast will be scoped to.
</ResendParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.broadcasts.create({
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
    from: 'Acme <onboarding@resend.dev>',
    subject: 'hello world',
    html: 'Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}',
  });
  ```

  ```rust Rust theme={null}
  use resend_rs::{types::CreateBroadcastOptions, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let audience_id = "78261eea-8f8b-4381-83c6-79fa7120f1cf";
    let from = "Acme <onboarding@resend.dev>";
    let subject = "hello world";
    let html = "Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}";

    let opts = CreateBroadcastOptions::new(audience_id, from, subject).with_html(html);

    let _broadcast = resend.broadcasts.create(opts).await?;

    Ok(())
  }
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->broadcasts->create([
    'audience_id' => '78261eea-8f8b-4381-83c6-79fa7120f1cf',
    'from' => 'Acme <onboarding@resend.dev>',
    'subject' => 'hello world',
    'html' => 'Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}',
  ]);
  ```

  ```java Java theme={null}
  Resend resend = new Resend("re_xxxxxxxxx");

  CreateBroadcastOptions params = CreateBroadcastOptions.builder()
      .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf")
      .from("Acme <onboarding@resend.dev>")
      .subject("hello world")
      .html("Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}")
      .build();

  CreateBroadcastResponseSuccess data = resend.broadcasts().create(params);
  ```

  ```py Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  params: resend.Broadcasts.CreateParams = {
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "from": "Acme <onboarding@resend.dev>",
    "subject": "Hello, world!",
    "html": "Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}",
  }

  resend.Broadcasts.create(params)
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  params = {
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "from": "Acme <onboarding@resend.dev>",
    "subject": "hello world",
    "html": "Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}",
  }
  Resend::Broadcasts.create(params)
  ```

  ```go Go theme={null}
  import "fmt"
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  params := &resend.CreateBroadcastRequest{
    AudienceId: "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    From:       "Acme <onboarding@resend.dev>",
    Html:       "Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}",
    Subject:    "Hello, world!",
  }

  broadcast, _ := client.Broadcasts.Create(params)
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.BroadcastAddAsync(
      new BroadcastData()
      {
          DisplayName = "Example Broadcast",
          AudienceId = new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ),
          From = "Acme <onboarding@resend.dev>",
          Subject = "Hello, world!",
          HtmlBody = "Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}",
      }
  );
  Console.WriteLine( "Broadcast Id={0}", resp.Content );
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/broadcasts' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "from": "Acme <onboarding@resend.dev>",
    "subject": "hello world",
    "html": "Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}"
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"
  }
  ```
</ResponseExample>


# Delete Broadcast
Source: https://resend.com/docs/api-reference/broadcasts/delete-broadcast

DELETE /broadcasts/:broadcast_id
Remove an existing broadcast.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

You can only delete broadcasts that are in the `draft` status. In addition, if you delete a broadcast that has already been scheduled to be sent, we will automatically cancel the scheduled delivery and it won't be sent.

## Path Parameters

<ResendParamField path="broadcast_id" type="string" required>
  The broadcast ID.
</ResendParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.broadcasts.remove(
    '559ac32e-9ef5-46fb-82a1-b76b840c0f7b',
  );
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _deleted = resend
      .broadcasts
      .delete("559ac32e-9ef5-46fb-82a1-b76b840c0f7b")
      .await?;

    Ok(())
  }
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->broadcasts->remove('559ac32e-9ef5-46fb-82a1-b76b840c0f7b');
  ```

  ```java Java theme={null}
  Resend resend = new Resend("re_xxxxxxxxx");

  RemoveBroadcastResponseSuccess data = resend.broadcasts().remove("559ac32e-9ef5-46fb-82a1-b76b840c0f7b");
  ```

  ```py Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Broadcasts.remove(id="559ac32e-9ef5-46fb-82a1-b76b840c0f7b")
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Broadcasts.remove("559ac32e-9ef5-46fb-82a1-b76b840c0f7b")
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  removed, _ := client.Broadcasts.Remove("559ac32e-9ef5-46fb-82a1-b76b840c0f7b")
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  await resend.BroadcastDeleteAsync( new Guid( "559ac32e-9ef5-46fb-82a1-b76b840c0f7b" ) );
  ```

  ```bash cURL theme={null}
  curl -X DELETE 'https://api.resend.com/broadcasts/559ac32e-9ef5-46fb-82a1-b76b840c0f7b' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "broadcast",
    "id": "559ac32e-9ef5-46fb-82a1-b76b840c0f7b",
    "deleted": true
  }
  ```
</ResponseExample>


# Retrieve Broadcast
Source: https://resend.com/docs/api-reference/broadcasts/get-broadcast

GET /broadcasts/:broadcast_id
Retrieve a single broadcast.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

You can retrieve broadcasts created via both this API and the Resend dashboard.

## Path Parameters

<ResendParamField path="broadcast_id" type="string" required>
  The broadcast ID.
</ResendParamField>

<Info>
  See all available `status` types in [the Broadcasts
  overview](/dashboard/broadcasts/introduction#understand-broadcast-statuses).
</Info>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.broadcasts.get(
    '559ac32e-9ef5-46fb-82a1-b76b840c0f7b',
  );
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _broadcast = resend
      .broadcasts
      .get("559ac32e-9ef5-46fb-82a1-b76b840c0f7b")
      .await?;

    Ok(())
  }
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->broadcasts->get('559ac32e-9ef5-46fb-82a1-b76b840c0f7b');
  ```

  ```java Java theme={null}
  Resend resend = new Resend("re_xxxxxxxxx");

  GetBroadcastResponseSuccess data = resend.broadcasts().get("559ac32e-9ef5-46fb-82a1-b76b840c0f7b");
  ```

  ```py Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Broadcasts.get(id="559ac32e-9ef5-46fb-82a1-b76b840c0f7b")
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Broadcasts.get("559ac32e-9ef5-46fb-82a1-b76b840c0f7b")
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  broadcast, _ := client.Broadcasts.Get("559ac32e-9ef5-46fb-82a1-b76b840c0f7b")
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.BroadcastRetrieveAsync( new Guid( "559ac32e-9ef5-46fb-82a1-b76b840c0f7b" ) );
  Console.WriteLine( "Broadcast name={0}", resp.Content.DisplayName );
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/broadcasts/559ac32e-9ef5-46fb-82a1-b76b840c0f7b' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "broadcast",
    "id": "559ac32e-9ef5-46fb-82a1-b76b840c0f7b",
    "name": "Announcements",
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "from": "Acme <onboarding@resend.dev>",
    "subject": "hello world",
    "reply_to": null,
    "preview_text": "Check out our latest announcements",
    "html": "<p>Hello {{{FIRST_NAME|there}}}!</p>",
    "text": "Hello {{{FIRST_NAME|there}}}!",
    "status": "draft",
    "created_at": "2024-12-01T19:32:22.980Z",
    "scheduled_at": null,
    "sent_at": null,
    "topic_id": "b6d24b8e-af0b-4c3c-be0c-359bbd97381e"
  }
  ```
</ResponseExample>


# List Broadcasts
Source: https://resend.com/docs/api-reference/broadcasts/list-broadcasts

GET /broadcasts
Retrieve a list of broadcast.

export const QueryParams = ({type, isRequired}) => {
  return <>
      <h2>Query Parameters</h2>

      {isRequired ? <ParamField query="limit" type="number">
          Number of {type} to retrieve.
          <ul>
            <li>
              Default value: <code>20</code>
            </li>
            <li>
              Maximum value: <code>100</code>
            </li>
            <li>
              Minimum value: <code>1</code>
            </li>
          </ul>
        </ParamField> : <>
          <p>
            Note that the <code>limit</code> parameter is <em>optional</em>. If
            you do not provide a <code>limit</code>, all {type} will be returned
            in a single response.
          </p>
          <ParamField query="limit" type="number">
            Number of {type} to retrieve.
            <ul>
              <li>
                Maximum value: <code>100</code>
              </li>
              <li>
                Minimum value: <code>1</code>
              </li>
            </ul>
          </ParamField>
        </>}

      <ParamField query="after" type="string">
        The ID <em>after</em> which we'll retrieve more {type} (for pagination).
        This ID will <em>not</em> be included in the returned list. Cannot be
        used with the
        <code>before</code> parameter.
      </ParamField>
      <ParamField query="before" type="string">
        The ID <em>before</em> which we'll retrieve more {type} (for
        pagination). This ID will <em>not</em> be included in the returned list.
        Cannot be used with the <code>after</code> parameter.
      </ParamField>
      <Info>
        You can only use either <code>after</code> or <code>before</code>{' '}
        parameter, not both. See our{' '}
        <a href="/api-reference/pagination">pagination guide</a> for more
        information.
      </Info>
    </>;
};

<Info>
  See all available `status` types in [the Broadcasts
  overview](/dashboard/broadcasts/introduction#understand-broadcast-statuses).
</Info>

<QueryParams type="broadcasts" isRequired={false} />

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.broadcasts.list();
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result, list_opts::ListOptions};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _broadcasts = resend.broadcasts.list(ListOptions::default()).await?;

    Ok(())
  }
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->broadcasts->list();
  ```

  ```java Java theme={null}
  Resend resend = new Resend("re_xxxxxxxxx");

  ListBroadcastsResponseSuccess data = resend.broadcasts().list();
  ```

  ```py Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Broadcasts.list()
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Broadcasts.list()
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  broadcasts, _ := client.Broadcasts.List()
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.BroadcastListAsync();
  Console.WriteLine( "Nr Broadcasts={0}", resp.Content.Count );
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/broadcasts' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "list",
    "has_more": false,
    "data": [
      {
        "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",
        "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
        "status": "draft",
        "created_at": "2024-11-01T15:13:31.723Z",
        "scheduled_at": null,
        "sent_at": null,
        "topic_id": "b6d24b8e-af0b-4c3c-be0c-359bbd97381e"
      },
      {
        "id": "559ac32e-9ef5-46fb-82a1-b76b840c0f7b",
        "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
        "status": "sent",
        "created_at": "2024-12-01T19:32:22.980Z",
        "scheduled_at": "2024-12-02T19:32:22.980Z",
        "sent_at": "2024-12-02T19:32:22.980Z",
        "topic_id": "b6d24b8e-af0b-4c3c-be0c-359bbd97381e"
      }
    ]
  }
  ```
</ResponseExample>


# Send Broadcast
Source: https://resend.com/docs/api-reference/broadcasts/send-broadcast

POST /broadcasts/:broadcast_id/send
Start sending broadcasts to your audience through the Resend API.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

<Note>You can send broadcasts only if they were created via the API.</Note>

## Path Parameters

<ResendParamField path="broadcast_id" type="string" required>
  The broadcast ID.
</ResendParamField>

## Body Parameters

<ResendParamField body="scheduled_at" type="string">
  Schedule email to be sent later. The date should be in natural language (e.g.:
  `in 1 min`) or ISO 8601 format (e.g: `2024-08-05T11:52:01.858Z`).
</ResendParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.broadcasts.send(
    '559ac32e-9ef5-46fb-82a1-b76b840c0f7b',
    {
      scheduledAt: 'in 1 min',
    },
  );
  ```

  ```rust Rust theme={null}
  use resend_rs::{types::SendBroadcastOptions, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let opts =
      SendBroadcastOptions::new("559ac32e-9ef5-46fb-82a1-b76b840c0f7b").with_scheduled_at("in 1 min");

    let _broadcast = resend.broadcasts.send(opts).await?;

    Ok(())
  }
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->broadcasts->send('559ac32e-9ef5-46fb-82a1-b76b840c0f7b', [
    'scheduled_at' => 'in 1 min',
  ]);
  ```

  ```java Java theme={null}
  Resend resend = new Resend("re_xxxxxxxxx");

  SendBroadcastOptions params = SendBroadcastOptions.builder()
      .scheduledAt("in 1 min")
      .build();

  SendBroadcastResponseSuccess data = resend.broadcasts().send(params,
      "498ee8e4-7aa2-4eb5-9f04-4194848049d1");
  ```

  ```py Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  params: resend.Broadcasts.SendParams = {
    "broadcast_id": "559ac32e-9ef5-46fb-82a1-b76b840c0f7b",
    "scheduled_at": "in 1 min"
  }
  resend.Broadcasts.send(params)
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  params = {
    broadcast_id: "559ac32e-9ef5-46fb-82a1-b76b840c0f7b",
    scheduled_at: "in 1 min"
  }
  Resend::Broadcasts.send(params)
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  sendParams := &resend.SendBroadcastRequest{
    BroadcastId: "559ac32e-9ef5-46fb-82a1-b76b840c0f7b",
    ScheduledAt: "in 1 min",
  }

  sent, _ := client.Broadcasts.Send(sendParams)
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  // Send now
  await resend.BroadcastSendAsync( new Guid( "559ac32e-9ef5-46fb-82a1-b76b840c0f7b" ) );

  // Send in 5 mins
  await resend.BroadcastScheduleAsync(
      new Guid( "559ac32e-9ef5-46fb-82a1-b76b840c0f7b" ),
      DateTime.UtcNow.AddMinutes( 5 ) );
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/broadcasts/559ac32e-9ef5-46fb-82a1-b76b840c0f7b/send' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "scheduled_at": "in 1 min"
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"
  }
  ```
</ResponseExample>


# Update Broadcast
Source: https://resend.com/docs/api-reference/broadcasts/update-broadcast

PATCH /broadcasts/:id
Update a broadcast to send to your audience.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Path Parameters

<ResendParamField path="broadcast_id" type="string" required>
  The ID of the broadcast you want to update.
</ResendParamField>

## Body Parameters

<ResendParamField body="audience_id" type="string">
  The ID of the audience you want to send to.
</ResendParamField>

<ParamField body="from" type="string">
  Sender email address.

  To include a friendly name, use the format `"Your Name <sender@domain.com>"`.
</ParamField>

<ParamField body="subject" type="string">
  Email subject.
</ParamField>

<ResendParamField body="reply_to" type="string | string[]">
  Reply-to email address. For multiple addresses, send as an array of strings.
</ResendParamField>

<ParamField body="html" type="string">
  The HTML version of the message.
</ParamField>

<ParamField body="text" type="string">
  The plain text version of the message.

  <Info>
    If not provided, the HTML will be used to generate a plain text version. You
    can opt out of this behavior by setting value to an empty string.
  </Info>
</ParamField>

<ParamField body="react" type="React.ReactNode">
  The React component used to write the message. *Only available in the Node.js
  SDK.*
</ParamField>

<ParamField body="name" type="string">
  The friendly name of the broadcast. Only used for internal reference.
</ParamField>

<ResendParamField body="topic_id" type="string">
  The topic ID that the broadcast will be scoped to.
</ResendParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.broadcasts.update(
    '49a3999c-0ce1-4ea6-ab68-afcd6dc2e794',
    {
      html: 'Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}',
    },
  );
  ```

  ```rust Rust theme={null}
  use resend_rs::{types::UpdateBroadcastOptions, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let id = "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794";
    let html = "Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}";

    let opts = UpdateBroadcastOptions::new().with_html(html);

    let _broadcast = resend.broadcasts.update(id, opts).await?;

    Ok(())
  }
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->broadcasts->update('49a3999c-0ce1-4ea6-ab68-afcd6dc2e794', [
    'html' => 'Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}',
  ]);
  ```

  ```java Java theme={null}
  Resend resend = new Resend("re_xxxxxxxxx");

  UpdateBroadcastOptions params = UpdateBroadcastOptions.builder()
      .id("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")
      .html("Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}")
      .build();

  UpdateBroadcastResponseSuccess data = resend.broadcasts().update(params);
  ```

  ```py Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  params: resend.Broadcasts.UpdateParams = {
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",
    "html": "Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}"
  }

  resend.Broadcasts.update(params)
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  params = {
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",
    "html": "Hi #{FIRST_NAME}, you can unsubscribe here: #{RESEND_UNSUBSCRIBE_URL}",
  }
  Resend::Broadcasts.update(params)
  ```

  ```go Go theme={null}
  import "fmt"
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  params := &resend.UpdateBroadcastRequest{
    Id: "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",
    Html: fmt.Sprintf("Hi %s, you can unsubscribe here: %s", FIRST_NAME, RESEND_UNSUBSCRIBE_URL),
  }

  broadcast, _ := client.Broadcasts.Update(params)
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.BroadcastUpdateAsync(
      new Guid( "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794" ),
      new BroadcastUpdateData()
      {
          HtmlBody = "Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}",
      }
  );
  ```

  ```bash cURL theme={null}
  curl -X PATCH 'https://api.resend.com/broadcasts/49a3999c-0ce1-4ea6-ab68-afcd6dc2e794' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "html": "Hi {{{FIRST_NAME|there}}}, you can unsubscribe here: {{{RESEND_UNSUBSCRIBE_URL}}}"
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"
  }
  ```
</ResponseExample>


# Create Contact
Source: https://resend.com/docs/api-reference/contacts/create-contact

POST /audiences/:audience_id/contacts
Create a contact inside an audience.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Body Parameters

<ParamField body="email" type="string" required>
  The email address of the contact.
</ParamField>

<ResendParamField path="audience_id" type="string" required>
  The Audience ID.
</ResendParamField>

<ResendParamField body="first_name" type="string">
  The first name of the contact.
</ResendParamField>

<ResendParamField body="last_name" type="string">
  The last name of the contact.
</ResendParamField>

<ParamField body="unsubscribed" type="boolean">
  The subscription status.
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.contacts.create({
    email: 'steve.wozniak@gmail.com',
    firstName: 'Steve',
    lastName: 'Wozniak',
    unsubscribed: false,
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
  });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->contacts->create(
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
    parameters: [
      'email' => 'steve.wozniak@gmail.com',
      'first_name' => 'Steve',
      'last_name' => 'Wozniak',
      'unsubscribed' => false
    ]
  );
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  params: resend.Contacts.CreateParams = {
    "email": "steve.wozniak@gmail.com",
    "first_name": "Steve",
    "last_name": "Wozniak",
    "unsubscribed": False,
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
  }

  resend.Contacts.create(params)
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  params = {
    "email": "steve.wozniak@gmail.com",
    "first_name": "Steve",
    "last_name": "Wozniak",
    "unsubscribed": false,
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
  }

  Resend::Contacts.create(params)
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  params := &resend.CreateContactRequest{
    Email:        "steve.wozniak@gmail.com",
    FirstName:    "Steve",
    LastName:     "Wozniak",
    Unsubscribed: false,
    AudienceId:   "78261eea-8f8b-4381-83c6-79fa7120f1cf",
  }

  contact, err := client.Contacts.Create(params)
  ```

  ```rust Rust theme={null}
  use resend_rs::{types::ContactData, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let contact = ContactData::new("steve.wozniak@gmail.com")
      .with_first_name("Steve")
      .with_last_name("Wozniak")
      .with_unsubscribed(false);

    let _contact = resend
      .contacts
      .create("78261eea-8f8b-4381-83c6-79fa7120f1cf", contact)
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          CreateContactOptions params = CreateContactOptions.builder()
                  .email("steve.wozniak@gmail.com")
                  .firstName("Steve")
                  .lastName("Wozniak")
                  .unsubscribed(false)
                  .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf")
                  .build();

          CreateContactResponseSuccess data = resend.contacts().create(params);
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.ContactAddAsync(
      new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ),
      new ContactData()
      {
          Email = "steve.wozniak@gmail.com",
          FirstName = "Steve",
          LastName = "Wozniak",
          IsUnsubscribed = false,
      }
  );
  Console.WriteLine( "Contact Id={0}", resp.Content );
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "email": "steve.wozniak@gmail.com",
    "first_name": "Steve",
    "last_name": "Wozniak",
    "unsubscribed": false
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "contact",
    "id": "479e3145-dd38-476b-932c-529ceb705947"
  }
  ```
</ResponseExample>


# Delete Contact
Source: https://resend.com/docs/api-reference/contacts/delete-contact

DELETE /audiences/:audience_id/contacts/:id
Remove an existing contact from an audience.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Path Parameters

<ResendParamField path="audience_id" type="string" required>
  The Audience ID.
</ResendParamField>

Either `id` or `email` must be provided.

<ParamField path="id" type="string">
  The Contact ID.
</ParamField>

<ParamField path="email" type="string">
  The Contact email.
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  // Delete by contact id
  const { data, error } = await resend.contacts.remove({
    id: '520784e2-887d-4c25-b53c-4ad46ad38100',
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
  });

  // Delete by contact email
  const { data, error } = await resend.contacts.remove({
    email: 'acme@example.com',
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
  });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  // Delete by contact id
  $resend->contacts->remove(
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
    id: '520784e2-887d-4c25-b53c-4ad46ad38100'
  );

  // Delete by contact email
  $resend->contacts->remove(
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
    email: 'acme@example.com'
  );
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  # Delete by contact id
  resend.Contacts.remove(
    id="520784e2-887d-4c25-b53c-4ad46ad38100",
    audience_id="78261eea-8f8b-4381-83c6-79fa7120f1cf"
  )

  # Delete by contact email
  resend.Contacts.remove(
    email="acme@example.com",
    audience_id="78261eea-8f8b-4381-83c6-79fa7120f1cf"
  )
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  # Delete by contact id
  Resend::Contacts.remove(
    "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "520784e2-887d-4c25-b53c-4ad46ad38100"
  )

  # Delete by contact email
  Resend::Contacts.remove(
    "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "acme@example.com"
  )
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  // Delete by contact id
  removed, err := client.Contacts.Remove(
    "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "520784e2-887d-4c25-b53c-4ad46ad38100"
  )

  // Delete by contact email
  removed, err := client.Contacts.Remove(
    "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "acme@example.com"
  )
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    // Delete by contact id
    let _deleted = resend
      .contacts
      .delete_by_contact_id(
        "78261eea-8f8b-4381-83c6-79fa7120f1cf",
        "520784e2-887d-4c25-b53c-4ad46ad38100",
      )
      .await?;

    // Delete by contact email
    let _deleted = resend
      .contacts
      .delete_by_email("78261eea-8f8b-4381-83c6-79fa7120f1cf", "acme@example.com")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          // Delete by contact id
          resend.contacts().remove(ContactRequestOptions.builder()
                          .id("520784e2-887d-4c25-b53c-4ad46ad38100")
                          .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf")
                          .build());

          // Delete by contact email
          resend.contacts().remove(ContactRequestOptions.builder()
                          .email("acme@example.com")
                          .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf")
                          .build());
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  // By Id
  await resend.ContactDeleteAsync(
      audienceId: new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ),
      contactId: new Guid( "520784e2-887d-4c25-b53c-4ad46ad38100" )
  );

  // By Email
  await resend.ContactDeleteByEmailAsync(
      new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ),
      "acme@example.com"
  );
  ```

  ```bash cURL theme={null}
  # Delete by contact id
  curl -X DELETE 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts/520784e2-887d-4c25-b53c-4ad46ad38100' \
       -H 'Authorization: Bearer re_xxxxxxxxx'

  # Deleted by contact email
  curl -X DELETE 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts/acme@example.com' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "contact",
    "contact": "520784e2-887d-4c25-b53c-4ad46ad38100",
    "deleted": true
  }
  ```
</ResponseExample>


# Retrieve Contact
Source: https://resend.com/docs/api-reference/contacts/get-contact

GET /audiences/:audience_id/contacts/:id
Retrieve a single contact from an audience.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Path Parameters

<ResendParamField path="audience_id" type="string" required>
  The Audience ID.
</ResendParamField>

Either `id` or `email` must be provided.

<ParamField path="id" type="string">
  The Contact ID.
</ParamField>

<ParamField path="email" type="string">
  The Contact Email.
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  // Get by contact id
  const { data, error } = await resend.contacts.get({
    id: 'e169aa45-1ecf-4183-9955-b1499d5701d3',
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
  });

  // Get by contact email
  const { data, error } = await resend.contacts.get({
    email: 'steve.wozniak@gmail.com',
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
  });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  // Get by contact id
  $resend->contacts->get(
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
    id: 'e169aa45-1ecf-4183-9955-b1499d5701d3'
  );

  // Get by contact email
  $resend->contacts->get(
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
    email: 'steve.wozniak@gmail.com'
  );
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  # Get by contact id
  resend.Contacts.get(
    id="e169aa45-1ecf-4183-9955-b1499d5701d3",
    audience_id="78261eea-8f8b-4381-83c6-79fa7120f1cf"
  )

  # Get by contact email
  resend.Contacts.get(
    email="steve.wozniak@gmail.com",
    audience_id="78261eea-8f8b-4381-83c6-79fa7120f1cf"
  )
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  # Get by contact id
  params = {
    "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
  }

  Resend::Contacts.get(params)

  # Get by contact email
  params = {
    "email": "steve.wozniak@gmail.com",
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
  }

  Resend::Contacts.get(params)
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  // Get by contact id
  id := "e169aa45-1ecf-4183-9955-b1499d5701d3",
  contact, err := client.Contacts.Get(audienceId, id)

  // Get by contact email
  email := "steve.wozniak@gmail.com",
  contact, err := client.Contacts.Get(audienceId, email)
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    // Get by contact id
    let _contact = resend
      .contacts
      .get_by_id(
        "e169aa45-1ecf-4183-9955-b1499d5701d3",
        "78261eea-8f8b-4381-83c6-79fa7120f1cf",
      )
      .await?;

    // Get by contact email
    let _contact = resend
      .contacts
      .get_by_email(
        "steve.wozniak@gmail.com",
        "78261eea-8f8b-4381-83c6-79fa7120f1cf",
      )
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          // Get by contact id
          GetContactOptions params = GetContactOptions.builder()
                  .id("e169aa45-1ecf-4183-9955-b1499d5701d3")
                  .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf").build();

          // Get by contact email
          GetContactOptions params = GetContactOptions.builder()
                  .email("steve.wozniak@gmail.com")
                  .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf").build();

          GetContactResponseSuccess data = resend.contacts().get(params);
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  // Get by contact id
  var resp1 = await resend.ContactRetrieveAsync(
      audienceId: new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ),
      contactId: new Guid( "e169aa45-1ecf-4183-9955-b1499d5701d3" )
  );

  // Get by contact email
  var resp2 = await resend.ContactRetrieveByEmailAsync(
      audienceId: new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ),
      email: "steve.wozniak@gmail.com"
  );

  Console.WriteLine( "Contact Email={0}", resp2.Content.Email );
  ```

  ```bash cURL theme={null}
  # Get by contact id
  curl -X GET 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts/e169aa45-1ecf-4183-9955-b1499d5701d3' \
       -H 'Authorization: Bearer re_xxxxxxxxx'

  # Get by contact email
  curl -X GET 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts/steve.wozniak@gmail.com' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "contact",
    "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",
    "email": "steve.wozniak@gmail.com",
    "first_name": "Steve",
    "last_name": "Wozniak",
    "created_at": "2023-10-06T23:47:56.678Z",
    "unsubscribed": false
  }
  ```
</ResponseExample>


# Retrieve Contact Topics
Source: https://resend.com/docs/api-reference/contacts/get-contact-topics

GET /contacts/:contact_id/topics
Retrieve a list of topics subscriptions for a contact.

export const QueryParams = ({type, isRequired}) => {
  return <>
      <h2>Query Parameters</h2>

      {isRequired ? <ParamField query="limit" type="number">
          Number of {type} to retrieve.
          <ul>
            <li>
              Default value: <code>20</code>
            </li>
            <li>
              Maximum value: <code>100</code>
            </li>
            <li>
              Minimum value: <code>1</code>
            </li>
          </ul>
        </ParamField> : <>
          <p>
            Note that the <code>limit</code> parameter is <em>optional</em>. If
            you do not provide a <code>limit</code>, all {type} will be returned
            in a single response.
          </p>
          <ParamField query="limit" type="number">
            Number of {type} to retrieve.
            <ul>
              <li>
                Maximum value: <code>100</code>
              </li>
              <li>
                Minimum value: <code>1</code>
              </li>
            </ul>
          </ParamField>
        </>}

      <ParamField query="after" type="string">
        The ID <em>after</em> which we'll retrieve more {type} (for pagination).
        This ID will <em>not</em> be included in the returned list. Cannot be
        used with the
        <code>before</code> parameter.
      </ParamField>
      <ParamField query="before" type="string">
        The ID <em>before</em> which we'll retrieve more {type} (for
        pagination). This ID will <em>not</em> be included in the returned list.
        Cannot be used with the <code>after</code> parameter.
      </ParamField>
      <Info>
        You can only use either <code>after</code> or <code>before</code>{' '}
        parameter, not both. See our{' '}
        <a href="/api-reference/pagination">pagination guide</a> for more
        information.
      </Info>
    </>;
};

<Warning>
  Topics are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-topics
    ```

    ```python Python theme={null}
    pip install resend==2.18.0a1
    ```

    ```ruby Ruby theme={null}
    gem install resend -v 0.27.0.alpha.1
    ```

    ```go Go theme={null}
    go get github.com/resend/resend-go/v2@v2.28.0-alpha.1
    ```

    ```bash Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

## Path Parameters

Either `id` or `email` must be provided.

<ParamField path="id" type="string">
  The Contact ID.
</ParamField>

<ParamField path="email" type="string">
  The Contact Email.
</ParamField>

<QueryParams type="topics" isRequired={false} />

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  // Get by contact id
  const { data, error } = await resend.contacts.topics.get(
    'e169aa45-1ecf-4183-9955-b1499d5701d3',
  );

  // Get by contact email
  const { data, error } = await resend.contacts.topics.get(
    'steve.wozniak@gmail.com',
  );
  ```

  ```php PHP theme={null}
  // PHP SDK is not available yet
  ```

  ```python Python theme={null}
  # Python SDK is not available yet
  ```

  ```ruby Ruby theme={null}
  # Ruby SDK is not available yet
  ```

  ```go Go theme={null}
  // Go SDK is not available yet
  ```

  ```rust Rust theme={null}
  use resend_rs::{list_opts::ListOptions, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _topics = resend
      .contacts
      .get_contact_topics(
        "e169aa45-1ecf-4183-9955-b1499d5701d3",
        ListOptions::default(),
      )
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  // Get by contact id
  curl -X GET 'https://api.resend.com/contacts/e169aa45-1ecf-4183-9955-b1499d5701d3/topics' \
       -H 'Authorization: Bearer re_xxxxxxxxx'

  // Get by contact email
  curl -X GET 'https://api.resend.com/contacts/steve.wozniak@gmail.com/topics' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "list",
    "has_more": false,
    "data": [
      {
        "id": "b6d24b8e-af0b-4c3c-be0c-359bbd97381e",
        "name": "Product Updates",
        "description": "New features, and latest announcements.",
        "subscription": "opt_in"
      }
    ]
  }
  ```
</ResponseExample>


# List Contacts
Source: https://resend.com/docs/api-reference/contacts/list-contacts

GET /audiences/:audience_id/contacts
Show all contacts from an audience.

export const QueryParams = ({type, isRequired}) => {
  return <>
      <h2>Query Parameters</h2>

      {isRequired ? <ParamField query="limit" type="number">
          Number of {type} to retrieve.
          <ul>
            <li>
              Default value: <code>20</code>
            </li>
            <li>
              Maximum value: <code>100</code>
            </li>
            <li>
              Minimum value: <code>1</code>
            </li>
          </ul>
        </ParamField> : <>
          <p>
            Note that the <code>limit</code> parameter is <em>optional</em>. If
            you do not provide a <code>limit</code>, all {type} will be returned
            in a single response.
          </p>
          <ParamField query="limit" type="number">
            Number of {type} to retrieve.
            <ul>
              <li>
                Maximum value: <code>100</code>
              </li>
              <li>
                Minimum value: <code>1</code>
              </li>
            </ul>
          </ParamField>
        </>}

      <ParamField query="after" type="string">
        The ID <em>after</em> which we'll retrieve more {type} (for pagination).
        This ID will <em>not</em> be included in the returned list. Cannot be
        used with the
        <code>before</code> parameter.
      </ParamField>
      <ParamField query="before" type="string">
        The ID <em>before</em> which we'll retrieve more {type} (for
        pagination). This ID will <em>not</em> be included in the returned list.
        Cannot be used with the <code>after</code> parameter.
      </ParamField>
      <Info>
        You can only use either <code>after</code> or <code>before</code>{' '}
        parameter, not both. See our{' '}
        <a href="/api-reference/pagination">pagination guide</a> for more
        information.
      </Info>
    </>;
};

<QueryParams type="contacts" isRequired={false} />

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.contacts.list({
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
  });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->contacts->list(
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf'
  );
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Contacts.list(
    audience_id="78261eea-8f8b-4381-83c6-79fa7120f1cf"
  )
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Contacts.list("78261eea-8f8b-4381-83c6-79fa7120f1cf")
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  contacts, err := client.Contacts.List("78261eea-8f8b-4381-83c6-79fa7120f1cf")
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result, list_opts::ListOptions};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _contacts = resend
      .contacts
      .list(
          "78261eea-8f8b-4381-83c6-79fa7120f1cf",
          ListOptions::default(),
      )
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          ListContactsResponseSuccess data = resend.contacts().list("78261eea-8f8b-4381-83c6-79fa7120f1cf");
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.ContactListAsync( new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ) );
  Console.WriteLine( "Nr Contacts={0}", resp.Content.Count );
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "list",
    "has_more": false,
    "data": [
      {
        "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",
        "email": "steve.wozniak@gmail.com",
        "first_name": "Steve",
        "last_name": "Wozniak",
        "created_at": "2023-10-06T23:47:56.678Z",
        "unsubscribed": false
      }
    ]
  }
  ```
</ResponseExample>


# Update Contact
Source: https://resend.com/docs/api-reference/contacts/update-contact

PATCH /audiences/:audience_id/contacts/:id
Update an existing contact.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Path Parameters

<ResendParamField path="audience_id" type="string" required>
  The Audience ID.
</ResendParamField>

Either `id` or `email` must be provided.

<ParamField path="id" type="string">
  The Contact ID.
</ParamField>

<ParamField path="email" type="string">
  The Contact Email.
</ParamField>

## Body Parameters

<ResendParamField body="first_name" type="string">
  The first name of the contact.
</ResendParamField>

<ResendParamField body="last_name" type="string">
  The last name of the contact.
</ResendParamField>

<ParamField body="unsubscribed" type="boolean">
  The subscription status.
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  // Update by contact id
  const { data, error } = await resend.contacts.update({
    id: 'e169aa45-1ecf-4183-9955-b1499d5701d3',
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
    unsubscribed: true,
  });

  // Update by contact email
  const { data, error } = await resend.contacts.update({
    email: 'acme@example.com',
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
    unsubscribed: true,
  });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  // Update by contact id
  $resend->contacts->update(
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
    id: 'e169aa45-1ecf-4183-9955-b1499d5701d3',
    parameters: [
      'unsubscribed' => true
    ]
  );

  // Update by contact email
  $resend->contacts->update(
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
    email: 'acme@example.com',
    parameters: [
      'unsubscribed' => true
    ]
  );
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  # Update by contact id
  params: resend.Contacts.UpdateParams = {
    "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "unsubscribed": True,
  }

  resend.Contacts.update(params)

  # Update by contact email
  params: resend.Contacts.UpdateParams = {
    "email": "acme@example.com",
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "unsubscribed": True,
  }

  resend.Contacts.update(params)
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  # Update by contact id
  params = {
    "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "unsubscribed": true,
  }

  Resend::Contacts.update(params)

  # Update by contact email
  params = {
    "email": "acme@example.com",
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    "unsubscribed": true,
  }

  Resend::Contacts.update(params)
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  // Update by contact id
  params := &resend.UpdateContactRequest{
    Id:           "e169aa45-1ecf-4183-9955-b1499d5701d3",
    AudienceId:   "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    Unsubscribed: true,
  }

  contact, err := client.Contacts.Update(params)

  // Update by contact email
  params = &resend.UpdateContactRequest{
    Email:        "acme@example.com",
    AudienceId:   "78261eea-8f8b-4381-83c6-79fa7120f1cf",
    Unsubscribed: true,
  }

  contact, err := client.Contacts.Update(params)
  ```

  ```rust Rust theme={null}
  use resend_rs::{types::ContactChanges, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let changes = ContactChanges::new().with_unsubscribed(true);

    // Update by contact id
    let _contact = resend
      .contacts
      .update_by_id(
        "e169aa45-1ecf-4183-9955-b1499d5701d3",
        "78261eea-8f8b-4381-83c6-79fa7120f1cf",
        changes.clone(),
      )
      .await?;

    // Update by contact email
    let _contact = resend
      .contacts
      .update_by_email(
        "acme@example.com",
        "78261eea-8f8b-4381-83c6-79fa7120f1cf",
        changes,
      )
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          // Update by contact id
          UpdateContactOptions params = UpdateContactOptions.builder()
                  .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf")
                  .id("e169aa45-1ecf-4183-9955-b1499d5701d3")
                  .unsubscribed(true)
                  .build();

          // Update by contact email
          UpdateContactOptions params = UpdateContactOptions.builder()
                  .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf")
                  .email("acme@example.com")
                  .unsubscribed(true)
                  .build();

          UpdateContactResponseSuccess data = resend.contacts().update(params);
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  // By Id
  await resend.ContactUpdateAsync(
      audienceId: new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ),
      contactId: new Guid( "e169aa45-1ecf-4183-9955-b1499d5701d3" ),
      new ContactData()
      {
          FirstName = "Stevie",
          LastName = "Wozniaks",
          IsUnsubscribed = true,
      }
  );

  // By Email
  await resend.ContactUpdateByEmailAsync(
      new Guid( "78261eea-8f8b-4381-83c6-79fa7120f1cf" ),
      "acme@example.com",
      new ContactData()
      {
          FirstName = "Stevie",
          LastName = "Wozniaks",
          IsUnsubscribed = true,
      }
  );
  ```

  ```bash cURL theme={null}
  # Update by contact id
  curl -X PATCH 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts/520784e2-887d-4c25-b53c-4ad46ad38100' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "unsubscribed": true
  }'

  # Update by contact email
  curl -X PATCH 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts/acme@example.com' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "unsubscribed": true
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "contact",
    "id": "479e3145-dd38-476b-932c-529ceb705947"
  }
  ```
</ResponseExample>


# Update Contact Topics
Source: https://resend.com/docs/api-reference/contacts/update-contact-topics

PATCH /contacts/:contact_id/topics
Update topic subscriptions for a contact.

<Warning>
  Topics are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-topics
    ```

    ```python Python theme={null}
    pip install resend==2.18.0a1
    ```

    ```ruby Ruby theme={null}
    gem install resend -v 0.27.0.alpha.1
    ```

    ```go Go theme={null}
    go get github.com/resend/resend-go/v2@v2.28.0-alpha.1
    ```

    ```bash Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

## Path Parameters

Either `id` or `email` must be provided.

<ParamField path="id" type="string">
  The Contact ID.
</ParamField>

<ParamField path="email" type="string">
  The Contact Email.
</ParamField>

## Body Parameters

<ParamField body="topics" type="array" required>
  Array of topic subscription updates.

  <Expandable defaultOpen="true" title="properties">
    <ParamField body="id" type="string" required>
      The Topic ID.
    </ParamField>

    <ParamField body="subscription" type="string" required>
      The subscription action. Must be either `opt_in` or `opt_out`.
    </ParamField>
  </Expandable>
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  // Update by contact id
  const { data, error } = await resend.contacts.topics.update({
    id: 'e169aa45-1ecf-4183-9955-b1499d5701d3',
    topics: [
      {
        id: 'b6d24b8e-af0b-4c3c-be0c-359bbd97381e',
        subscription: 'opt_out',
      },
      {
        id: '07d84122-7224-4881-9c31-1c048e204602',
        subscription: 'opt_in',
      },
    ],
  });

  // Update by contact email
  const { data, error } = await resend.contacts.topics.update({
    email: 'steve.wozniak@gmail.com',
    topics: [
      {
        id: '07d84122-7224-4881-9c31-1c048e204602',
        subscription: 'opt_out',
      },
      {
        id: '07d84122-7224-4881-9c31-1c048e204602',
        subscription: 'opt_in',
      },
    ],
  });
  ```

  ```php PHP theme={null}
  // PHP SDK is not available yet
  ```

  ```python Python theme={null}
  # Python SDK is not available yet
  ```

  ```ruby Ruby theme={null}
  # Ruby SDK is not available yet
  ```

  ```go Go theme={null}
  // Go SDK is not available yet
  ```

  ```rust Rust theme={null}
  use resend_rs::{
    types::{SubscriptionType, UpdateContactTopicOptions},
    Resend, Result,
  };

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let topics = [
      UpdateContactTopicOptions::new(
        "b6d24b8e-af0b-4c3c-be0c-359bbd97381e",
        SubscriptionType::OptOut,
      ),
      UpdateContactTopicOptions::new(
        "07d84122-7224-4881-9c31-1c048e204602",
        SubscriptionType::OptIn,
      ),
    ];

    let _contact = resend
      .contacts
      .update_contact_topics("e169aa45-1ecf-4183-9955-b1499d5701d3", topics)
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  // Update by contact id
  curl -X PATCH 'https://api.resend.com/contacts/e169aa45-1ecf-4183-9955-b1499d5701d3/topics' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'[
        {
          "id": "b6d24b8e-af0b-4c3c-be0c-359bbd97381e",
          "subscription": "opt_out"
        }
       ]'

  // Update by contact email
  curl -X PATCH 'https://api.resend.com/contacts/steve.wozniak@gmail.com/topics' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'[
        {
          "id": "b6d24b8e-af0b-4c3c-be0c-359bbd97381e",
          "subscription": "opt_out"
        }
       ]'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "id": "b6d24b8e-af0b-4c3c-be0c-359bbd97381e"
  }
  ```
</ResponseExample>


# Create Domain
Source: https://resend.com/docs/api-reference/domains/create-domain

POST /domains
Create a domain through the Resend Email API.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Body Parameters

<ParamField body="name" type="string" required>
  The name of the domain you want to create.
</ParamField>

<ParamField body="region" type="string" default="us-east-1">
  The region where emails will be sent from. Possible values: `'us-east-1' |
    'eu-west-1' | 'sa-east-1' | 'ap-northeast-1'`
</ParamField>

<ResendParamField body="custom_return_path" type="string" default="send">
  For advanced use cases, choose a subdomain for the Return-Path address. The
  custom return path is used for SPF authentication, DMARC alignment, and
  handling bounced emails. Defaults to `send` (i.e., `send.yourdomain.tld`). Avoid
  setting values that could undermine credibility (e.g. `testing`), as they may
  be exposed to recipients.

  Learn more about [custom return paths](/dashboard/domains/introduction#custom-return-path).
</ResendParamField>

<Info>
  See all available `status` types in [the Domains
  overview](/dashboard/domains/introduction#understand-a-domain-status).
</Info>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.domains.create({ name: 'example.com' });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->domains->create([
    'name' => 'example.com'
  ]);
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  params: resend.Domains.CreateParams = {
    "name": "example.com",
  }

  resend.Domains.create(params)
  ```

  ```ruby Ruby theme={null}
  Resend.api_key = ENV["RESEND_API_KEY"]

  params = {
    name: "example.com",
  }
  domain = Resend::Domains.create(params)
  puts domain
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  params := &resend.CreateDomainRequest{
      Name: "example.com",
  }

  domain, err := client.Domains.Create(params)
  ```

  ```rust Rust theme={null}
  use resend_rs::{types::CreateDomainOptions, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _domain = resend
      .domains
      .add(CreateDomainOptions::new("example.com"))
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          CreateDomainOptions params = CreateDomainOptions
                  .builder()
                  .name("example.com").build();

          CreateDomainResponse domain = resend.domains().create(params);
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.DomainAddAsync( "example.com" );
  Console.WriteLine( "Domain Id={0}", resp.Content.Id );
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/domains' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "name": "example.com"
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "id": "4dd369bc-aa82-4ff3-97de-514ae3000ee0",
    "name": "example.com",
    "created_at": "2023-03-28T17:12:02.059593+00:00",
    "status": "not_started",
    "records": [
      {
        "record": "SPF",
        "name": "send",
        "type": "MX",
        "ttl": "Auto",
        "status": "not_started",
        "value": "feedback-smtp.us-east-1.amazonses.com",
        "priority": 10
      },
      {
        "record": "SPF",
        "name": "send",
        "value": "\"v=spf1 include:amazonses.com ~all\"",
        "type": "TXT",
        "ttl": "Auto",
        "status": "not_started"
      },
      {
        "record": "DKIM",
        "name": "nhapbbryle57yxg3fbjytyodgbt2kyyg._domainkey",
        "value": "nhapbbryle57yxg3fbjytyodgbt2kyyg.dkim.amazonses.com.",
        "type": "CNAME",
        "status": "not_started",
        "ttl": "Auto"
      },
      {
        "record": "DKIM",
        "name": "xbakwbe5fcscrhzshpap6kbxesf6pfgn._domainkey",
        "value": "xbakwbe5fcscrhzshpap6kbxesf6pfgn.dkim.amazonses.com.",
        "type": "CNAME",
        "status": "not_started",
        "ttl": "Auto"
      },
      {
        "record": "DKIM",
        "name": "txrcreso3dqbvcve45tqyosxwaegvhgn._domainkey",
        "value": "txrcreso3dqbvcve45tqyosxwaegvhgn.dkim.amazonses.com.",
        "type": "CNAME",
        "status": "not_started",
        "ttl": "Auto"
      }
    ],
    "region": "us-east-1"
  }
  ```
</ResponseExample>


# Delete Domain
Source: https://resend.com/docs/api-reference/domains/delete-domain

DELETE /domains/:domain_id
Remove an existing domain.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Path Parameters

<ResendParamField path="domain_id" type="string" required>
  The Domain ID.
</ResendParamField>

<RequestExample>
  ```js Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.domains.remove(
    'd91cd9bd-1176-453e-8fc1-35364d380206',
  );
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->domains->remove('d91cd9bd-1176-453e-8fc1-35364d380206');
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Domains.remove(domain_id="d91cd9bd-1176-453e-8fc1-35364d380206")
  ```

  ```ruby Ruby theme={null}
  Resend.api_key = ENV["RESEND_API_KEY"]
  Resend::Domains.remove("d91cd9bd-1176-453e-8fc1-35364d380206")
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  removed, err := client.Domains.Remove("d91cd9bd-1176-453e-8fc1-35364d380206")
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _deleted = resend
      .domains
      .delete("d91cd9bd-1176-453e-8fc1-35364d380206")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          RemoveDomainResponse removed = resend.domains().remove("d91cd9bd-1176-453e-8fc1-35364d380206");
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  await resend.DomainDeleteAsync( new Guid( "d91cd9bd-1176-453e-8fc1-35364d380206" ) );
  ```

  ```bash cURL theme={null}
  curl -X DELETE 'https://api.resend.com/domains/d91cd9bd-1176-453e-8fc1-35364d380206' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "domain",
    "id": "d91cd9bd-1176-453e-8fc1-35364d380206",
    "deleted": true
  }
  ```
</ResponseExample>


# Retrieve Domain
Source: https://resend.com/docs/api-reference/domains/get-domain

GET /domains/:domain_id
Retrieve a single domain for the authenticated user.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Path Parameters

<ResendParamField path="domain_id" type="string" required>
  The Domain ID.
</ResendParamField>

<Info>
  See all available `status` types in [the Domains
  overview](/dashboard/domains/introduction#understand-a-domain-status).
</Info>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.domains.get(
    'd91cd9bd-1176-453e-8fc1-35364d380206',
  );
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->domains->get('d91cd9bd-1176-453e-8fc1-35364d380206');
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Domains.get(domain_id="d91cd9bd-1176-453e-8fc1-35364d380206")
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Domains.get "d91cd9bd-1176-453e-8fc1-35364d380206"
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  retrievedDomain, err := client.Domains.Get("d91cd9bd-1176-453e-8fc1-35364d380206")
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _domain = resend
      .domains
      .get("d91cd9bd-1176-453e-8fc1-35364d380206")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          Domain domain = resend.domains().get("d91cd9bd-1176-453e-8fc1-35364d380206");
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.DomainRetrieveAsync( new Guid( "d91cd9bd-1176-453e-8fc1-35364d380206" ) );
  Console.WriteLine( "Domain Id={0}", resp.Content.Name );
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/domains/d91cd9bd-1176-453e-8fc1-35364d380206' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "domain",
    "id": "d91cd9bd-1176-453e-8fc1-35364d380206",
    "name": "example.com",
    "status": "not_started",
    "capability": "send",
    "created_at": "2023-04-26T20:21:26.347412+00:00",
    "region": "us-east-1",
    "records": [
      {
        "record": "SPF",
        "name": "send",
        "type": "MX",
        "ttl": "Auto",
        "status": "not_started",
        "value": "feedback-smtp.us-east-1.amazonses.com",
        "priority": 10
      },
      {
        "record": "SPF",
        "name": "send",
        "value": "\"v=spf1 include:amazonses.com ~all\"",
        "type": "TXT",
        "ttl": "Auto",
        "status": "not_started"
      },
      {
        "record": "DKIM",
        "name": "resend._domainkey",
        "value": "p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDsc4Lh8xilsngyKEgN2S84+21gn+x6SEXtjWvPiAAmnmggr5FWG42WnqczpzQ/mNblqHz4CDwUum6LtY6SdoOlDmrhvp5khA3cd661W9FlK3yp7+jVACQElS7d9O6jv8VsBbVg4COess3gyLE5RyxqF1vYsrEXqyM8TBz1n5AGkQIDAQA2",
        "type": "TXT",
        "status": "not_started",
        "ttl": "Auto"
      }
    ]
  }
  ```
</ResponseExample>


# List Domains
Source: https://resend.com/docs/api-reference/domains/list-domains

GET /domains
Retrieve a list of domains for the authenticated user.

export const QueryParams = ({type, isRequired}) => {
  return <>
      <h2>Query Parameters</h2>

      {isRequired ? <ParamField query="limit" type="number">
          Number of {type} to retrieve.
          <ul>
            <li>
              Default value: <code>20</code>
            </li>
            <li>
              Maximum value: <code>100</code>
            </li>
            <li>
              Minimum value: <code>1</code>
            </li>
          </ul>
        </ParamField> : <>
          <p>
            Note that the <code>limit</code> parameter is <em>optional</em>. If
            you do not provide a <code>limit</code>, all {type} will be returned
            in a single response.
          </p>
          <ParamField query="limit" type="number">
            Number of {type} to retrieve.
            <ul>
              <li>
                Maximum value: <code>100</code>
              </li>
              <li>
                Minimum value: <code>1</code>
              </li>
            </ul>
          </ParamField>
        </>}

      <ParamField query="after" type="string">
        The ID <em>after</em> which we'll retrieve more {type} (for pagination).
        This ID will <em>not</em> be included in the returned list. Cannot be
        used with the
        <code>before</code> parameter.
      </ParamField>
      <ParamField query="before" type="string">
        The ID <em>before</em> which we'll retrieve more {type} (for
        pagination). This ID will <em>not</em> be included in the returned list.
        Cannot be used with the <code>after</code> parameter.
      </ParamField>
      <Info>
        You can only use either <code>after</code> or <code>before</code>{' '}
        parameter, not both. See our{' '}
        <a href="/api-reference/pagination">pagination guide</a> for more
        information.
      </Info>
    </>;
};

<Info>
  See all available `status` types in [the Domains
  overview](/dashboard/domains/introduction#understand-a-domain-status).
</Info>

<QueryParams type="domains" isRequired={false} />

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.domains.list();
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->domains->list();
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"
  resend.Domains.list()
  ```

  ```ruby Ruby theme={null}
  Resend.api_key = ENV["RESEND_API_KEY"]
  Resend::Domains.list
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  domains, err := client.Domains.List()
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result, list_opts::ListOptions};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _domains = resend.domains.list(ListOptions::default()).await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          ListDomainsResponse response = resend.domains().list();
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.DomainListAsync();
  Console.WriteLine( "Nr Domains={0}", resp.Content.Count );
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/domains' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "list",
    "has_more": false,
    "data": [
      {
        "id": "d91cd9bd-1176-453e-8fc1-35364d380206",
        "name": "example.com",
        "status": "not_started",
        "created_at": "2023-04-26T20:21:26.347412+00:00",
        "region": "us-east-1"
      }
    ]
  }
  ```
</ResponseExample>


# Update Domain
Source: https://resend.com/docs/api-reference/domains/update-domain

PATCH /domains/:domain_id
Update an existing domain.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Path Parameters

<ResendParamField path="domain_id" type="string" required>
  The Domain ID.
</ResendParamField>

## Body Parameters

<ResendParamField body="click_tracking" type="boolean">
  Track clicks within the body of each HTML email.
</ResendParamField>

<ResendParamField body="open_tracking" type="boolean">
  Track the open rate of each email.
</ResendParamField>

<ParamField body="tls" type="string" default="opportunistic">
  <ul>
    <li>
      `opportunistic`: Opportunistic TLS means that it always attempts to make a
      secure connection to the receiving mail server. If it can't establish a
      secure connection, it sends the message unencrypted.
    </li>

    <li>
      `enforced`: Enforced TLS on the other hand, requires that the email
      communication must use TLS no matter what. If the receiving server does
      not support TLS, the email will not be sent.
    </li>
  </ul>
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.domains.update({
    id: 'b8617ad3-b712-41d9-81a0-f7c3d879314e',
    openTracking: false,
    clickTracking: true,
    tls: 'enforced',
  });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->domains->update(
    'b8617ad3-b712-41d9-81a0-f7c3d879314e',
    [
      'open_tracking' => false,
      'click_tracking' => true,
      'tls' => 'enforced',
    ]
  );
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  params: resend.Domains.UpdateParams = {
    "id": "b8617ad3-b712-41d9-81a0-f7c3d879314e",
    "open_tracking": False,
    "click_tracking": True,
    "tls": "enforced",
  }

  resend.Domains.update(params)
  ```

  ```ruby Ruby theme={null}
  Resend.api_key = "re_xxxxxxxxx"

  Resend::Domains.update({
    id: "b8617ad3-b712-41d9-81a0-f7c3d879314e",
    open_tracking: false,
    click_tracking: true,
    tls: "enforced",
  })
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  updateDomainParams := &resend.UpdateDomainRequest{
    OpenTracking:  false,
    ClickTracking: true,
    Tls: resend.Enforced,
  }

  updated, err := client.Domains.Update("b8617ad3-b712-41d9-81a0-f7c3d879314e", updateDomainParams)
  ```

  ```rust Rust theme={null}
  use resend_rs::{types::{DomainChanges, Tls}, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let changes = DomainChanges::new()
      .with_open_tracking(false)
      .with_click_tracking(true)
      .with_tls(Tls::Enforced);

    let _domain = resend
      .domains
      .update("b8617ad3-b712-41d9-81a0-f7c3d879314e", changes)
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  Resend resend = new Resend("re_xxxxxxxxx");

  UpdateDomainOptions params = UpdateDomainOptions.builder()
                  .id("b8617ad3-b712-41d9-81a0-f7c3d879314e")
                  .openTracking(false)
                  .clickTracking(true)
                  .tls(Tls.ENFORCED)
                  .build();

  resend.domains().update(params);
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  await resend.DomainUpdateAsync(
      new Guid( "b8617ad3-b712-41d9-81a0-f7c3d879314e" ),
      new DomainUpdateData()
      {
          TrackOpen = false,
          TrackClicks = true,
          TlsMode = TlsMode.Enforced,
      }
  );
  ```

  ```bash cURL theme={null}
  curl -X PATCH 'https://api.resend.com/domains/b8617ad3-b712-41d9-81a0-f7c3d879314e' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "open_tracking": false,
    "click_tracking": true,
    "tls": "enforced"
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "domain",
    "id": "b8617ad3-b712-41d9-81a0-f7c3d879314e"
  }
  ```
</ResponseExample>


# Verify Domain
Source: https://resend.com/docs/api-reference/domains/verify-domain

POST /domains/:domain_id/verify
Verify an existing domain.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Path Parameters

<ResendParamField path="domain_id" type="string" required>
  The Domain ID.
</ResendParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.domains.verify(
    'd91cd9bd-1176-453e-8fc1-35364d380206',
  );
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->domains->verify('d91cd9bd-1176-453e-8fc1-35364d380206');
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"
  resend.Domains.verify(domain_id="d91cd9bd-1176-453e-8fc1-35364d380206")
  ```

  ```ruby Ruby theme={null}
  Resend.api_key = ENV["RESEND_API_KEY"]
  Resend::Domains.verify("d91cd9bd-1176-453e-8fc1-35364d380206")
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  verified, err := client.Domains.Verify("d91cd9bd-1176-453e-8fc1-35364d380206")
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    resend
      .domains
      .verify("d91cd9bd-1176-453e-8fc1-35364d380206")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          VerifyDomainResponse verified = resend.domains().verify("d91cd9bd-1176-453e-8fc1-35364d380206");
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.DomainVerifyAsync( new Guid( "d91cd9bd-1176-453e-8fc1-35364d380206" ) );
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/domains/d91cd9bd-1176-453e-8fc1-35364d380206/verify' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "domain",
    "id": "d91cd9bd-1176-453e-8fc1-35364d380206"
  }
  ```
</ResponseExample>


# Cancel Email
Source: https://resend.com/docs/api-reference/emails/cancel-email

POST /emails/:id/cancel
Cancel a scheduled email.

## Path Parameters

<ParamField path="id" type="string" required>
  The Email ID.
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.emails.cancel(
    '49a3999c-0ce1-4ea6-ab68-afcd6dc2e794',
  );
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->emails->cancel('49a3999c-0ce1-4ea6-ab68-afcd6dc2e794');
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"
  resend.Emails.cancel(email_id="49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Emails.cancel("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")
  ```

  ```go Go theme={null}
  import "github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  canceled, err := client.Emails.Cancel("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")
  if err != nil {
    panic(err)
  }
  fmt.Println(canceled.Id)
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _canceled = resend
      .emails
      .cancel("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          CancelEmailResponse canceled = resend
            .emails()
            .cancel("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794");
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  await resend.EmailCancelAsync( new Guid( "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794" ) );
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/emails/49a3999c-0ce1-4ea6-ab68-afcd6dc2e794/cancel' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "email",
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"
  }
  ```
</ResponseExample>


# List Emails
Source: https://resend.com/docs/api-reference/emails/list-emails

GET /emails
Retrieve a list of emails.

export const QueryParams = ({type, isRequired}) => {
  return <>
      <h2>Query Parameters</h2>

      {isRequired ? <ParamField query="limit" type="number">
          Number of {type} to retrieve.
          <ul>
            <li>
              Default value: <code>20</code>
            </li>
            <li>
              Maximum value: <code>100</code>
            </li>
            <li>
              Minimum value: <code>1</code>
            </li>
          </ul>
        </ParamField> : <>
          <p>
            Note that the <code>limit</code> parameter is <em>optional</em>. If
            you do not provide a <code>limit</code>, all {type} will be returned
            in a single response.
          </p>
          <ParamField query="limit" type="number">
            Number of {type} to retrieve.
            <ul>
              <li>
                Maximum value: <code>100</code>
              </li>
              <li>
                Minimum value: <code>1</code>
              </li>
            </ul>
          </ParamField>
        </>}

      <ParamField query="after" type="string">
        The ID <em>after</em> which we'll retrieve more {type} (for pagination).
        This ID will <em>not</em> be included in the returned list. Cannot be
        used with the
        <code>before</code> parameter.
      </ParamField>
      <ParamField query="before" type="string">
        The ID <em>before</em> which we'll retrieve more {type} (for
        pagination). This ID will <em>not</em> be included in the returned list.
        Cannot be used with the <code>after</code> parameter.
      </ParamField>
      <Info>
        You can only use either <code>after</code> or <code>before</code>{' '}
        parameter, not both. See our{' '}
        <a href="/api-reference/pagination">pagination guide</a> for more
        information.
      </Info>
    </>;
};

You can list all emails received by your domain. The list returns references to individual emails. If needed, you can use the `id` of an email to retrieve the email HTML to plain text using the [Retrieve Email](/api-reference/emails/retrieve-email) endpoint.

<QueryParams type="emails" isRequired={true} />

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.emails.list();
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->emails->list();
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"
  resend.Emails.list()
  ```

  ```ruby Ruby theme={null}
  Resend.api_key = "re_xxxxxxxxx"
  emails = Resend::Emails.list
  puts emails
  ```

  ```go Go theme={null}
  import (
    "context"
    "fmt"

    "github.com/resend/resend-go/v2"
  )

  ctx := context.TODO()
  client := resend.NewClient("re_xxxxxxxxx")

  paginatedResp, err := client.Emails.ListWithOptions(ctx, nil)
  if err != nil {
    panic(err)
  }

  fmt.Printf("Found %d emails\n", len(paginatedResp.Data))

  if paginatedResp.HasMore {
    opts := &resend.ListOptions{
      After: &paginatedResp.Data[len(paginatedResp.Data)-1].ID,
    }
    paginatedResp, err = client.Emails.ListWithOptions(ctx, opts)

    if err != nil {
      panic(err)
    }

    fmt.Printf("Found %d more emails in next page\n", len(paginatedResp.Data))
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{list_opts::ListOptions, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _emails = resend.emails.list(ListOptions::default()).await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          ListEmailsResponseSuccess emails = resend.emails().list();
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.EmailListAsync();
  Console.WriteLine( "Count={0}", resp.Content.Data.Count );
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/emails' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "list",
    "has_more": false,
    "data": [
      {
        "id": "4ef9a417-02e9-4d39-ad75-9611e0fcc33c",
        "to": ["delivered@resend.dev"],
        "from": "Acme <onboarding@resend.dev>",
        "created_at": "2023-04-03T22:13:42.674981+00:00",
        "subject": "Hello World",
        "bcc": null,
        "cc": null,
        "reply_to": null,
        "last_event": "delivered",
        "scheduled_at": null
      },
      {
        "id": "3a9f8c2b-1e5d-4f8a-9c7b-2d6e5f8a9c7b",
        "to": ["user@example.com"],
        "from": "Acme <onboarding@resend.dev>",
        "created_at": "2023-04-03T21:45:12.345678+00:00",
        "subject": "Welcome to Acme",
        "bcc": null,
        "cc": null,
        "reply_to": null,
        "last_event": "opened",
        "scheduled_at": null
      }
    ]
  }
  ```
</ResponseExample>


# List Received Emails
Source: https://resend.com/docs/api-reference/emails/list-received-emails

GET /emails/receiving/
Retrieve a list of received emails for the authenticated user.

export const QueryParams = ({type, isRequired}) => {
  return <>
      <h2>Query Parameters</h2>

      {isRequired ? <ParamField query="limit" type="number">
          Number of {type} to retrieve.
          <ul>
            <li>
              Default value: <code>20</code>
            </li>
            <li>
              Maximum value: <code>100</code>
            </li>
            <li>
              Minimum value: <code>1</code>
            </li>
          </ul>
        </ParamField> : <>
          <p>
            Note that the <code>limit</code> parameter is <em>optional</em>. If
            you do not provide a <code>limit</code>, all {type} will be returned
            in a single response.
          </p>
          <ParamField query="limit" type="number">
            Number of {type} to retrieve.
            <ul>
              <li>
                Maximum value: <code>100</code>
              </li>
              <li>
                Minimum value: <code>1</code>
              </li>
            </ul>
          </ParamField>
        </>}

      <ParamField query="after" type="string">
        The ID <em>after</em> which we'll retrieve more {type} (for pagination).
        This ID will <em>not</em> be included in the returned list. Cannot be
        used with the
        <code>before</code> parameter.
      </ParamField>
      <ParamField query="before" type="string">
        The ID <em>before</em> which we'll retrieve more {type} (for
        pagination). This ID will <em>not</em> be included in the returned list.
        Cannot be used with the <code>after</code> parameter.
      </ParamField>
      <Info>
        You can only use either <code>after</code> or <code>before</code>{' '}
        parameter, not both. See our{' '}
        <a href="/api-reference/pagination">pagination guide</a> for more
        information.
      </Info>
    </>;
};

<Warning>
  Receiving emails are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.4.0-canary.0
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-inbound-emails
    ```

    ```python Python theme={null}
    pip install resend==2.18.0a1
    ```

    ```ruby Ruby theme={null}
    gem install resend -v 0.27.0.alpha.1
    ```

    ```go Go theme={null}
    go get github.com/resend/resend-go/v2@v2.28.0-alpha.1
    ```

    ```rust Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Join the waitlist](https://resend.com/inbound) if you're interested in testing
  this feature.
</Warning>

<QueryParams type="emails" isRequired={false} />

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.emails.receiving.list();
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->emails->receiving->list();
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Emails.Receiving.list()
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Emails::Receiving.list()
  ```

  ```go Go theme={null}
  import (
  	"context"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
  	client := resend.NewClient("re_xxxxxxxxx")

  	emails, err := client.Receiving.ListWithContext(context.TODO())
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{list_opts::ListOptions, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _email = resend.receiving.list(ListOptions::default()).await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/emails/receiving' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "list",
    "has_more": true,
    "data": [
      {
        "id": "a39999a6-88e3-48b1-888b-beaabcde1b33",
        "to": ["recipient@example.com"],
        "from": "sender@example.com",
        "created_at": "2025-10-09 14:37:40.951732+00",
        "subject": "Hello World",
        "bcc": [],
        "cc": [],
        "reply_to": [],
        "message_id": "<111-222-333@email.provider.example.com>",
        "attachments": [
          {
            "filename": "example.txt",
            "content_type": "text/plain",
            "content_id": null,
            "content_disposition": "attachment",
            "id": "47e999c7-c89c-4999-bf32-aaaaa1c3ff21",
            "size": 13
          }
        ]
      }
    ]
  }
  ```
</ResponseExample>


# Retrieve Email
Source: https://resend.com/docs/api-reference/emails/retrieve-email

GET /emails/:id
Retrieve a single email.

## Path Parameters

<ParamField path="id" type="string" required>
  The Email ID.
</ParamField>

<Info>
  See all available `last_event` types in [the Email Events
  overview](/dashboard/emails/introduction#understand-email-events).
</Info>

<RequestExample>
  ```js Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.emails.get(
    '37e4414c-5e25-4dbc-a071-43552a4bd53b',
  );
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->emails->get('37e4414c-5e25-4dbc-a071-43552a4bd53b');
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"
  resend.Emails.get(email_id="4ef9a417-02e9-4d39-ad75-9611e0fcc33c")
  ```

  ```ruby Ruby theme={null}
  Resend.api_key = "re_xxxxxxxxx"
  email = Resend::Emails.get("4ef9a417-02e9-4d39-ad75-9611e0fcc33c")
  puts email
  ```

  ```go Go theme={null}
  import "github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  email, err := client.Emails.Get("4ef9a417-02e9-4d39-ad75-9611e0fcc33c")
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _email = resend
      .emails
      .get("4ef9a417-02e9-4d39-ad75-9611e0fcc33c")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          Email email = resend.emails().get("4ef9a417-02e9-4d39-ad75-9611e0fcc33c");
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.EmailRetrieveAsync( new Guid( "4ef9a417-02e9-4d39-ad75-9611e0fcc33c" ) );
  Console.WriteLine( "Subject={0}", resp.Content.Subject );
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/emails/4ef9a417-02e9-4d39-ad75-9611e0fcc33c' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "email",
    "id": "4ef9a417-02e9-4d39-ad75-9611e0fcc33c",
    "to": ["delivered@resend.dev"],
    "from": "Acme <onboarding@resend.dev>",
    "created_at": "2023-04-03T22:13:42.674981+00:00",
    "subject": "Hello World",
    "html": "Congrats on sending your <strong>first email</strong>!",
    "text": null,
    "bcc": [],
    "cc": [],
    "reply_to": [],
    "last_event": "delivered",
    "scheduled_at": null
  }
  ```
</ResponseExample>


# Retrieve Received Email
Source: https://resend.com/docs/api-reference/emails/retrieve-received-email

GET /emails/receiving/:id
Retrieve a single received email.

<Warning>
  Receiving emails are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.4.0-canary.0
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-inbound-emails
    ```

    ```python Python theme={null}
    pip install resend==2.18.0a1
    ```

    ```ruby Ruby theme={null}
    gem install resend -v 0.27.0.alpha.1
    ```

    ```go Go theme={null}
    go get github.com/resend/resend-go/v2@v2.28.0-alpha.1
    ```

    ```rust Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Join the waitlist](https://resend.com/inbound) if you're interested in testing
  this feature.
</Warning>

## Path Parameters

<ParamField path="id" type="string" required>
  The ID for the received email.
</ParamField>

<RequestExample>
  ```js Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.emails.receiving.get(
    '37e4414c-5e25-4dbc-a071-43552a4bd53b',
  );
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->emails->receiving->get('37e4414c-5e25-4dbc-a071-43552a4bd53b');
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Emails.Receiving.get(email_id="37e4414c-5e25-4dbc-a071-43552a4bd53b")
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Emails::Receiving.get("37e4414c-5e25-4dbc-a071-43552a4bd53b")
  ```

  ```go Go theme={null}
  import (
  	"context"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
  	client := resend.NewClient("re_xxxxxxxxx")

  	email, err := client.Receiving.GetWithContext(
  		context.TODO(),
  		"37e4414c-5e25-4dbc-a071-43552a4bd53b",
  	)
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _email = resend
      .receiving
      .get("37e4414c-5e25-4dbc-a071-43552a4bd53b")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/emails/receiving/4ef9a417-02e9-4d39-ad75-9611e0fcc33c' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "email",
    "id": "4ef9a417-02e9-4d39-ad75-9611e0fcc33c",
    "to": ["delivered@resend.dev"],
    "from": "Acme <onboarding@resend.dev>",
    "created_at": "2023-04-03T22:13:42.674981+00:00",
    "subject": "Hello World",
    "html": "Congrats on sending your <strong>first email</strong>!",
    "text": null,
    "headers": {
      "return-path": "lucas.costa@resend.com",
      "mime-version": "1.0"
    },
    "bcc": [],
    "cc": [],
    "reply_to": [],
    "message_id": "<example+123>",
    "attachments": [
      {
        "id": "2a0c9ce0-3112-4728-976e-47ddcd16a318",
        "filename": "avatar.png",
        "content_type": "image/png",
        "content_disposition": "inline",
        "content_id": "img001"
      }
    ]
  }
  ```
</ResponseExample>


# Send Batch Emails
Source: https://resend.com/docs/api-reference/emails/send-batch-emails

POST /emails/batch
Trigger up to 100 batch emails at once.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

Instead of sending one email per HTTP request, we provide a batching endpoint that permits you to send up to 100 emails in a single API call.

## Body Parameters

<ParamField body="from" type="string" required>
  Sender email address.

  To include a friendly name, use the format `"Your Name <sender@domain.com>"`.
</ParamField>

<ParamField body="to" type="string | string[]" required>
  Recipient email address. For multiple addresses, send as an array of strings.
  Max 50.
</ParamField>

<ParamField body="subject" type="string" required>
  Email subject.
</ParamField>

<ParamField body="bcc" type="string | string[]">
  Bcc recipient email address. For multiple addresses, send as an array of
  strings.
</ParamField>

<ParamField body="cc" type="string | string[]">
  Cc recipient email address. For multiple addresses, send as an array of
  strings.
</ParamField>

<ResendParamField body="reply_to" type="string | string[]">
  Reply-to email address. For multiple addresses, send as an array of strings.
</ResendParamField>

<ParamField body="html" type="string">
  The HTML version of the message.
</ParamField>

<ParamField body="text" type="string">
  The plain text version of the message.

  <Info>
    If not provided, the HTML will be used to generate a plain text version. You
    can opt out of this behavior by setting value to an empty string.
  </Info>
</ParamField>

<ParamField body="react" type="React.ReactNode">
  The React component used to write the message. *Only available in the Node.js
  SDK.*
</ParamField>

<ParamField body="headers" type="object">
  Custom headers to add to the email.
</ParamField>

<ParamField body="tags" type="array">
  Custom data passed in key/value pairs.

  [See examples](/dashboard/emails/tags).

  <Expandable defaultOpen="true" title="properties">
    <ParamField body="name" type="string" required>
      The name of the email tag.

      It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (\_), or dashes (-).

      It can contain no more than 256 characters.
    </ParamField>

    <ParamField body="value" type="string" required>
      The value of the email tag.

      It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (\_), or dashes (-).

      It can contain no more than 256 characters.
    </ParamField>
  </Expandable>
</ParamField>

<ParamField body="template" type="object">
  <Warning>
    Templates are currently in private beta and only available to a limited
    number of users. APIs might change before GA.

    <span />

    To use the methods on this page, you must upgrade your Resend SDK:

    <CodeGroup>
      ```bash Node.js theme={null}
      npm install resend@6.3.0-canary.4
      ```

      ```bash PHP theme={null}
      composer require resend/resend-php:dev-templates
      ```

      ```python Python theme={null}
      # Python SDK is not available yet
      ```

      ```ruby Ruby theme={null}
      # Ruby SDK is not available yet
      ```

      ```go Go theme={null}
      // Go SDK is not available yet
      ```

      ```bash Rust theme={null}
      cargo add resend-rs@0.19.0-beta
      ```

      ```java Java theme={null}
      // Java SDK is not available yet
      ```

      ```csharp .NET theme={null}
      // C# SDK is not available yet
      ```
    </CodeGroup>

    <span />

    [Get in touch](https://resend.com/contact) if you're interested in testing
    this feature.
  </Warning>

  To send using a template, provide a `template` object with:

  * `id`: id of the published template
  * `variables`: array of variable objects (if applicable)

  <Info>
    If a `template` is provided, you cannot send `html`, `text`, or `react` in the payload, otherwise the API will return a validation error.

    When sending a template, the payload for `from`, `subject`, and `reply_to` take precedence over the template's defaults for these fields. If the template does not provide a default value for these fields, you must provide them in the payload.
  </Info>
</ParamField>

<ParamField body="id" type="string" required>
  The id of the published email template. Required if `template` is provided. Only published templates can be used when sending emails.

  See the [errors reference](/api-reference/errors) for more details.
</ParamField>

<ParamField body="variables" type="object">
  Template variables object with key/value pairs.

  ```ts  theme={null}
  variables: {
  	CTA: 'Sign up now',
  	CTA_LINK: 'https://example.com/signup'
  }
  ```

  When sending the template, the HTML will be parsed. If all the variables used in the template were provided, the email will be sent. If not, the call will throw a validation error.

  See the [errors reference](/api-reference/errors) for more details.

  [See examples](/dashboard/templates/introduction).

  <Expandable defaultOpen="true" title="properties">
    <ParamField body="key" type="string" required>
      The key of the variable.

      May only contain ASCII letters (a–z, A–Z), numbers (0–9), and underscores (\_).

      It can contain no more than 50 characters.
    </ParamField>

    <ParamField body="value" value="string | number | boolean | object | list" required>
      The value of the variable.

      Observe these technical limitations:

      * `string`: maximum length of 50 characters
      * `number`: not greater than 2^53 - 1
      * `boolean`: `true` or `false`
      * `object`: maximum length of 50 keys
      * `list`: maximum length of 50 indexes
    </ParamField>
  </Expandable>
</ParamField>

## Headers

<ParamField header="Idempotency-Key" type="string">
  Add an idempotency key to prevent duplicated emails.

  * Should be **unique per API request**
  * Idempotency keys expire after **24 hours**
  * Have a maximum length of **256 characters**

  [Learn more about idempotency keys →](/dashboard/emails/idempotency-keys)
</ParamField>

<ParamField header="x-batch-validation" type="strict | permissive" default="strict">
  Batch validation modes control how emails are validated in batch sending.

  Choose between two modes:

  * **Strict mode (default)**: sends the batch only if all emails in the request are valid.
  * **Permissive mode**: processes all emails, allowing for partial success and returning validation errors if present.

  [Learn more about batch validation →](/dashboard/emails/batch-validation-modes)
</ParamField>

## Limitations

The `attachments` and `scheduled_at` fields are not supported yet.

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.batch.send([
    {
      from: 'Acme <onboarding@resend.dev>',
      to: ['foo@gmail.com'],
      subject: 'hello world',
      html: '<h1>it works!</h1>',
    },
    {
      from: 'Acme <onboarding@resend.dev>',
      to: ['bar@outlook.com'],
      subject: 'world hello',
      html: '<p>it works!</p>',
    },
  ]);
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->batch->send([
    [
      'from' => 'Acme <onboarding@resend.dev>',
      'to' => ['foo@gmail.com'],
      'subject' => 'hello world',
      'html' => '<h1>it works!</h1>',
    ],
    [
      'from' => 'Acme <onboarding@resend.dev>',
      'to' => ['bar@outlook.com'],
      'subject' => 'world hello',
      'html' => '<p>it works!</p>',
    ]
  ]);
  ```

  ```py Python theme={null}
  import resend
  from typing import List

  resend.api_key = "re_xxxxxxxxx"

  params: List[resend.Emails.SendParams] = [
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["foo@gmail.com"],
      "subject": "hello world",
      "html": "<h1>it works!</h1>",
    },
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["bar@outlook.com"],
      "subject": "world hello",
      "html": "<p>it works!</p>",
    }
  ]

  resend.Batch.send(params)
  ```

  ```rb Ruby theme={null}
  require "resend"

  Resend.api_key = 're_xxxxxxxxx'

  params = [
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["foo@gmail.com"],
      "subject": "hello world",
      "html": "<h1>it works!</h1>",
    },
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["bar@outlook.com"],
      "subject": "world hello",
      "html": "<p>it works!</p>",
    }
  ]

  Resend::Batch.send(params)
  ```

  ```go Go theme={null}
  package examples

  import (
  	"fmt"
  	"os"

  	"github.com/resend/resend-go/v2"
  )

  func main() {

    ctx := context.TODO()

    client := resend.NewClient("re_xxxxxxxxx")

    var batchEmails = []*resend.SendEmailRequest{
      {
        From:    "Acme <onboarding@resend.dev>",
        To:      []string{"foo@gmail.com"},
        Subject: "hello world",
        Html:    "<h1>it works!</h1>",
      },
      {
        From:    "Acme <onboarding@resend.dev>",
        To:      []string{"bar@outlook.com"},
        Subject: "world hello",
        Html:    "<p>it works!</p>",
      },
    }

    sent, err := client.Batch.SendWithContext(ctx, batchEmails)

    if err != nil {
      panic(err)
    }
    fmt.Println(sent.Data)
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::types::CreateEmailBaseOptions;
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let emails = vec![
      CreateEmailBaseOptions::new(
        "Acme <onboarding@resend.dev>",
        vec!["foo@gmail.com"],
        "hello world",
      )
      .with_html("<h1>it works!</h1>"),
      CreateEmailBaseOptions::new(
        "Acme <onboarding@resend.dev>",
        vec!["bar@outlook.com"],
        "world hello",
      )
      .with_html("<p>it works!</p>"),
    ];

    let _emails = resend.batch.send(emails).await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          CreateEmailOptions firstEmail = CreateEmailOptions.builder()
              .from("Acme <onboarding@resend.dev>")
              .to("foo@gmail.com")
              .subject("hello world")
              .html("<h1>it works!</h1>")
              .build();

          CreateEmailOptions secondEmail = CreateEmailOptions.builder()
              .from("Acme <onboarding@resend.dev>")
              .to("bar@outlook.com")
              .subject("world hello")
              .html("<p>it works!</p>")
              .build();

          CreateBatchEmailsResponse data = resend.batch().send(
              Arrays.asList(firstEmail, secondEmail)
          );
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var mail1 = new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "foo@gmail.com",
      Subject = "hello world",
      HtmlBody = "<p>it works!</p>",
  };

  var mail2 = new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "bar@outlook.com",
      Subject = "hello world",
      HtmlBody = "<p>it works!</p>",
  };

  var resp = await resend.EmailBatchAsync( [ mail1, mail2 ] );
  Console.WriteLine( "Nr Emails={0}", resp.Content.Count );
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/emails/batch' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'[
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["foo@gmail.com"],
      "subject": "hello world",
      "html": "<h1>it works!</h1>"
    },
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["bar@outlook.com"],
      "subject": "world hello",
      "html": "<p>it works!</p>"
    }
  ]'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "data": [
      {
        "id": "ae2014de-c168-4c61-8267-70d2662a1ce1"
      },
      {
        "id": "faccb7a5-8a28-4e9a-ac64-8da1cc3bc1cb"
      }
    ],
    // the `errors` array is only present in permissive batch validation mode
    "errors": [
      {
        "index": 2, // 0-indexed (first item is index 0)
        "message": "The `to` field is missing."
      }
    ]
  }
  ```
</ResponseExample>


# Send Email
Source: https://resend.com/docs/api-reference/emails/send-email

POST /emails
Start sending emails through the Resend Email API.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Body Parameters

<ParamField body="from" type="string" required>
  Sender email address.

  To include a friendly name, use the format `"Your Name <sender@domain.com>"`.
</ParamField>

<ParamField body="to" type="string | string[]" required>
  Recipient email address. For multiple addresses, send as an array of strings.
  Max 50.
</ParamField>

<ParamField body="subject" type="string" required>
  Email subject.
</ParamField>

<ParamField body="bcc" type="string | string[]">
  Bcc recipient email address. For multiple addresses, send as an array of
  strings.
</ParamField>

<ParamField body="cc" type="string | string[]">
  Cc recipient email address. For multiple addresses, send as an array of
  strings.
</ParamField>

<ResendParamField body="scheduled_at" type="string">
  Schedule email to be sent later. The date should be in natural language (e.g.: `in 1 min`) or ISO 8601 format (e.g:
  `2024-08-05T11:52:01.858Z`).

  [See examples](/dashboard/emails/schedule-email)
</ResendParamField>

<ResendParamField body="reply_to" type="string | string[]">
  Reply-to email address. For multiple addresses, send as an array of strings.
</ResendParamField>

<ParamField body="html" type="string">
  The HTML version of the message.
</ParamField>

<ParamField body="text" type="string">
  The plain text version of the message.

  <Info>
    If not provided, the HTML will be used to generate a plain text version. You
    can opt out of this behavior by setting value to an empty string.
  </Info>
</ParamField>

<ParamField body="react" type="React.ReactNode">
  The React component used to write the message. *Only available in the Node.js
  SDK.*
</ParamField>

<ParamField body="headers" type="object">
  Custom headers to add to the email.
</ParamField>

<ParamField body="attachments" type="array">
  Filename and content of attachments (max 40MB per email, after Base64 encoding of the attachments).

  [See examples](/dashboard/emails/attachments)

  <Expandable defaultOpen="true" title="properties">
    <ParamField body="content" type="buffer | string">
      Content of an attached file, passed as a buffer or Base64 string.
    </ParamField>

    <ParamField body="filename" type="string">
      Name of attached file.
    </ParamField>

    <ParamField body="path" type="string">
      Path where the attachment file is hosted
    </ParamField>

    <ResendParamField body="content_type" type="string">
      Content type for the attachment, if not set will be derived from the filename property
    </ResendParamField>

    <ResendParamField body="content_id" type="string">
      You can embed images using the `content_id` parameter for the attachment. To show the image, you need to include the ID in the `src` attribute of the `img` tag (e.g., `<img src="cid:...">`) of your HTML. [Learn about inline images](/dashboard/emails/embed-inline-images).
    </ResendParamField>
  </Expandable>
</ParamField>

<ParamField body="tags" type="array">
  Custom data passed in key/value pairs.

  [See examples](/dashboard/emails/tags).

  <Expandable defaultOpen="true" title="properties">
    <ParamField body="name" type="string" required>
      The name of the email tag.

      It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (\_), or dashes (-).

      It can contain no more than 256 characters.
    </ParamField>

    <ParamField body="value" type="string" required>
      The value of the email tag.

      It can only contain ASCII letters (a–z, A–Z), numbers (0–9), underscores (\_), or dashes (-).

      It can contain no more than 256 characters.
    </ParamField>
  </Expandable>
</ParamField>

<ParamField body="template" type="object">
  <Warning>
    Templates are currently in private beta and only available to a limited
    number of users. APIs might change before GA.

    <span />

    To use the methods on this page, you must upgrade your Resend SDK:

    <CodeGroup>
      ```bash Node.js theme={null}
      npm install resend@6.3.0-canary.4
      ```

      ```bash PHP theme={null}
      composer require resend/resend-php:dev-templates
      ```

      ```python Python theme={null}
      # Python SDK is not available yet
      ```

      ```ruby Ruby theme={null}
      # Ruby SDK is not available yet
      ```

      ```go Go theme={null}
      // Go SDK is not available yet
      ```

      ```bash Rust theme={null}
      cargo add resend-rs@0.19.0-beta
      ```

      ```java Java theme={null}
      // Java SDK is not available yet
      ```

      ```csharp .NET theme={null}
      // C# SDK is not available yet
      ```
    </CodeGroup>

    <span />

    [Get in touch](https://resend.com/contact) if you're interested in testing
    this feature.
  </Warning>

  To send using a template, provide a `template` object with:

  * `id`: id of the published template
  * `variables`: array of variable objects (if applicable)

  <Info>
    If a `template` is provided, you cannot send `html`, `text`, or `react` in the payload, otherwise the API will return a validation error.

    When sending a template, the payload for `from`, `subject`, and `reply_to` take precedence over the template's defaults for these fields. If the template does not provide a default value for these fields, you must provide them in the payload.
  </Info>
</ParamField>

<ParamField body="id" type="string" required>
  The id of the published email template. Required if `template` is provided. Only published templates can be used when sending emails.

  See the [errors reference](/api-reference/errors) for more details.
</ParamField>

<ParamField body="variables" type="object">
  Template variables object with key/value pairs.

  ```ts  theme={null}
  variables: {
  	CTA: 'Sign up now',
  	CTA_LINK: 'https://example.com/signup'
  }
  ```

  When sending the template, the HTML will be parsed. If all the variables used in the template were provided, the email will be sent. If not, the call will throw a validation error.

  See the [errors reference](/api-reference/errors) for more details.

  [See examples](/dashboard/templates/introduction).

  <Expandable defaultOpen="true" title="properties">
    <ParamField body="key" type="string" required>
      The key of the variable.

      May only contain ASCII letters (a–z, A–Z), numbers (0–9), and underscores (\_).

      It can contain no more than 50 characters.
    </ParamField>

    <ParamField body="value" value="string | number | boolean | object | list" required>
      The value of the variable.

      Observe these technical limitations:

      * `string`: maximum length of 50 characters
      * `number`: not greater than 2^53 - 1
      * `boolean`: `true` or `false`
      * `object`: maximum length of 50 keys
      * `list`: maximum length of 50 indexes
    </ParamField>
  </Expandable>
</ParamField>

## Headers

<ParamField header="Idempotency-Key" type="string">
  Add an idempotency key to prevent duplicated emails.

  * Should be **unique per API request**
  * Idempotency keys expire after **24 hours**
  * Have a maximum length of **256 characters**

  [Learn more](/dashboard/emails/idempotency-keys)
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'hello world',
    html: '<p>it works!</p>',
    replyTo: 'onboarding@resend.dev',
  });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->emails->send([
    'from' => 'Acme <onboarding@resend.dev>',
    'to' => ['delivered@resend.dev'],
    'subject' => 'hello world',
    'html' => '<p>it works!</p>',
    'reply_to': 'onboarding@resend.dev'
  ]);
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  params: resend.Emails.SendParams = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>",
    "reply_to": "onboarding@resend.dev"
  }

  email = resend.Emails.send(params)
  print(email)
  ```

  ```rb Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  params = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>",
    "reply_to": "onboarding@resend.dev"
  }

  sent = Resend::Emails.send(params)
  puts sent
  ```

  ```go Go theme={null}
  import (
  	"fmt"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
    ctx := context.TODO()
    client := resend.NewClient("re_xxxxxxxxx")

    params := &resend.SendEmailRequest{
        From:        "Acme <onboarding@resend.dev>",
        To:          []string{"delivered@resend.dev"},
        Subject:     "hello world",
        Html:        "<p>it works!</p>",
        ReplyTo:     "onboarding@resend.dev"
    }

    sent, err := client.Emails.SendWithContext(ctx, params)

    if err != nil {
      panic(err)
    }
    fmt.Println(sent.Id)
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::types::{CreateEmailBaseOptions};
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let from = "Acme <onboarding@resend.dev>";
    let to = ["delivered@resend.dev"];
    let subject = "hello world";
    let html = "<p>it works!</p>";
    let reply_to = "onboarding@resend.dev";

    let email = CreateEmailBaseOptions::new(from, to, subject)
      .with_html(html);

    let _email = resend.emails.send(email).await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          CreateEmailOptions params = CreateEmailOptions.builder()
                  .from("Acme <onboarding@resend.dev>")
                  .to("delivered@resend.dev")
                  .subject("hello world")
                  .html("<p>it works!</p>")
                  .replyTo("onboarding@resend.dev")
                  .build();

          CreateEmailResponse data = resend.emails().send(params);
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.EmailSendAsync( new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "delivered@resend.dev",
      Subject = "hello world",
      HtmlBody = "<p>it works!</p>",
      ReplyTo = "onboarding@resend.dev",
  } );
  Console.WriteLine( "Email Id={0}", resp.Content );
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/emails' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>",
    "reply_to": "onboarding@resend.dev"
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"
  }
  ```
</ResponseExample>


# Update Email
Source: https://resend.com/docs/api-reference/emails/update-email

PATCH /emails/:id
Update a scheduled email.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

## Path Parameters

<ParamField path="id" type="string" required>
  The Email ID.
</ParamField>

## Body Parameters

<ResendParamField body="scheduled_at" type="string">
  Schedule email to be sent later. The date should be in ISO 8601 format (e.g:
  2024-08-05T11:52:01.858Z).
</ResendParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const oneMinuteFromNow = new Date(Date.now() + 1000 * 60).toISOString();

  const { data, error } = await resend.emails.update({
    id: '49a3999c-0ce1-4ea6-ab68-afcd6dc2e794',
    scheduledAt: oneMinuteFromNow,
  });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $oneMinuteFromNow = (new DateTime())->modify('+1 minute')->format(DateTime::ISO8601);

  $resend->emails->update('49a3999c-0ce1-4ea6-ab68-afcd6dc2e794', [
    'scheduled_at' => $oneMinuteFromNow
  ]);
  ```

  ```python Python theme={null}
  import resend
  from datetime import datetime, timedelta

  resend.api_key = "re_xxxxxxxxx"

  one_minute_from_now = (datetime.now() + timedelta(minutes=1)).isoformat()

  update_params: resend.Emails.UpdateParams = {
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",
    "scheduled_at": one_minute_from_now
  }

  resend.Emails.update(params=update_params)
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  one_minute_from_now = (Time.now + 1 * 60).strftime("%Y-%m-%dT%H:%M:%S.%L%z")

  update_params = {
    "email_id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",
    "scheduled_at": one_minute_from_now
  }

  Resend::Emails.update(update_params)
  ```

  ```go Go theme={null}
  import "github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  oneMinuteFromNow := time.Now().Add(time.Minute * time.Duration(1))
  oneMinuteFromNowISO := oneMinuteFromNow.Format("2006-01-02T15:04:05-0700")

  updateParams := &resend.UpdateEmailRequest{
    Id:          "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",
    ScheduledAt: oneMinuteFromNowISO
  }

  updatedEmail, err := client.Emails.Update(updateParams)

  if err != nil {
    panic(err)
  }
  fmt.Printf("%v\n", updatedEmail)
  ```

  ```rust Rust theme={null}
  use chrono::{Local, TimeDelta};
  use resend_rs::types::UpdateEmailOptions;
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let one_minute_from_now = Local::now()
      .checked_add_signed(TimeDelta::minutes(1))
      .unwrap()
      .to_rfc3339();

    let update = UpdateEmailOptions::new()
      .with_scheduled_at(&one_minute_from_now);

    let _email = resend
      .emails
      .update("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794", update)
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          String oneMinuteFromNow = Instant
            .now()
            .plus(1, ChronoUnit.MINUTES)
            .toString();

          UpdateEmailOptions updateParams = UpdateEmailOptions.builder()
                  .scheduledAt(oneMinuteFromNow)
                  .build();

          UpdateEmailResponse data = resend.emails().update("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794", updateParams);
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  await resend.EmailRescheduleAsync(
      new Guid( "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794" ),
      DateTime.UtcNow.AddMinutes( 1 ) );
  ```

  ```bash cURL theme={null}
  curl -X PATCH 'https://api.resend.com/emails/49a3999c-0ce1-4ea6-ab68-afcd6dc2e794' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "scheduled_at": "2024-08-05T11:52:01.858Z"
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "email",
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794"
  }
  ```
</ResponseExample>


# Errors
Source: https://resend.com/docs/api-reference/errors

Troubleshoot problems with this comprehensive breakdown of all error codes.

## Error schema

We use standard HTTP response codes for success and failure notifications, and our errors are further classified by type.

### `invalid_idempotency_key`

* **Status:** 400
* **Message:** The key must be between 1-256 chars.
* **Suggested action:** Retry with a valid idempotency key.

### `validation_error`

* **Status:** 400
* **Message:** We found an error with one or more fields in the request.
* **Suggested action:** The message will contain more details about what field and error were found.

### `missing_api_key`

* **Status:** 401
* **Message:** Missing API key in the authorization header.
* **Suggested action:** Include the following header in the request: `Authorization: Bearer YOUR_API_KEY`.

### `restricted_api_key`

* **Status:** 401
* **Message:** This API key is restricted to only send emails.
* **Suggested action:** Make sure the API key has `Full access` to perform actions other than sending emails.

### `invalid_api_key`

* **Status:** 403
* **Message:** API key is invalid.
* **Suggested action:** Make sure the API key is correct or generate a new [API key in the dashboard](https://resend.com/api-keys).

### `validation_error`

* **Status:** 403
* **Message:** You can only send testing emails to your own email address (`youremail@domain.com`).
* **Suggested action:** In [Resend's Domain page](https://resend.com/domains), add and verify a domain for which you have DNS access. This allows you to send emails to addresses beyond your own.

### `not_found`

* **Status:** 404
* **Message:** The requested endpoint does not exist.
* **Suggested action:** Change your request URL to match a valid API endpoint.

### `method_not_allowed`

* **Status:** 405
* **Message:** Method is not allowed for the requested path.
* **Suggested action:** Change your API endpoint to use a valid method.

### `invalid_idempotent_request`

* **Status:** 409
* **Message:** Same idempotency key used with a different request payload.
* **Suggested action:** Change your idempotency key or payload.

### `concurrent_idempotent_requests`

* **Status:** 409
* **Message:** Same idempotency key used while original request is still in progress.
* **Suggested action:** Try the request again later.

### `invalid_attachment`

* **Status:** 422
* **Message:** Attachment must have either a `content` or `path`.
* **Suggested action:** Attachments must either have a `content` (strings, Buffer, or Stream contents) or `path` to a remote resource (better for larger attachments).

### `invalid_from_address`

* **Status:** 422
* **Message:** Invalid `from` field.
* **Suggested action:** Make sure the `from` field is a valid. The email address needs to follow the `email@example.com` or `Name <email@example.com>` format.

### `invalid_access`

* **Status:** 422
* **Message:** Access must be "full\_access" | "sending\_access".
* **Suggested action:** Make sure the API key has necessary permissions.

### `invalid_parameter`

* **Status:** 422
* **Message:** The `parameter` must be a valid UUID.
* **Suggested action:** Check the value and make sure it's valid.

### `invalid_region`

* **Status:** 422
* **Message:** Region must be "us-east-1" | "eu-west-1" | "sa-east-1".
* **Suggested action:** Make sure the correct region is selected.

### `missing_required_field`

* **Status:** 422
* **Message:** The request body is missing one or more required fields.
* **Suggested action:** Check the error message to see the list of missing fields.

### `monthly_quota_exceeded`

* **Status:** 429
* **Message:** You have reached your monthly email sending quota.
* **Suggested action:** [Upgrade your plan](https://resend.com/settings/billing) to remove the increase the monthly sending limit.

### `daily_quota_exceeded`

* **Status:** 429
* **Message:** You have reached your daily email sending quota.
* **Suggested action:** [Upgrade your plan](https://resend.com/settings/billing) to remove the daily quota limit or wait until 24 hours have passed to continue sending.

### `rate_limit_exceeded`

* **Status:** 429
* **Message:** Too many requests. Please limit the number of requests per second. Or [contact support](https://resend.com/contact) to increase rate limit.
* **Suggested action:** You should read the [response headers](./introduction#rate-limit) and reduce the rate at which you request the API. This can be done by introducing a queue mechanism or reducing the number of concurrent requests per second. If you have specific requirements, [contact support](https://resend.com/contact) to request a rate increase.

### `security_error`

* **Status:** 451
* **Message:** We may have found a security issue with the request.
* **Suggested action:** The message will contain more details. [Contact support](https://resend.com/contact) for more information.

### `application_error`

* **Status:** 500
* **Message:** An unexpected error occurred.
* **Suggested action:** Try the request again later. If the error does not resolve, check our [status page](https://resend-status.com) for service updates.

### `internal_server_error`

* **Status:** 500
* **Message:** An unexpected error occurred.
* **Suggested action:** Try the request again later. If the error does not resolve, check our [status page](https://resend-status.com) for service updates.


# Introduction
Source: https://resend.com/docs/api-reference/introduction

Understand general concepts, response codes, and authentication strategies.

## Base URL

The Resend API is built on **REST** principles. We enforce **HTTPS** in every request to improve data security, integrity, and privacy. The API does not support **HTTP**.

All requests contain the following base URL:

```
https://api.resend.com
```

## Authentication

To authenticate you need to add an *Authorization* header with the contents of the header being `Bearer re_xxxxxxxxx` where `re_xxxxxxxxx` is your [API Key](https://resend.com/api-keys).

```
Authorization: Bearer re_xxxxxxxxx
```

## Response codes

Resend uses standard HTTP codes to indicate the success or failure of your requests.

In general, `2xx` HTTP codes correspond to success, `4xx` codes are for user-related failures, and `5xx` codes are for infrastructure issues.

| Status | Description                             |
| ------ | --------------------------------------- |
| `200`  | Successful request.                     |
| `400`  | Check that the parameters were correct. |
| `401`  | The API key used was missing.           |
| `403`  | The API key used was invalid.           |
| `404`  | The resource was not found.             |
| `429`  | The rate limit was exceeded.            |
| `5xx`  | Indicates an error with Resend servers. |

<Info>
  Check [Error Codes](/api-reference/errors) for a comprehensive breakdown of
  all possible API errors.
</Info>

## Rate limit

The default maximum rate limit is **2 requests per second**. This number can be increased for trusted senders by request. After that, you'll hit the rate limit and receive a `429` response error code.

Learn more about our [rate limits](/api-reference/rate-limit).

## FAQ

<AccordionGroup>
  <Accordion title="How does pagination work with the API?">
    Some endpoints support cursor-based pagination to help you browse through
    large datasets efficiently. Check our [pagination
    guide](/api-reference/pagination) for detailed information on how to use
    pagination parameters.
  </Accordion>

  <Accordion title="How do you handle API versioning?">
    Currently, there's no versioning system in place. We plan to add versioning
    via calendar-based headers in the future.
  </Accordion>
</AccordionGroup>


# Pagination
Source: https://resend.com/docs/api-reference/pagination

Learn how pagination works in the Resend API.

## Overview

Several Resend API endpoints support **cursor-based pagination** to help you efficiently browse through large datasets. You can safely navigate lists with guaranteed stability, even if new objects are created or deleted while you're still requesting pages.

Paginated endpoints responses include:

* `object`: always set to `list`.
* `has_more`: indicates whether there are more elements available.
* `data`: the list of returned items.

You can navigate through the results using the following parameters:

* `limit`: the number of items to return per page.
* `after`: the cursor to use to get the next page of results.
* `before`: the cursor to use to get the previous page of results.

Use the `id` of objects as the cursor for pagination. The cursor itself is *excluded* from the results. For an example, see [pagination strategies below](#strategies).

## Currently-supported endpoints

Existing list endpoints can optionally return paginated results:

* [List Domains](/api-reference/domains/list-domains)
* [List API Keys](/api-reference/api-keys/list-api-keys)
* [List Broadcasts](/api-reference/broadcasts/list-broadcasts)
* [List Audiences](/api-reference/audiences/list-audiences)
* [List Contacts](/api-reference/contacts/list-contacts)
* [List Inbound Emails](/api-reference/emails/list-inbound-emails)
* [List Inbound Email Attachments](/api-reference/attachments/list-inbound-email-attachments)

<Info>
  Note that for these endpoints, the `limit` parameter is optional. If you do
  not provide a `limit`, all items will be returned in a single response.
</Info>

Newer list endpoints always return paginated results:

* [List Emails](/api-reference/emails/receiving/list-emails)
* [List Templates](/api-reference/templates/list-templates)
* [List Topics](/api-reference/topics/list-topics)

## Parameters

All paginated endpoints support the following query parameters:

<ParamField query="limit" type="number">
  The number of items to return per page. Default is `20`, maximum is `100`, and
  minimum is `1`.
</ParamField>

<ParamField query="after" type="string">
  The cursor after which to start retrieving items. To get the next page, use
  the ID of the last item from the current page. This will return the page that
  **starts after** the object with this ID (excluding the passed ID itself).
</ParamField>

<ParamField query="before" type="string">
  The cursor before which to start retrieving items. To get the previous page,
  use the ID of the first item from the current page. This will return the page
  that **ends before** the object with this ID (excluding the passed ID itself).
</ParamField>

<Warning>
  You can only use either `after` or `before`, not both simultaneously.
</Warning>

## Response Format

Paginated endpoints return responses in the following format:

```json Response Format theme={null}
{
  "object": "list",
  "has_more": true,
  "data": [
    /* Array of resources */
  ]
}
```

<ResponseField name="object" type="string">
  Always set to `list` for paginated responses.
</ResponseField>

<ResponseField name="has_more" type="boolean">
  Indicates whether there are more items available beyond the current page.
</ResponseField>

<ResponseField name="data" type="array">
  An array containing the actual resources for the current page.
</ResponseField>

## Strategies

### Forward Pagination

To paginate forward through results (newer to older items), use the `after` parameter with the ID of the **last item** from the current page:

<CodeGroup>
  ```ts Node.js theme={null}
  const resend = new Resend('re_xxxxxxxxx');

  // First page
  const { data: firstPage } = await resend.contacts.list({ limit: 50 });

  // Second page (if has_more is true)
  if (firstPage.has_more) {
    const lastId = firstPage.data[firstPage.data.length - 1].id;
    const { data: secondPage } = await resend.contacts.list({
      limit: 50,
      after: lastId,
    });
  }
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  // First page
  $firstPage = $resend->contacts->list(['limit' => 50]);

  // Second page (if has_more is true)
  if ($firstPage['has_more']) {
      $lastId = end($firstPage['data'])['id'];
      $secondPage = $resend->contacts->list([
          'limit' => 50,
          'after' => $lastId
      ]);
  }
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  # First page
  first_page = resend.Contacts.list(limit=50)

  # Second page (if has_more is true)
  if first_page['has_more']:
      last_id = first_page['data'][-1]['id']
      second_page = resend.Contacts.list(limit=50, after=last_id)
  ```

  ```ruby Ruby theme={null}
  Resend.api_key = "re_xxxxxxxxx"

  # First page
  first_page = Resend::Contacts.list(limit: 50)

  # Second page (if has_more is true)
  if first_page['has_more']
    last_id = first_page['data'].last['id']
    second_page = Resend::Contacts.list(limit: 50, after: last_id)
  end
  ```

  ```go Go theme={null}
  import "github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  // First page
  firstPage, err := client.Contacts.List(&resend.ListContactsRequest{
      Limit: 50,
  })

  // Second page (if has_more is true)
  if firstPage.HasMore {
      lastId := firstPage.Data[len(firstPage.Data)-1].ID
      secondPage, err := client.Contacts.List(&resend.ListContactsRequest{
          Limit: 50,
          After: lastId,
      })
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result, types::ListContactOptions};

  #[tokio::main]
  async fn main() -> Result<()> {
      let resend = Resend::new("re_xxxxxxxxx");

      // First page
      let list_opts = ListContactOptions::default().with_limit(50);
      let first_page = resend.emails.list(list_opts).await?;

      // Second page (if has_more is true)
      if first_page.has_more {
          let last_id = &first_page.data.last().unwrap().id;
          let list_opts = ListContactOptions::default()
              .with_limit(10)
              .list_after(last_id);
          let second_page = resend.contacts.list(list_opts).await?;
      }

      Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          // First page
          ListEmailsResponse firstPage = resend.emails().list(10);

          // Second page (if has_more is true)
          if (firstPage.getHasMore()) {
              String lastId = firstPage.getData().get(firstPage.getData().size() - 1).getId();
              ListContactsResponse secondPage = resend.contacts().list(50, lastId, null);
          }
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create("re_xxxxxxxxx");

  // First page
  var firstPage = await resend.ContactListAsync(limit: 50);

  // Second page (if has_more is true)
  if (firstPage.Content.HasMore)
  {
      var lastId = firstPage.Content.Data.Last().Id;
      var secondPage = await resend.ContactListAsync(limit: 50, after: lastId);
  }
  ```

  ```bash cURL theme={null}
  # First page
  curl -X GET 'https://api.resend.com/contacts?limit=50' \
       -H 'Authorization: Bearer re_xxxxxxxxx'

  # Second page
  curl -X GET 'https://api.resend.com/contacts?limit=50&after=LAST_ID_FROM_PREVIOUS_PAGE' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</CodeGroup>

### Backward Pagination

To paginate backward through results (older to newer items), use the `before` parameter with the ID of the **first item** from the current page (or the most recent ID you have in your system):

<CodeGroup>
  ```ts Node.js theme={null}
  const resend = new Resend('re_xxxxxxxxx');

  // Start from a specific point and go backward
  const page = await resend.contacts.list({
    limit: 50,
    before: 'some-contact-id',
  });

  if (page.data.has_more) {
    const firstId = page.data.data[0].id;
    const previousPage = await resend.contacts.list({
      limit: 50,
      before: firstId,
    });
  }
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  // Start from a specific point and go backward
  $page = $resend->contacts->list([
      'limit' => 50,
      'before' => 'some-contact-id'
  ]);

  if ($page['has_more']) {
      $firstId = $page['data'][0]['id'];
      $previousPage = $resend->contacts->list([
          'limit' => 50,
          'before' => $firstId
      ]);
  }
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  # Start from a specific point and go backward
  page = resend.Contacts.list(limit=50, before="some-contact-id")

  if page["has_more"]:
      first_id = page["data"][0]["id"]
      previous_page = resend.Contacts.list(limit=50, before=first_id)
  ```

  ```ruby Ruby theme={null}
  Resend.api_key = "re_xxxxxxxxx"

  # Start from a specific point and go backward
  page = Resend::Contacts.list(limit: 50, before: 'some-contact-id')

  if page['has_more']
    first_id = page['data'].first['id']
    previous_page = Resend::Contacts.list(limit: 50, before: first_id)
  end
  ```

  ```go Go theme={null}
  import "github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  // Start from a specific point and go backward
  page, err := client.Contacts.List(&resend.ListContactsRequest{
      Limit:  resend.Int(50),
      Before: resend.String("some-contact-id"),
  })

  if page.HasMore {
      firstId := page.Data[0].ID
      previousPage, err := client.Contacts.List(&resend.ListContactsRequest{
          Limit:  resend.Int(50),
          Before: resend.String(firstId),
      })
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result, types::ListContactOptions};

  #[tokio::main]
  async fn main() -> Result<()> {
      let resend = Resend::new("re_xxxxxxxxx");

      // Start from a specific point and go backward
      let list_opts = ListContactOptions::default()
          .with_limit(50)
          .list_before("some-email-id");
      let page = resend.contacts.list(list_opts).await?;

      if page.has_more {
          let first_id = &page.data.first().unwrap().id;
          let list_opts = ListContactOptions::default()
              .with_limit(10)
              .list_before(first_id);
          let previous_page = resend.contacts.list(list_opts).await?;
      }

      Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          // Start from a specific point and go backward
          ListContactsResponse page = resend.contacts().list(50, null, "some-contact-id");

          if (page.getHasMore()) {
              String firstId = page.getData().get(0).getId();
              ListContactsResponse previousPage = resend.contacts().list(50, null, firstId);
          }
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create("re_xxxxxxxxx");

  // Start from a specific point and go backward
  var page = await resend.ContactListAsync(limit: 50, before: "some-contact-id");

  if (page.Content.HasMore)
  {
      var firstId = page.Content.Data.First().Id;
      var previousPage = await resend.ContactListAsync(limit: 50, before: firstId);
  }
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/contacts?limit=50&before=some-contact-id' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</CodeGroup>

## Best Practices

<AccordionGroup>
  <Accordion title="Use appropriate page sizes">
    Choose a `limit` that balances performance and usability. Smaller pages are good for real-time applications, while larger pages
    (hundreds of items) work better for bulk processing.
  </Accordion>

  <Accordion title="Handle pagination gracefully">
    Always check the `has_more` field before attempting to fetch additional pages.
    This prevents unnecessary API calls when you've reached the end of the
    dataset.
  </Accordion>

  <Accordion title="Consider rate limits">
    Be mindful of API rate limits when paginating through large datasets.
    Implement appropriate delays or batching strategies if processing many
    pages.
  </Accordion>
</AccordionGroup>

## Error Handling

Pagination requests may return the following validation errors:

| Error              | Description                                         |
| ------------------ | --------------------------------------------------- |
| `validation_error` | Invalid cursor format or limit out of range (1-100) |
| `validation_error` | Both `before` and `after` parameters provided       |

Example error response:

```json Error Response theme={null}
{
  "name": "validation_error",
  "statusCode": 422,
  "message": "The pagination limit must be a number between 1 and 100. See https://resend.com/docs/pagination for more information."
}
```


# Rate Limit
Source: https://resend.com/docs/api-reference/rate-limit

Understand rate limits and how to increase them.

The response headers describe your current rate limit following every request in conformance with the [sixth IETF standard draft](https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-ratelimit-headers-06):

| Header name           | Description                                                         |
| --------------------- | ------------------------------------------------------------------- |
| `ratelimit-limit`     | Maximum number of requests allowed within a window.                 |
| `ratelimit-remaining` | How many requests you have left within the current window.          |
| `ratelimit-reset`     | How many seconds until the limits are reset.                        |
| `retry-after`         | How many seconds you should wait before making a follow-up request. |

The default maximum rate limit is **2 requests per second**. This number can be increased for trusted senders upon request.

After that, you'll hit the rate limit and receive a `429` response error code. You can find all 429 responses by filtering for 429 at the [Resend Logs page](https://resend.com/logs?status=429).

To prevent this, we recommend reducing the rate at which you request the API. This can be done by introducing a queue mechanism or reducing the number of concurrent requests per second. If you have specific requirements, [contact support](https://resend.com/contact) to request a rate increase.


# Create Template
Source: https://resend.com/docs/api-reference/templates/create-template

POST /templates
Create a new template with optional variables.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

<Warning>
  Templates are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-templates
    ```

    ```python Python theme={null}
    # Python SDK is not available yet
    ```

    ```ruby Ruby theme={null}
    # Ruby SDK is not available yet
    ```

    ```go Go theme={null}
    // Go SDK is not available yet
    ```

    ```bash Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

## Body Parameters

<ParamField body="name" type="string" required>
  The name of the template.
</ParamField>

<ParamField body="alias" type="string">
  The alias of the template.
</ParamField>

<ParamField body="from" type="string">
  Sender email address.

  To include a friendly name, use the format `"Your Name <sender@domain.com>"`.

  If provided, this value can be overridden when sending an email using the template.
</ParamField>

<ParamField body="subject" type="string">
  Email subject.

  If provided, this value can be overridden when sending an email using the template.
</ParamField>

<ResendParamField body="reply_to" type="string | string[]">
  Reply-to email address. For multiple addresses, send as an array of strings.

  If provided, this value can be overridden when sending an email using the template.
</ResendParamField>

<ParamField body="html" type="string" required>
  The HTML version of the template.
</ParamField>

<ParamField body="text" type="string">
  The plain text version of the message.

  <Info>
    If not provided, the HTML will be used to generate a plain text version. You can opt out of this behavior by setting value to an empty string.
  </Info>
</ParamField>

<ParamField body="react" type="React.ReactNode">
  The React component used to write the template. *Only available in the Node.js
  SDK.*
</ParamField>

<ParamField body="variables" type="array">
  The array of variables used in the template. Each template may contain up to 20 variables.

  Each variable is an object with the following properties:

  <Expandable defaultOpen="true" title="properties">
    <ParamField body="key" type="string" required>
      The key of the variable. We recommend capitalizing the key (e.g. `FIRST_NAME`).
    </ParamField>

    <ParamField body="type" type="'string' | 'number' | 'boolean' | 'object' | 'list'" required>
      The type of the variable.

      Can be `'string'`, `'number'`, `'boolean'`, `'object'`, or `'list'`.
    </ParamField>

    <ResendParamField body="fallback_value">
      The fallback value of the variable. The value must match the type of the variable.

      If no fallback value is provided, you must provide a value for the variable when sending an email using the template.

      If `object` type is provided, you must include a fallback.
    </ResendParamField>
  </Expandable>

  <Info>
    Before you can use a template, you must publish it first. To publish a
    template, use the [Templates dashboard](https://resend.com/templates) or
    [publish template API](/api-reference/templates/publish-template).
  </Info>
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  await resend.templates.create({
    name: 'welcome-email',
    html: '<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>',
    variables: [
      {
        key: 'NAME',
        type: 'string',
        fallbackValue: 'user',
      },
      {
        key: 'AGE',
        type: 'number',
        fallbackValue: 25,
      },
      {
        key: 'OPTIONAL_VARIABLE',
        type: 'string',
        fallbackValue: undefined,
      },
    ],
  });

  // Or create and publish a template in one step
  await resend.templates.create({ ... }).publish();
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->templates->create([
    'name' => 'welcome-email',
    'html' => '<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>',
    'variables' => [
      [
        'key' => 'NAME',
        'type' => 'string',
        'fallback_value' => 'user',
      ],
      [
        'key' => 'AGE',
        'type' => 'number',
        'fallback_value' => 25,
      ],
      [
        'key' => 'OPTIONAL_VARIABLE',
        'type' => 'string',
      ],
    ],
  ]);
  ```

  ```py Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Templates.create({
      "name": "welcome-email",
      "html": "<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>",
      "variables": [
          {
              "key": "NAME",
              "type": "string",
              "fallback_value": "user",
          },
          {
              "key": "AGE",
              "type": "number",
              "fallback_value": 25,
          },
          {
              "key": "OPTIONAL_VARIABLE",
              "type": "string",
          },
      ],
  })
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Templates.create(
    name: "welcome-email",
    html: "<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>",
    variables: [
      {
        key: "NAME",
        type: "string",
        fallback_value: "user"
      },
      {
        key: "AGE",
        type: "number",
        fallback_value: 25
      },
      {
        key: "OPTIONAL_VARIABLE",
        type: "string"
      }
    ]
  )
  ```

  ```go Go theme={null}
  import (
  	"context"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
  	client := resend.NewClient("re_xxxxxxxxx")

  	template, err := client.Templates.CreateWithContext(context.TODO(), &resend.CreateTemplateRequest{
  		Name: "welcome-email",
  		Html: "<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>",
  		Variables: []*resend.TemplateVariable{
  			{
  				Key:           "NAME",
  				Type:          resend.VariableTypeString,
  				FallbackValue: "user",
  			},
  			{
  				Key:           "AGE",
  				Type:          resend.VariableTypeNumber,
  				FallbackValue: 25,
  			},
  			{
  				Key:  "OPTIONAL_VARIABLE",
  				Type: resend.VariableTypeString,
  			},
  		},
  	})
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{
    types::{CreateTemplateOptions, Variable, VariableType},
    Resend, Result,
  };

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let name = "welcome-email";
    let html = "<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>";

    let variables = [
      Variable::new("NAME", VariableType::String).with_fallback("user".into()),
      Variable::new("AGE", VariableType::Number).with_fallback(25.into()),
      Variable::new("OPTIONAL_VARIABLE", VariableType::String).with_fallback(None::<String>.into()),
    ];

    let opts = CreateTemplateOptions::new(name, html).with_variables(&variables);
    let template = resend.templates.create(opts).await?;

    let _published = resend.templates.publish(template.id).await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet.
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet.
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/templates' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "name": "welcome-email",
    "html": "<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>",
    "variables": [
      {
        "key": "NAME",
        "type": "string",
        "fallback_value": "user"
      },
      {
        "key": "AGE",
        "type": "number",
        "fallback_value": 25
      },
      {
        "key": "OPTIONAL_VARIABLE",
        "type": "string"
      }
    ]
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",
    "object": "template"
  }
  ```
</ResponseExample>


# Delete Template
Source: https://resend.com/docs/api-reference/templates/delete-template

DELETE /templates/:id
Delete a template.

<Warning>
  Templates are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-templates
    ```

    ```python Python theme={null}
    # Python SDK is not available yet
    ```

    ```ruby Ruby theme={null}
    # Ruby SDK is not available yet
    ```

    ```go Go theme={null}
    // Go SDK is not available yet
    ```

    ```bash Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

## Path Parameters

<ParamField body="id | alias" type="string">
  The ID or alias of the template to delete.
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  await resend.templates.remove('34a080c9-b17d-4187-ad80-5af20266e535');
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->templates->remove('34a080c9-b17d-4187-ad80-5af20266e535');
  ```

  ```py Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Templates.remove("34a080c9-b17d-4187-ad80-5af20266e535")
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Templates.remove("34a080c9-b17d-4187-ad80-5af20266e535")
  ```

  ```go Go theme={null}
  import (
  	"context"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
  	client := resend.NewClient("re_xxxxxxxxx")

  	template, err := client.Templates.RemoveWithContext(
  		context.TODO(),
  		"34a080c9-b17d-4187-ad80-5af20266e535",
  	)
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _deleted = resend
      .templates
      .delete("34a080c9-b17d-4187-ad80-5af20266e535")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet.
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet.
  ```

  ```bash cURL theme={null}
  curl -X DELETE 'https://api.resend.com/templates/34a080c9-b17d-4187-ad80-5af20266e535' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "template",
    "id": "34a080c9-b17d-4187-ad80-5af20266e535",
    "deleted": true
  }
  ```
</ResponseExample>


# Duplicate Template
Source: https://resend.com/docs/api-reference/templates/duplicate-template

POST /templates/:id/duplicate
Duplicate a template.

<Warning>
  Templates are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-templates
    ```

    ```python Python theme={null}
    # Python SDK is not available yet
    ```

    ```ruby Ruby theme={null}
    # Ruby SDK is not available yet
    ```

    ```go Go theme={null}
    // Go SDK is not available yet
    ```

    ```bash Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

## Path Parameters

<ParamField body="id | alias" type="string">
  The ID or alias of the template to duplicate.
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  await resend.templates.duplicate('34a080c9-b17d-4187-ad80-5af20266e535');
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->templates->duplicate('34a080c9-b17d-4187-ad80-5af20266e535');
  ```

  ```py Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Templates.duplicate("34a080c9-b17d-4187-ad80-5af20266e535")
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Templates.duplicate("34a080c9-b17d-4187-ad80-5af20266e535")
  ```

  ```go Go theme={null}
  import (
  	"context"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
  	client := resend.NewClient("re_xxxxxxxxx")

  	template, err := client.Templates.DuplicateWithContext(
  		context.TODO(),
  		"34a080c9-b17d-4187-ad80-5af20266e535",
  	)
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _duplicated = resend
      .templates
      .duplicate("34a080c9-b17d-4187-ad80-5af20266e535")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet.
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet.
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/templates/34a080c9-b17d-4187-ad80-5af20266e535/duplicate' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "template",
    "id": "e169aa45-1ecf-4183-9955-b1499d5701d3"
  }
  ```
</ResponseExample>


# Get Template
Source: https://resend.com/docs/api-reference/templates/get-template

GET /templates/:id
Get a template by ID.

<Warning>
  Templates are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-templates
    ```

    ```python Python theme={null}
    # Python SDK is not available yet
    ```

    ```ruby Ruby theme={null}
    # Ruby SDK is not available yet
    ```

    ```go Go theme={null}
    // Go SDK is not available yet
    ```

    ```bash Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

## Path Parameters

<ParamField body="id | alias" type="string">
  The ID or alias of the template to get.
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  await resend.templates.get('34a080c9-b17d-4187-ad80-5af20266e535');
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->templates->get('34a080c9-b17d-4187-ad80-5af20266e535');
  ```

  ```py Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Templates.get("34a080c9-b17d-4187-ad80-5af20266e535")
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Templates.get("34a080c9-b17d-4187-ad80-5af20266e535")
  ```

  ```go Go theme={null}
  import (
  	"context"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
  	client := resend.NewClient("re_xxxxxxxxx")

  	template, err := client.Templates.GetWithContext(
  		context.TODO(),
  		"34a080c9-b17d-4187-ad80-5af20266e535",
  	)
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _template = resend
      .templates
      .get("34a080c9-b17d-4187-ad80-5af20266e535")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet.
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet.
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/templates/34a080c9-b17d-4187-ad80-5af20266e535' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "template",
    "id": "34a080c9-b17d-4187-ad80-5af20266e535",
    "current_version_id": "b2693018-7abb-4b4b-b4cb-aadf72dc06bd",
    "alias": "reset-password",
    "name": "reset-password",
    "created_at": "2023-10-06T23:47:56.678Z",
    "updated_at": "2023-10-06T23:47:56.678Z",
    "status": "published",
    "published_at": "2023-10-06T23:47:56.678Z",
    "from": "John Doe <john.doe@example.com>",
    "subject": "Hello, world!",
    "reply_to": null,
    "html": "<h1>Hello, world!</h1>",
    "text": "Hello, world!",
    "variables": [
      {
        "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",
        "key": "user_name",
        "type": "string",
        "fallback_value": "John Doe",
        "created_at": "2023-10-06T23:47:56.678Z",
        "updated_at": "2023-10-06T23:47:56.678Z"
      }
    ],
    "has_unpublished_versions": true
  }
  ```
</ResponseExample>


# List Templates
Source: https://resend.com/docs/api-reference/templates/list-templates

GET /templates
List all templates.

export const QueryParams = ({type, isRequired}) => {
  return <>
      <h2>Query Parameters</h2>

      {isRequired ? <ParamField query="limit" type="number">
          Number of {type} to retrieve.
          <ul>
            <li>
              Default value: <code>20</code>
            </li>
            <li>
              Maximum value: <code>100</code>
            </li>
            <li>
              Minimum value: <code>1</code>
            </li>
          </ul>
        </ParamField> : <>
          <p>
            Note that the <code>limit</code> parameter is <em>optional</em>. If
            you do not provide a <code>limit</code>, all {type} will be returned
            in a single response.
          </p>
          <ParamField query="limit" type="number">
            Number of {type} to retrieve.
            <ul>
              <li>
                Maximum value: <code>100</code>
              </li>
              <li>
                Minimum value: <code>1</code>
              </li>
            </ul>
          </ParamField>
        </>}

      <ParamField query="after" type="string">
        The ID <em>after</em> which we'll retrieve more {type} (for pagination).
        This ID will <em>not</em> be included in the returned list. Cannot be
        used with the
        <code>before</code> parameter.
      </ParamField>
      <ParamField query="before" type="string">
        The ID <em>before</em> which we'll retrieve more {type} (for
        pagination). This ID will <em>not</em> be included in the returned list.
        Cannot be used with the <code>after</code> parameter.
      </ParamField>
      <Info>
        You can only use either <code>after</code> or <code>before</code>{' '}
        parameter, not both. See our{' '}
        <a href="/api-reference/pagination">pagination guide</a> for more
        information.
      </Info>
    </>;
};

By default, the API will return the most recent 20 templates. You can optionally use the `limit` parameter to return a different number of templates or control the pagination of the results with the `after` or `before` parameters.

<Warning>
  Templates are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-templates
    ```

    ```python Python theme={null}
    # Python SDK is not available yet
    ```

    ```ruby Ruby theme={null}
    # Ruby SDK is not available yet
    ```

    ```go Go theme={null}
    // Go SDK is not available yet
    ```

    ```bash Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

<QueryParams type="templates" isRequired={true} />

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  await resend.templates.list({
    limit: 2,
    after: '34a080c9-b17d-4187-ad80-5af20266e535',
  });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->templates->list([
    'limit' => 2,
    'after' => '34a080c9-b17d-4187-ad80-5af20266e535'
  ]);
  ```

  ```py Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Templates.list({
      "limit": 2,
      "after": "34a080c9-b17d-4187-ad80-5af20266e535",
  })
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Templates.list(
    limit: 2,
    after: "34a080c9-b17d-4187-ad80-5af20266e535"
  )
  ```

  ```go Go theme={null}
  import (
  	"context"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
  	client := resend.NewClient("re_xxxxxxxxx")

  	templates, err := client.Templates.ListWithContext(context.TODO(), &resend.ListOptions{
  		Limit: 2,
  		After: "34a080c9-b17d-4187-ad80-5af20266e535",
  	})
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{list_opts::ListOptions, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let list_opts = ListOptions::default()
      .with_limit(2)
      .list_after("34a080c9-b17d-4187-ad80-5af20266e535");

    let _list = resend.templates.list(list_opts).await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet.
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet.
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/templates?limit=2&after=34a080c9-b17d-4187-ad80-5af20266e535' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "list",
    "data": [
      {
        "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",
        "name": "reset-password",
        "status": "draft",
        "published_at": null,
        "created_at": "2023-10-06T23:47:56.678Z",
        "updated_at": "2023-10-06T23:47:56.678Z",
        "alias": "reset-password"
      },
      {
        "id": "b7f9c2e1-1234-4abc-9def-567890abcdef",
        "name": "welcome-message",
        "status": "published",
        "published_at": "2023-10-06T23:47:56.678Z",
        "created_at": "2023-10-06T23:47:56.678Z",
        "updated_at": "2023-10-06T23:47:56.678Z",
        "alias": "welcome-message"
      }
    ],
    "has_more": false
  }
  ```
</ResponseExample>


# Publish Template
Source: https://resend.com/docs/api-reference/templates/publish-template

POST /templates/:id/publish
Publish a template.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

<Warning>
  Templates are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-templates
    ```

    ```python Python theme={null}
    # Python SDK is not available yet
    ```

    ```ruby Ruby theme={null}
    # Ruby SDK is not available yet
    ```

    ```go Go theme={null}
    // Go SDK is not available yet
    ```

    ```bash Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

## Path Parameters

<ParamField body="id | alias" type="string">
  The ID or alias of the template to duplicate.
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  await resend.templates.publish('34a080c9-b17d-4187-ad80-5af20266e535');
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->templates->publish('34a080c9-b17d-4187-ad80-5af20266e535');
  ```

  ```py Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Templates.publish("34a080c9-b17d-4187-ad80-5af20266e535")
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Templates.publish("34a080c9-b17d-4187-ad80-5af20266e535")
  ```

  ```go Go theme={null}
  import (
  	"context"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
  	client := resend.NewClient("re_xxxxxxxxx")

  	template, err := client.Templates.PublishWithContext(
  		context.TODO(),
  		"34a080c9-b17d-4187-ad80-5af20266e535",
  	)
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _published = resend
      .templates
      .publish("34a080c9-b17d-4187-ad80-5af20266e535")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet.
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet.
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/templates/34a080c9-b17d-4187-ad80-5af20266e535/publish' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "id": "34a080c9-b17d-4187-ad80-5af20266e535",
    "object": "template"
  }
  ```
</ResponseExample>


# Update Template
Source: https://resend.com/docs/api-reference/templates/update-template

PATCH /templates/:id
Update a template.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

<Warning>
  Templates are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-templates
    ```

    ```python Python theme={null}
    # Python SDK is not available yet
    ```

    ```ruby Ruby theme={null}
    # Ruby SDK is not available yet
    ```

    ```go Go theme={null}
    // Go SDK is not available yet
    ```

    ```bash Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

## Path Parameters

<ParamField body="id | alias" type="string">
  The ID or alias of the template to duplicate.
</ParamField>

## Body Parameters

<ParamField body="name" type="string" required>
  The name of the template.
</ParamField>

<ParamField body="alias" type="string">
  The alias of the template.
</ParamField>

<ParamField body="from" type="string">
  Sender email address.

  To include a friendly name, use the format `"Your Name <sender@domain.com>"`.

  If provided, this value can be overridden when sending an email using the template.
</ParamField>

<ParamField body="subject" type="string">
  Email subject.

  If provided, this value can be overridden when sending an email using the template.
</ParamField>

<ResendParamField body="reply_to" type="string | string[]">
  Reply-to email address. For multiple addresses, send as an array of strings.

  If provided, this value can be overridden when sending an email using the template.
</ResendParamField>

<ParamField body="html" type="string" required>
  The HTML version of the template.
</ParamField>

<ParamField body="text" type="string">
  The plain text version of the message.

  <Info>
    If not provided, the HTML will be used to generate a plain text version. You can opt out of this behavior by setting value to an empty string.
  </Info>
</ParamField>

<ParamField body="react" type="React.ReactNode">
  The React component used to write the template. *Only available in the Node.js
  SDK.*
</ParamField>

<ParamField body="variables" type="array">
  The array of variables used in the template. Each template may contain up to 20 variables.

  Each variable is an object with the following properties:

  <Expandable defaultOpen="true" title="properties">
    <ParamField body="key" type="string" required>
      The key of the variable. We recommend capitalizing the key (e.g. `FIRST_NAME`).
    </ParamField>

    <ParamField body="type" type="'string' | 'number' | 'boolean' | 'object' | 'list'" required>
      The type of the variable.

      Can be `'string'`, `'number'`, `'boolean'`, `'object'`, or `'list'`.
    </ParamField>

    <ResendParamField body="fallback_value">
      The fallback value of the variable. The value must match the type of the variable.

      If no fallback value is provided, you must provide a value for the variable when sending an email using the template.

      If `object` type is provided, you must include a fallback.
    </ResendParamField>
  </Expandable>

  <Info>
    Before you can use a template, you must publish it first. To publish a
    template, use the [Templates dashboard](https://resend.com/templates) or
    [publish template API](/api-reference/templates/publish-template).
  </Info>
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  await resend.templates.update('34a080c9-b17d-4187-ad80-5af20266e535', {
    name: 'welcome-email',
    html: '<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>',
    variables: [
      {
        key: 'NAME',
        type: 'string',
        fallbackValue: 'user',
      },
      {
        key: 'AGE',
        type: 'number',
        fallbackValue: 25,
      },
      {
        key: 'OPTIONAL_VARIABLE',
        type: 'string',
      },
    ],
  });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->templates->update('34a080c9-b17d-4187-ad80-5af20266e535', [
    'name' => 'welcome-email',
    'html' => '<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>',
    'variables' => [
      [
        'key' => 'NAME',
        'type' => 'string',
        'fallback_value' => 'user',
      ],
      [
        'key' => 'AGE',
        'type' => 'number',
        'fallback_value' => 25,
      ],
      [
        'key' => 'OPTIONAL_VARIABLE',
        'type' => 'string',
      ],
    ],
  ]);
  ```

  ```py Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Templates.update({
      "id": "34a080c9-b17d-4187-ad80-5af20266e535",
      "name": "welcome-email",
      "html": "<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>",
      "variables": [
          {
              "key": "NAME",
              "type": "string",
              "fallback_value": "user",
          },
          {
              "key": "AGE",
              "type": "number",
              "fallback_value": 25,
          },
          {
              "key": "OPTIONAL_VARIABLE",
              "type": "string",
          },
      ],
  })
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Templates.update("34a080c9-b17d-4187-ad80-5af20266e535", {
    name: "welcome-email",
    html: "<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>",
    variables: [
      {
        key: "NAME",
        type: "string",
        fallback_value: "user"
      },
      {
        key: "AGE",
        type: "number",
        fallback_value: 25
      },
      {
        key: "OPTIONAL_VARIABLE",
        type: "string"
      }
    ]
  })
  ```

  ```go Go theme={null}
  import (
  	"context"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
  	client := resend.NewClient("re_xxxxxxxxx")

  	template, err := client.Templates.UpdateWithContext(context.TODO(), "34a080c9-b17d-4187-ad80-5af20266e535", &resend.UpdateTemplateRequest{
  		Name: "welcome-email",
  		Html: "<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>",
  		Variables: []*resend.TemplateVariable{
  			{
  				Key:           "NAME",
  				Type:          resend.VariableTypeString,
  				FallbackValue: "user",
  			},
  			{
  				Key:           "AGE",
  				Type:          resend.VariableTypeNumber,
  				FallbackValue: 25,
  			},
  			{
  				Key:  "OPTIONAL_VARIABLE",
  				Type: resend.VariableTypeString,
  			},
  		},
  	})
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{
    types::{UpdateTemplateOptions, Variable, VariableType},
    Resend, Result,
  };

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let name = "welcome-email";
    let html = "<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>";

    let variables = [
      Variable::new("NAME", VariableType::String).with_fallback("user".into()),
      Variable::new("AGE", VariableType::Number).with_fallback(25.into()),
      Variable::new("OPTIONAL_VARIABLE", VariableType::String),
    ];

    let update = UpdateTemplateOptions::new(name, html).with_variables(&variables);

    let _template = resend
      .templates
      .update("34a080c9-b17d-4187-ad80-5af20266e535", update)
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet.
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet.
  ```

  ```bash cURL theme={null}
  curl -X PATCH 'https://api.resend.com/templates/34a080c9-b17d-4187-ad80-5af20266e535' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "name": "welcome-email",
    "html": "<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>",
    "variables": [
      {
        "key": "NAME",
        "type": "string",
        "fallback_value": "user"
      },
      {
        "key": "AGE",
        "type": "number",
        "fallback_value": 25
      },
      {
        "key": "OPTIONAL_VARIABLE",
        "type": "string"
      }
    ]
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "id": "34a080c9-b17d-4187-ad80-5af20266e535",
    "object": "template"
  }
  ```
</ResponseExample>


# Create Topic
Source: https://resend.com/docs/api-reference/topics/create-topic

POST /topics
Create and email topics to segment your audience.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

<Warning>
  Topics are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-topics
    ```

    ```python Python theme={null}
    pip install resend==2.18.0a1
    ```

    ```ruby Ruby theme={null}
    gem install resend -v 0.27.0.alpha.1
    ```

    ```go Go theme={null}
    go get github.com/resend/resend-go/v2@v2.28.0-alpha.1
    ```

    ```bash Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

## Body Parameters

<ParamField body="name" type="string" required>
  The topic name. Max length is `50` characters.
</ParamField>

<ResendParamField body="default_subscription" type="string" required>
  The default subscription preference for new contacts. Possible values:
  `opt_in` or `opt_out`.

  <Note>
    This value cannot be changed later.
  </Note>
</ResendParamField>

<ParamField body="description" type="string">
  The topic description. Max length is `200` characters.
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.topics.create({
    name: 'Weekly Newsletter',
    defaultSubscription: 'opt_in',
  });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->topics->create([
    'name' => 'Weekly Newsletter',
    'default_subscription' => 'opt_in',
  ]);
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Topics.create({
      "name": "Weekly Newsletter",
      "default_subscription": "opt_in",
      "description": "Subscribe to our weekly newsletter for updates",
  })
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Topics.create(
    name: "Weekly Newsletter",
    default_subscription: "opt_in"
  )
  ```

  ```go Go theme={null}
  import (
  	"context"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
  	client := resend.NewClient("re_xxxxxxxxx")

  	topic, err := client.Topics.CreateWithContext(context.TODO(), &resend.CreateTopicRequest{
  		Name:                "Weekly Newsletter",
  		DefaultSubscription: resend.DefaultSubscriptionOptIn,
  	})
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{
    types::{CreateTopicOptions, SubscriptionType},
    Resend, Result,
  };

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let opts = CreateTopicOptions::new("Weekly Newsletter", SubscriptionType::OptIn);
    let _topic = resend.topics.create(opts).await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/topics' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "name": "Weekly Newsletter",
    "default_subscription": "opt_in"
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "id": "b6d24b8e-af0b-4c3c-be0c-359bbd97381e"
  }
  ```
</ResponseExample>


# Delete Topic
Source: https://resend.com/docs/api-reference/topics/delete-topic

DELETE /topics/:topic_id
Remove an existing topic.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

<Warning>
  Topics are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-topics
    ```

    ```python Python theme={null}
    pip install resend==2.18.0a1
    ```

    ```ruby Ruby theme={null}
    gem install resend -v 0.27.0.alpha.1
    ```

    ```go Go theme={null}
    go get github.com/resend/resend-go/v2@v2.28.0-alpha.1
    ```

    ```bash Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

## Path Parameters

<ResendParamField path="topic_id" type="string" required>
  The topic ID.
</ResendParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.topics.remove(
    'b6d24b8e-af0b-4c3c-be0c-359bbd97381e',
  );
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->topics->remove('b6d24b8e-af0b-4c3c-be0c-359bbd97381e');
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Topics.remove(id="b6d24b8e-af0b-4c3c-be0c-359bbd97381e")
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Topics.remove("b6d24b8e-af0b-4c3c-be0c-359bbd97381e")
  ```

  ```go Go theme={null}
  import (
  	"context"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
  	client := resend.NewClient("re_xxxxxxxxx")

  	topic, err := client.Topics.RemoveWithContext(
  		context.TODO(),
  		"b6d24b8e-af0b-4c3c-be0c-359bbd97381e",
  	)
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _deleted = resend.topics.delete("delete").await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X DELETE 'https://api.resend.com/topics/b6d24b8e-af0b-4c3c-be0c-359bbd97381e' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "topic",
    "id": "b6d24b8e-af0b-4c3c-be0c-359bbd97381e",
    "deleted": true
  }
  ```
</ResponseExample>


# Retrieve Topic
Source: https://resend.com/docs/api-reference/topics/get-topic

GET /topics/:topic_id
Retrieve a topic by its ID.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

<Warning>
  Topics are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-topics
    ```

    ```python Python theme={null}
    pip install resend==2.18.0a1
    ```

    ```ruby Ruby theme={null}
    gem install resend -v 0.27.0.alpha.1
    ```

    ```go Go theme={null}
    go get github.com/resend/resend-go/v2@v2.28.0-alpha.1
    ```

    ```bash Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

## Path Parameters

<ResendParamField path="topic_id" type="string" required>
  The Topic ID.
</ResendParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.topics.get(
    'b6d24b8e-af0b-4c3c-be0c-359bbd97381e',
  );
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->topics->get('b6d24b8e-af0b-4c3c-be0c-359bbd97381e');
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Topics.get("b6d24b8e-af0b-4c3c-be0c-359bbd97381e")
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Topics.get("b6d24b8e-af0b-4c3c-be0c-359bbd97381e")
  ```

  ```go Go theme={null}
  import (
  	"context"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
  	client := resend.NewClient("re_xxxxxxxxx")

  	topic, err := client.Topics.GetWithContext(
  		context.TODO(),
  		"b6d24b8e-af0b-4c3c-be0c-359bbd97381e",
  	)
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _topic = resend
      .topics
      .get("b6d24b8e-af0b-4c3c-be0c-359bbd97381e")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/topics/b6d24b8e-af0b-4c3c-be0c-359bbd97381e' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "id": "b6d24b8e-af0b-4c3c-be0c-359bbd97381e",
    "name": "Weekly Newsletter",
    "description": "Weekly newsletter for our subscribers",
    "default_subscription": "opt_in",
    "created_at": "2023-04-08T00:11:13.110779+00:00"
  }
  ```
</ResponseExample>


# List Topics
Source: https://resend.com/docs/api-reference/topics/list-topics

GET /topics
Retrieve a list of topics for the authenticated user.

export const QueryParams = ({type, isRequired}) => {
  return <>
      <h2>Query Parameters</h2>

      {isRequired ? <ParamField query="limit" type="number">
          Number of {type} to retrieve.
          <ul>
            <li>
              Default value: <code>20</code>
            </li>
            <li>
              Maximum value: <code>100</code>
            </li>
            <li>
              Minimum value: <code>1</code>
            </li>
          </ul>
        </ParamField> : <>
          <p>
            Note that the <code>limit</code> parameter is <em>optional</em>. If
            you do not provide a <code>limit</code>, all {type} will be returned
            in a single response.
          </p>
          <ParamField query="limit" type="number">
            Number of {type} to retrieve.
            <ul>
              <li>
                Maximum value: <code>100</code>
              </li>
              <li>
                Minimum value: <code>1</code>
              </li>
            </ul>
          </ParamField>
        </>}

      <ParamField query="after" type="string">
        The ID <em>after</em> which we'll retrieve more {type} (for pagination).
        This ID will <em>not</em> be included in the returned list. Cannot be
        used with the
        <code>before</code> parameter.
      </ParamField>
      <ParamField query="before" type="string">
        The ID <em>before</em> which we'll retrieve more {type} (for
        pagination). This ID will <em>not</em> be included in the returned list.
        Cannot be used with the <code>after</code> parameter.
      </ParamField>
      <Info>
        You can only use either <code>after</code> or <code>before</code>{' '}
        parameter, not both. See our{' '}
        <a href="/api-reference/pagination">pagination guide</a> for more
        information.
      </Info>
    </>;
};

<Warning>
  Topics are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-topics
    ```

    ```python Python theme={null}
    pip install resend==2.18.0a1
    ```

    ```ruby Ruby theme={null}
    gem install resend -v 0.27.0.alpha.1
    ```

    ```go Go theme={null}
    go get github.com/resend/resend-go/v2@v2.28.0-alpha.1
    ```

    ```bash Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

<QueryParams type="topics" isRequired={true} />

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.topics.list();
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->topics->list();
  ```

  ```php PHP theme={null}
  // PHP SDK is not available yet
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Topics.list()
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Topics.list()
  ```

  ```go Go theme={null}
  import (
  	"context"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
  	client := resend.NewClient("re_xxxxxxxxx")

  	topics, err := client.Topics.ListWithContext(context.TODO(), nil)
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{list_opts::ListOptions, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _list = resend.topics.list(ListOptions::default()).await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/topics' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "list",
    "has_more": false,
    "data": [
      {
        "id": "b6d24b8e-af0b-4c3c-be0c-359bbd97381e",
        "name": "Weekly Newsletter",
        "description": "Weekly newsletter for our subscribers",
        "default_subscription": "opt_in",
        "created_at": "2023-04-08T00:11:13.110779+00:00"
      }
    ]
  }
  ```
</ResponseExample>


# Update Topic
Source: https://resend.com/docs/api-reference/topics/update-topic

PATCH /topics/:topic_id
Update an existing topic.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

<Warning>
  Topics are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-topics
    ```

    ```python Python theme={null}
    pip install resend==2.18.0a1
    ```

    ```ruby Ruby theme={null}
    gem install resend -v 0.27.0.alpha.1
    ```

    ```go Go theme={null}
    go get github.com/resend/resend-go/v2@v2.28.0-alpha.1
    ```

    ```bash Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

## Path Parameters

<ResendParamField path="topic_id" type="string" required>
  The Topic ID.
</ResendParamField>

## Body Parameters

<ParamField body="name" type="string">
  The topic name. Max length is `50` characters.
</ParamField>

<ParamField body="description" type="string">
  The topic description. Max length is `200` characters.
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.topics.update(
    'b6d24b8e-af0b-4c3c-be0c-359bbd97381e',
    {
      name: 'Weekly Newsletter',
      description: 'Weekly newsletter for our subscribers',
    },
  );
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->topics->update('b6d24b8e-af0b-4c3c-be0c-359bbd97381e', [
    'name' => 'Weekly Newsletter',
    'description' => 'Weekly newsletter for our subscribers',
  ]);
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  resend.Topics.update(
      id="b6d24b8e-af0b-4c3c-be0c-359bbd97381e",
      params={
          "name": "Monthly Newsletter",
          "description": "Subscribe to our monthly newsletter for updates",
      }
  )
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  Resend::Topics.update(
    topic_id: "b6d24b8e-af0b-4c3c-be0c-359bbd97381e",
    name: "Weekly Newsletter",
    description: "Weekly newsletter for our subscribers"
  )
  ```

  ```go Go theme={null}
  import (
  	"context"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
  	client := resend.NewClient("re_xxxxxxxxx")

  	topic, err := client.Topics.UpdateWithContext(context.TODO(), "b6d24b8e-af0b-4c3c-be0c-359bbd97381e", &resend.UpdateTopicRequest{
  		Name:        "Weekly Newsletter",
  		Description: "Weekly newsletter for our subscribers",
  	})
  }
  ```

  ```rust Rust theme={null}
  use resend_rs::{types::UpdateTopicOptions, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let update = UpdateTopicOptions::new()
      .with_name("Weekly Newsletter")
      .with_description("Weekly newsletter for our subscribers");

    let _topic = resend
      .topics
      .update("b6d24b8e-af0b-4c3c-be0c-359bbd97381e", update)
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X PATCH 'https://api.resend.com/topics/b6d24b8e-af0b-4c3c-be0c-359bbd97381e' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "name": "Weekly Newsletter",
    "default_subscription": "opt_in"
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "id": "b6d24b8e-af0b-4c3c-be0c-359bbd97381e"
  }
  ```
</ResponseExample>


# Create Webhook
Source: https://resend.com/docs/api-reference/webhooks/create-webhook

POST /webhooks
Create a webhook to receive real-time notifications about email events.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

<Warning>
  Webhooks API is currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-webhooks
    ```

    ```python Python theme={null}
    # Python SDK is not available yet
    ```

    ```ruby Ruby theme={null}
    # Ruby SDK is not available yet
    ```

    ```go Go theme={null}
    // Go SDK is not available yet
    ```

    ```rust Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

## Body Parameters

<ParamField body="endpoint" type="string" required>
  The URL where webhook events will be sent.
</ParamField>

<ParamField body="events" type="string[]" required>
  Array of event types to subscribe to. See [event
  types](/dashboard/webhooks/event-types) for available options.
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.webhooks.create({
    endpoint: 'https://webhook.example.com/handler',
    events: ['email.sent', 'email.delivered', 'email.bounced'],
  });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->webhooks->create([
    'endpoint' => 'https://webhook.example.com/handler',
    'events' => ['email.sent', 'email.delivered', 'email.bounced'],
  ]);
  ```

  ```python Python theme={null}
  # Python SDK is not available yet
  ```

  ```ruby Ruby theme={null}
  # Ruby SDK is not available yet
  ```

  ```go Go theme={null}
  // Go SDK is not available yet
  ```

  ```rust Rust theme={null}
  use resend_rs::{
    events::EmailEventType::{EmailBounced, EmailDelivered, EmailSent},
    types::CreateWebhookOptions,
    Resend, Result,
  };

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let events = [EmailSent, EmailDelivered, EmailBounced];
    let opts = CreateWebhookOptions::new("https://webhook.example.com/handler", events);
    let _webhook = resend.webhooks.create(opts).await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/webhooks' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d '{
    "endpoint": "https://webhook.example.com/handler",
    "events": ["email.sent", "email.delivered", "email.bounced"]
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "webhook",
    "id": "4dd369bc-aa82-4ff3-97de-514ae3000ee0",
    "signing_secret": "whsec_xxxxxxxxxx"
  }
  ```
</ResponseExample>


# Delete Webhook
Source: https://resend.com/docs/api-reference/webhooks/delete-webhook

DELETE /webhooks/:webhook_id
Remove an existing webhook.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

<Warning>
  Webhooks API is currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-webhooks
    ```

    ```python Python theme={null}
    # Python SDK is not available yet
    ```

    ```ruby Ruby theme={null}
    # Ruby SDK is not available yet
    ```

    ```go Go theme={null}
    // Go SDK is not available yet
    ```

    ```rust Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

## Path Parameters

<ResendParamField path="webhook_id" type="string" required>
  The Webhook ID.
</ResendParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.webhooks.remove(
    '4dd369bc-aa82-4ff3-97de-514ae3000ee0',
  );
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->webhooks->remove('4dd369bc-aa82-4ff3-97de-514ae3000ee0');
  ```

  ```python Python theme={null}
  # Python SDK is not available yet
  ```

  ```ruby Ruby theme={null}
  # Ruby SDK is not available yet
  ```

  ```go Go theme={null}
  // Go SDK is not available yet
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _deleted = resend
      .webhooks
      .delete("4dd369bc-aa82-4ff3-97de-514ae3000ee0")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X DELETE 'https://api.resend.com/webhooks/4dd369bc-aa82-4ff3-97de-514ae3000ee0' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "webhook",
    "id": "4dd369bc-aa82-4ff3-97de-514ae3000ee0",
    "deleted": true
  }
  ```
</ResponseExample>


# Retrieve Webhook
Source: https://resend.com/docs/api-reference/webhooks/get-webhook

GET /webhooks/:webhook_id
Retrieve a single webhook for the authenticated user.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

<Warning>
  Webhooks API is currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-webhooks
    ```

    ```python Python theme={null}
    # Python SDK is not available yet
    ```

    ```ruby Ruby theme={null}
    # Ruby SDK is not available yet
    ```

    ```go Go theme={null}
    // Go SDK is not available yet
    ```

    ```rust Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

## Path Parameters

<ResendParamField path="webhook_id" type="string" required>
  The Webhook ID.
</ResendParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.webhooks.get(
    '4dd369bc-aa82-4ff3-97de-514ae3000ee0',
  );
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->webhooks->get('4dd369bc-aa82-4ff3-97de-514ae3000ee0');
  ```

  ```python Python theme={null}
  # Python SDK is not available yet
  ```

  ```ruby Ruby theme={null}
  # Ruby SDK is not available yet
  ```

  ```go Go theme={null}
  // Go SDK is not available yet
  ```

  ```rust Rust theme={null}
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _webhook = resend
      .webhooks
      .get("4dd369bc-aa82-4ff3-97de-514ae3000ee0")
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/webhooks/4dd369bc-aa82-4ff3-97de-514ae3000ee0' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "webhook",
    "id": "4dd369bc-aa82-4ff3-97de-514ae3000ee0",
    "created_at": "2023-08-22T15:28:00.000Z",
    "status": "enabled",
    "endpoint": "https://webhook.example.com/handler",
    "events": ["email.sent", "email.received"],
    "signing_secret": "whsec_xxxxxxxxxx"
  }
  ```
</ResponseExample>


# List Webhooks
Source: https://resend.com/docs/api-reference/webhooks/list-webhooks

GET /webhooks
Retrieve a list of webhooks for the authenticated user.

export const QueryParams = ({type, isRequired}) => {
  return <>
      <h2>Query Parameters</h2>

      {isRequired ? <ParamField query="limit" type="number">
          Number of {type} to retrieve.
          <ul>
            <li>
              Default value: <code>20</code>
            </li>
            <li>
              Maximum value: <code>100</code>
            </li>
            <li>
              Minimum value: <code>1</code>
            </li>
          </ul>
        </ParamField> : <>
          <p>
            Note that the <code>limit</code> parameter is <em>optional</em>. If
            you do not provide a <code>limit</code>, all {type} will be returned
            in a single response.
          </p>
          <ParamField query="limit" type="number">
            Number of {type} to retrieve.
            <ul>
              <li>
                Maximum value: <code>100</code>
              </li>
              <li>
                Minimum value: <code>1</code>
              </li>
            </ul>
          </ParamField>
        </>}

      <ParamField query="after" type="string">
        The ID <em>after</em> which we'll retrieve more {type} (for pagination).
        This ID will <em>not</em> be included in the returned list. Cannot be
        used with the
        <code>before</code> parameter.
      </ParamField>
      <ParamField query="before" type="string">
        The ID <em>before</em> which we'll retrieve more {type} (for
        pagination). This ID will <em>not</em> be included in the returned list.
        Cannot be used with the <code>after</code> parameter.
      </ParamField>
      <Info>
        You can only use either <code>after</code> or <code>before</code>{' '}
        parameter, not both. See our{' '}
        <a href="/api-reference/pagination">pagination guide</a> for more
        information.
      </Info>
    </>;
};

<Warning>
  Webhooks API is currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-webhooks
    ```

    ```python Python theme={null}
    # Python SDK is not available yet
    ```

    ```ruby Ruby theme={null}
    # Ruby SDK is not available yet
    ```

    ```go Go theme={null}
    // Go SDK is not available yet
    ```

    ```rust Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

<QueryParams type="webhooks" isRequired={false} />

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.webhooks.list();
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->webhooks->list();
  ```

  ```python Python theme={null}
  # Python SDK is not available yet
  ```

  ```ruby Ruby theme={null}
  # Ruby SDK is not available yet
  ```

  ```go Go theme={null}
  // Go SDK is not available yet
  ```

  ```rust Rust theme={null}
  use resend_rs::{list_opts::ListOptions, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _webhooks = resend.webhooks.list(ListOptions::default()).await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X GET 'https://api.resend.com/webhooks' \
       -H 'Authorization: Bearer re_xxxxxxxxx'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "list",
    "has_more": false,
    "data": [
      {
        "id": "7ab123cd-ef45-6789-abcd-ef0123456789",
        "created_at": "2023-09-10T10:15:30.000Z",
        "status": "disabled",
        "endpoint": "https://first-webhook.example.com/handler",
        "events": ["email.delivered", "email.bounced"]
      },
      {
        "id": "4dd369bc-aa82-4ff3-97de-514ae3000ee0",
        "created_at": "2023-08-22T15:28:00.000Z",
        "status": "enabled",
        "endpoint": "https://second-webhook.example.com/receive",
        "events": ["email.received"]
      }
    ]
  }
  ```
</ResponseExample>


# Update Webhook
Source: https://resend.com/docs/api-reference/webhooks/update-webhook

PATCH /webhooks/:webhook_id
Update an existing webhook configuration.

export const ResendParamField = ({children, body, path, ...props}) => {
  const [lang, setLang] = useState(() => {
    return localStorage.getItem('code') || '"Node.js"';
  });
  useEffect(() => {
    const onStorage = event => {
      const key = event.detail.key;
      if (key === 'code') {
        setLang(event.detail.value);
      }
    };
    document.addEventListener('mintlify-localstorage', onStorage);
    return () => {
      document.removeEventListener('mintlify-localstorage', onStorage);
    };
  }, []);
  const toCamelCase = str => typeof str === 'string' ? str.replace(/[_-](\w)/g, (_, c) => c.toUpperCase()) : str;
  const resolvedBody = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(body) : body;
  }, [body, lang]);
  const resolvedPath = useMemo(() => {
    const value = JSON.parse(lang);
    return value === 'Node.js' ? toCamelCase(path) : path;
  }, [path, lang]);
  return <ParamField body={resolvedBody} path={resolvedPath} {...props}>
      {children}
    </ParamField>;
};

<Warning>
  Webhooks API is currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-webhooks
    ```

    ```python Python theme={null}
    # Python SDK is not available yet
    ```

    ```ruby Ruby theme={null}
    # Ruby SDK is not available yet
    ```

    ```go Go theme={null}
    // Go SDK is not available yet
    ```

    ```rust Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

## Path Parameters

<ResendParamField path="webhook_id" type="string" required>
  The Webhook ID.
</ResendParamField>

## Body Parameters

<ParamField body="endpoint" type="string">
  The URL where webhook events will be sent.
</ParamField>

<ParamField body="events" type="string[]">
  Array of event types to subscribe to. See [event
  types](/dashboard/webhooks/event-types) for available options.
</ParamField>

<ParamField body="status" type="string">
  The webhook status. Can be either `enabled` or `disabled`.
</ParamField>

<RequestExample>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.webhooks.update(
    '430eed87-632a-4ea6-90db-0aace67ec228',
    {
      endpoint: 'https://new-webhook.example.com/handler',
      events: ['email.sent', 'email.delivered'],
      status: 'enabled',
    },
  );
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->webhooks->update('430eed87-632a-4ea6-90db-0aace67ec228', [
    'endpoint' => 'https://new-webhook.example.com/handler',
    'events' => ['email.sent', 'email.delivered'],
    'status' => 'enabled',
  ]);
  ```

  ```python Python theme={null}
  # Python SDK is not available yet
  ```

  ```ruby Ruby theme={null}
  # Ruby SDK is not available yet
  ```

  ```go Go theme={null}
  // Go SDK is not available yet
  ```

  ```rust Rust theme={null}
  use resend_rs::{
    events::EmailEventType::{EmailDelivered, EmailSent},
    types::{UpdateWebhookOptions, WebhookStatus},
    Resend, Result,
  };

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let events = [EmailSent, EmailDelivered];
    let opts = UpdateWebhookOptions::default()
      .with_endpoint("https://new-webhook.example.com/handler")
      .with_events(events)
      .with_status(WebhookStatus::Enabled);

    let _webhook = resend
      .webhooks
      .update("430eed87-632a-4ea6-90db-0aace67ec228", opts)
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X PATCH 'https://api.resend.com/webhooks/430eed87-632a-4ea6-90db-0aace67ec228' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d '{
    "endpoint": "https://new-webhook.example.com/handler",
    "events": ["email.sent", "email.delivered"],
    "status": "enabled"
  }'
  ```
</RequestExample>

<ResponseExample>
  ```json Response theme={null}
  {
    "object": "webhook",
    "id": "430eed87-632a-4ea6-90db-0aace67ec228"
  }
  ```
</ResponseExample>


# Introduction
Source: https://resend.com/docs/dashboard/api-keys/introduction

Visualize all the API Keys on the Resend Dashboard.

## What is an API Key

API Keys are secret tokens used to authenticate your requests. They are unique to your account and should be kept confidential.

## Add API Key

You can create a new API Key from the [API Key Dashboard](https://resend.com/api-keys).

1. Click **Create API Key**.
2. Give your API Key a name.
3. Select **Full access** or **Sending access** as the permission.
4. If you select **Sending access**, you can choose the domain you want to restrict access to.

<img alt="Add API Key" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-add.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1ecfaf7a2d2a780b826f941078e427b5" height={450} width={720} data-og-width="3024" data-og-height="1888" data-path="images/dashboard-api-keys-add.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-add.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4841d039f5962404980fdeaa815796c3 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-add.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e7585dcf4002a2d420e5e8950a50c6a0 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-add.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=558d60f4749160bcc072714d0a90c4dd 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-add.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a9a3f735cca772a8ab0dd5b634633cc0 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-add.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7b1aefbbb6c0445762c0ab387cb2ecdd 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-add.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=191d64e93b75d7ab3065a5cea16646f6 2500w" />

<Note>
  For security reasons, you can only view the API Key once. Learn more about
  [API key best practices](/knowledge-base/how-to-handle-api-keys).
</Note>

## Set API Key permissions

There are two different permissions of API Keys:

1. **Full access**: grants access to create, delete, get, and update any resource.
2. **Sending access**: grants access only to send emails.

With API Key permissions, you can isolate different application actions to different API Keys. Using multiple keys, you can view logs per key, detect possible abuse, and control the damage that may be done accidentally or maliciously.

## View all API Keys

The [API Dashboard](https://resend.com/api-keys) shows you all the API Keys you have created along with their details, including the **last time you used** an API Key.

Different color indicators let you quickly scan and detect which API Keys are being used and which are not.

<img alt="View All API Keys" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-all.jpg?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f195ef7f60a110407e2739f30c10ca2a" data-og-width="2584" width="2584" data-og-height="980" height="980" data-path="images/dashboard-api-keys-view-all.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-all.jpg?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=60ecb81b74328a39b37fa47e8f531039 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-all.jpg?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d7b6a12d3bd1f1ae7ba6ad8591a5b3b7 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-all.jpg?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6c58f948de72898e3bc242a47d2355ea 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-all.jpg?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=706fabc16fbae5e82aba851c31c00493 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-all.jpg?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=42982ddb6cd44974e739c31c78b11a73 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-all.jpg?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a20d700dab8882cb7370635d5a1ddccc 2500w" />

## Edit API Key details

After creating an API Key, you can edit the following details:

* Name
* Permission
* Domain

To edit an API Key, click the **More options** <Icon icon="ellipsis" iconType="solid" /> button and then **Edit API Key**.

<img alt="View Inactive API Key" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-edit.jpeg?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7abe8e055cf311a7f66a40477db7946a" data-og-width="1752" width="1752" data-og-height="878" height="878" data-path="images/dashboard-api-keys-edit.jpeg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-edit.jpeg?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c1e27f6ba842a2b5df6542aafb04cb37 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-edit.jpeg?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f3ec4aa3707e107702ee90ed14658158 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-edit.jpeg?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8cf8b26efe7561a42514b8bc0b43661d 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-edit.jpeg?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c71c2a9e51dcf7b95f107eb39a9515e3 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-edit.jpeg?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1a776fb48a6b433eb517397e419aee1c 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-edit.jpeg?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6983ee271974c993a358c44289ceecc4 2500w" />

<Info>You cannot edit an API Key value after it has been created.</Info>

## Delete inactive API Keys

If an API Key **hasn't been used in the last 30 days**, consider deleting it to keep your account secure.

<img alt="View Inactive API Key" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-inactive.jpg?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=fa99650454696902100e03b669d3a9c1" data-og-width="2584" width="2584" data-og-height="980" height="980" data-path="images/dashboard-api-keys-view-inactive.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-inactive.jpg?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5d1122d27cd32e2d916ee06761a9079f 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-inactive.jpg?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=cab07c70b961928cbb7e44049a06d19e 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-inactive.jpg?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=368afaea3ac78f34a894d1381d918367 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-inactive.jpg?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b52e4953ff371852abafdb87c442e50e 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-inactive.jpg?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f3a1f23534d3b8ece3e62d7af96d2051 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-inactive.jpg?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7e5776d2a042133044f69ecd6e667384 2500w" />

You can delete an API Key by clicking the **More options** <Icon icon="ellipsis" iconType="solid" /> button and then **Remove API Key**.

<img alt="Delete API Key" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-remove.jpeg?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9fc76ff5dc4cd38f465539cd3a435706" data-og-width="2649" width="2649" data-og-height="980" height="980" data-path="images/dashboard-api-keys-remove.jpeg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-remove.jpeg?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=79b2a814dfabf620f1d05e8efb722130 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-remove.jpeg?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d833c68507635e0003ae837ef2854c2b 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-remove.jpeg?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ad1dc55cd2378a42a9b3e3760714c64e 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-remove.jpeg?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ae199ea0e47bd3b219d726369c6eec46 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-remove.jpeg?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4ea45648adba2a329bf3d3c1d05aeb5d 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-remove.jpeg?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=257296f43bfde297ca68d90b51168d03 2500w" />

## View API Key logs

When visualizing an active API Key, you can see the **total number of requests** made to the key. For more detailed logging information, select the underlined number of requests to view all logs for that API Key.

<img alt="View Active API Key" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-active.jpg?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e0c0584545565e1e78e460b240d2c221" data-og-width="2584" width="2584" data-og-height="980" height="980" data-path="images/dashboard-api-keys-view-active.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-active.jpg?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1beb0efb48ff143ba79fee5090254cdb 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-active.jpg?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=68ab16f2b4889324cc7553ce644ffc08 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-active.jpg?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f6a1617f1033ec13d63c49d6359c85be 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-active.jpg?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8a85c9c133c1c185d3369813f31b3c8b 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-active.jpg?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5991f8d2f8c37077457a12c004d25ea0 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-api-keys-view-active.jpg?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=57cbd4dbcdc1637bd217e74fd8ff3232 2500w" />

## Export your data

Admins can download your data in CSV format for the following resources:

* Emails
* Broadcasts
* Contacts
* Domains
* Logs
* API keys

<Info>Currently, exports are limited to admin users of your team.</Info>

To start, apply filters to your data and click on the "Export" button. Confirm your filters before exporting your data.

<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/exports.mp4?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1149ee4e83b4414e75a0ecaa92774c38" data-path="images/exports.mp4" />

If your exported data includes 1,000 items or less, the export will download immediately. For larger exports, you'll receive an email with a link to download your data.

All admins on your team can securely access the export for 7 days. Unavailable exports are marked as "Expired."

<Note>
  All exports your team creates are listed in the
  [Exports](https://resend.com/exports) page under **Settings** > **Team** >
  **Exports**. Select any export to view its details page. All members of your
  team can view your exports, but only admins can download the data.
</Note>


# Managing Contacts
Source: https://resend.com/docs/dashboard/audiences/contacts

How to manage and import contacts to your audiences.

Resend has [Audiences](/dashboard/audiences/introduction) made up of Contacts. You can send [Broadcasts](/dashboard/broadcasts/introduction) to your Audiences. When adding a Contact, you can assign it an email address and first and last name to personalize your Broadcast to them.

You can add your Contacts to an Audience in three different ways: via API, CSV upload, or manually.

## 1. Adding Contacts programmatically via API

You can add contacts to an Audience programmatically. For instance, after someone makes a purchase, you can add them to your "Paying Customers" audience. Resend's SDKs have support for the [contacts](/api-reference/contacts/create-contact) endpoint.

<CodeGroup>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  resend.contacts.create({
  email: 'steve.wozniak@gmail.com',
  firstName: 'Steve',
  lastName: 'Wozniak',
  unsubscribed: false,
  audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
  });

  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->contacts->create(
    audienceId: '78261eea-8f8b-4381-83c6-79fa7120f1cf',
    parameters: [
      'email' => 'steve.wozniak@gmail.com',
      'first_name' => 'Steve',
      'last_name' => 'Wozniak',
      'unsubscribed' => false
    ]
  );
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  params: resend.Contacts.CreateParams = {
    "email": "steve.wozniak@gmail.com",
    "first_name": "Steve",
    "last_name": "Wozniak",
    "unsubscribed": False,
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
  }

  resend.Contacts.create(params)
  ```

  ```ruby Ruby theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  params = {
    "email": "steve.wozniak@gmail.com",
    "first_name": "Steve",
    "last_name": "Wozniak",
    "unsubscribed": false,
    "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
  }

  Resend::Contacts.create(params)
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  params := &resend.CreateContactRequest{
    Email:        "steve.wozniak@gmail.com",
    FirstName:    "Steve",
    LastName:     "Wozniak",
    Unsubscribed: false,
    AudienceId:   "78261eea-8f8b-4381-83c6-79fa7120f1cf",
  }

  contact, err := client.Contacts.Create(params)
  ```

  ```rust Rust theme={null}
  use resend_rs::{types::ContactData, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let contact = ContactData::new("steve.wozniak@gmail.com")
      .with_first_name("Steve")
      .with_last_name("Wozniak")
      .with_unsubscribed(false);

    let _contact = resend
      .contacts
      .create("78261eea-8f8b-4381-83c6-79fa7120f1cf", contact)
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          CreateContactOptions params = CreateContactOptions.builder()
                  .email("steve.wozniak@gmail.com")
                  .firstName("Steve")
                  .lastName("Wozniak")
                  .unsubscribed(false)
                  .audienceId("78261eea-8f8b-4381-83c6-79fa7120f1cf")
                  .build();

          CreateContactResponseSuccess data = resend.contacts().create(params);
      }
  }
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/audiences/78261eea-8f8b-4381-83c6-79fa7120f1cf/contacts' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "email": "steve.wozniak@gmail.com",
    "first_name": "Steve",
    "last_name": "Wozniak",
    "unsubscribed": false
  }'
  ```
</CodeGroup>

## 2. Adding Contacts by uploading a .csv

<Steps>
  <Step title="Go to Audiences">
    Go to the [Audiences](https://resend.com/audiences) page, and select **Add Contacts**.

        <img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=cf6ffd1665ab8bf235ba046519e50fe0" alt="Adding Contacts" data-og-width="3024" width="3024" data-og-height="1804" height="1804" data-path="images/audiences-intro-6.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ade2e714c210127aa6ab0f9a8bfba48d 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2249cf8965edf78e7d84f9c2babb8ce6 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9a11dc6bc68f80b0cecb700d6b8661b9 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=04e6b7d838a7e446b5cd82959c48d77e 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8e4e711e8646a58ca482cc3a722c387b 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d4a5dc0b20602aa375278014eac40a26 2500w" />
  </Step>

  <Step title="Select Import">
    Select **Import CSV**.
  </Step>

  <Step title="Upload CSV">
    Upload your CSV file from your computer.

        <img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=cf6ffd1665ab8bf235ba046519e50fe0" alt="Adding Contacts" data-og-width="3024" width="3024" data-og-height="1804" height="1804" data-path="images/audiences-intro-6.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ade2e714c210127aa6ab0f9a8bfba48d 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2249cf8965edf78e7d84f9c2babb8ce6 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9a11dc6bc68f80b0cecb700d6b8661b9 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=04e6b7d838a7e446b5cd82959c48d77e 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8e4e711e8646a58ca482cc3a722c387b 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d4a5dc0b20602aa375278014eac40a26 2500w" />
  </Step>

  <Step title="Map Fields">
    After uploading your CSV file, you're able to map the fields you want to use. Currently, the supported mapping fields are `email`, `first_name`, `last_name`, and `unsubscribed`.

    <img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-1.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=cc19e1239528d227ed7ba36742758d72" alt="Import Contacts via CSV" class="extraWidth" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/audiences-intro-1.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-1.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b9f3d45d5252150e5ff48337c4d0ff5a 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-1.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=23d469f6708afce9fe1443b8ce851127 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-1.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=bebae4269d79261fe8fb129dd7577808 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-1.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b2011a32f337874e3db55113468125c9 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-1.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8087f938bb788b524888c21ea613642f 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-1.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=cdc3d1ee8bbb80a5ec7bbf9b6642e963 2500w" />

    Finally, select **Continue**, review the contacts, and finish the upload.
  </Step>
</Steps>

## 3. Adding Contacts manually

<Steps>
  <Step title="Go to Audiences">
    Go to the [Audiences](https://resend.com/audiences) page, and select **Add Contacts**.

        <img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=cf6ffd1665ab8bf235ba046519e50fe0" alt="Adding Contacts" data-og-width="3024" width="3024" data-og-height="1804" height="1804" data-path="images/audiences-intro-6.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ade2e714c210127aa6ab0f9a8bfba48d 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2249cf8965edf78e7d84f9c2babb8ce6 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9a11dc6bc68f80b0cecb700d6b8661b9 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=04e6b7d838a7e446b5cd82959c48d77e 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8e4e711e8646a58ca482cc3a722c387b 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-6.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d4a5dc0b20602aa375278014eac40a26 2500w" />
  </Step>

  <Step title="Choose Manual">
    Select **Add Manually**.
  </Step>

  <Step title="Add Contacts">
    You can then add either one, or multiple email addresses into the text field, separating multiple email addresses with commas.

        <img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-7.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=62ffb7c1fb775136e737d5ba0a1ab881" alt="Adding Contacts Manually" data-og-width="3024" width="3024" data-og-height="1810" height="1810" data-path="images/audiences-intro-7.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-7.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e110cf1e70687d4dfad8569a4d041331 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-7.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9ef73054f94bab33dd01464f4154e4ee 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-7.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=bb89d33351b3dad5bac40d0f484d007f 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-7.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8a3cb6b2f948bed3f7347edd0a223652 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-7.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1e6b75394a9642c7b3fd9152c967066c 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-7.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d6902bb110b950921ad49954fb2f9782 2500w" />
  </Step>
</Steps>


# Managing Audiences
Source: https://resend.com/docs/dashboard/audiences/introduction

Learn how to add, update, retrieve, and remove contacts that you send Broadcasts to.

Managing subscribers and unsubscribers is a critical part of any email implementation. It's important to respect your users' preferences and ensure that they're receiving the right emails at the right time.

Resend Audiences allow you to group and manage your [contacts](/dashboard/audiences/contacts) in a simple and intuitive way.

<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-5.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=659d6967f842c9713480a49af65a71e6" alt="Audience" class="extraWidth" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/audiences-intro-5.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-5.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=51fc6e70c66594a75625242fb4b424d2 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-5.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1068304df68e5e739a3c5ee9545aac5f 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-5.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3e54e83da1f78e5be1347a0cf5d3be67 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-5.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=468932ff07fe34292b27826ce05d85d3 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-5.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f7adbeb7fd21b6d75e1e4e102e2f6446 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-5.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6500a1d3be7f09a990f9f7460c4fca20 2500w" />

## Send emails to your Audience

Audiences were designed to be used in conjunction with [Broadcasts](https://resend.com/broadcasts). You can send a Broadcast to an Audience from the Resend dashboard or from the Broadcast API.

### From Resend's no-code editor

You can send emails to your Audience by creating a new Broadcast and selecting the Audience you want to send it to.

<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-2.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=129a471bc9b724d6a1aab09a45dd0353" alt="Send emails to your Audience" data-og-width="1290" width="1290" data-og-height="284" height="284" data-path="images/audiences-intro-2.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-2.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3b9d075d46e85298092a143869495791 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-2.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4c901c077b9dc72e9cf12f9875ae130f 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-2.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b052baf694a234020c74a285f0fe6ff9 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-2.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=32b0fbf87643030bb25a12455078ede0 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-2.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1b23ebbe77f884e0306f3af942e96b20 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-2.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c4b296f2512b696051231a18990639b8 2500w" />

You can include the Unsubscribe Footer in your Broadcasts, which will be automatically replaced with the correct link for each contact.

### From the Broadcast API

You can also use our [Broadcast API](/api-reference/broadcasts/create-broadcast) to create and send a Broadcast to your Audience.

### How to customize the unsubscribe link in my Broadcast?

Resend generates a unique link for each recipient and each Broadcast. You can use `{{{RESEND_UNSUBSCRIBE_URL}}}` as the link target.

<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-3.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4b37fb9c380e19ca0b53b80a3c925c8f" alt="Unsubscribe Link" data-og-width="712" width="712" data-og-height="214" height="214" data-path="images/audiences-intro-3.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-3.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=fed78a951b8bb70b8a41c3d25d307f82 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-3.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f22c9a87e59c8257a3f560768be8667a 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-3.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2d4c04e492eb5c898d23c16ebe01cb88 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-3.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=162ff01e28924519e3d1cc11406ad8d7 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-3.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=fac8ea0bf3815e00af596a64f801a70b 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-3.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e9bf0b2f6dbdd3729da88871fd46770d 2500w" />

## Automatic Unsubscribes

When you send emails to your Audience, Resend will automatically handle the unsubscribe flow for you.

If a contact unsubscribes from your emails, they will be skipped when sending a future Broadcast to this same audience.

<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-4.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=83a8ef4dcdbd552e097d15ffd2b31381" alt="Automatic Unsubscribes" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/audiences-intro-4.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-4.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=361343812d569b913204e805d831a636 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-4.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7b8270aa0b6f54324aa3dd5c161c9209 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-4.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c738ab92eb92c378b50b7f999d5b0e46 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-4.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4c8cab3ac1b80d0638b129b8b3b6f240 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-4.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f6f23aa67cc3d55d36eb90e698a7cea1 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/audiences-intro-4.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=55dc62abd7a663321087dc453b575773 2500w" />

Learn more about [managing your unsubscribe list](/dashboard/audiences/managing-unsubscribe-list) or [customizing your unsubscribe page](/dashboard/settings/unsubscribe-page).

## Export your data

Admins can download your data in CSV format for the following resources:

* Emails
* Broadcasts
* Contacts
* Domains
* Logs
* API keys

<Info>Currently, exports are limited to admin users of your team.</Info>

To start, apply filters to your data and click on the "Export" button. Confirm your filters before exporting your data.

<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/exports.mp4?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1149ee4e83b4414e75a0ecaa92774c38" data-path="images/exports.mp4" />

If your exported data includes 1,000 items or less, the export will download immediately. For larger exports, you'll receive an email with a link to download your data.

All admins on your team can securely access the export for 7 days. Unavailable exports are marked as "Expired."

<Note>
  All exports your team creates are listed in the
  [Exports](https://resend.com/exports) page under **Settings** > **Team** >
  **Exports**. Select any export to view its details page. All members of your
  team can view your exports, but only admins can download the data.
</Note>


# Managing Unsubscribed Contacts
Source: https://resend.com/docs/dashboard/audiences/managing-unsubscribe-list

Learn how to check and remove recipients who have unsubscribed to your marketing emails.

It's essential to update your contact list when someone unsubscribes to maintain a good sender reputation. This reduces the likelihood of your emails being marked as spam, and can also improve deliverability for any other marketing or transactional emails you send.

When a contact unsubscribes from your emails, Resend will automatically handle the unsubscribe flow for you, and they will be skipped when sending the next Broadcast to that same audience.

## Checking Unsubcribed Contacts

To see which contacts have unsubscribed, first navigate to the [Audiences page](https://resend.com/audiences). Then, select the Audience that you want to check.

Click on the **All Statuses** filter next to the search bar, then select **Unsubscribed**.

<img alt="Managing Unsubscribe List" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/manage-unsubscriptions-1.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2b93f42570fc6f25d6d835f3bf63166a" data-og-width="3024" width="3024" data-og-height="1808" height="1808" data-path="images/manage-unsubscriptions-1.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/manage-unsubscriptions-1.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8bb8d548b35a7c16be935954ca241c2b 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/manage-unsubscriptions-1.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=950eb41d199948516932ac8b9bbcfea5 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/manage-unsubscriptions-1.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e52c046db3069e2685cc31588018e27b 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/manage-unsubscriptions-1.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c3c63a9614e393845c81d0473e6101dd 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/manage-unsubscriptions-1.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ed0a2e36dafd1948565c29a25bfec4de 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/manage-unsubscriptions-1.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5e9d2feda781f4eac7e96a41c3811dbe 2500w" />


# Managing Broadcasts
Source: https://resend.com/docs/dashboard/broadcasts/introduction

Send marketing emails efficiently without code.

Broadcasts allow you to send email blasts to your customers using a no-code editor on Resend, or from our [Broadcast API](/api-reference/broadcasts/create-broadcast).

You can use this to send email blasts such as:

* Newsletters
* Product Launches
* Investor Updates
* Promotions
* Changelogs

## Sending a Broadcast from Resend

Our Broadcasts feature was made to enable your entire team to send email campaigns without having to ask for help from developers.

### No-Code Editor

<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/broadcasts-intro-1.mp4?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3110c61ed7f55bd11b8b554317a26013" data-path="images/broadcasts-intro-1.mp4" />

### Markdown Support

You can also write your emails using Markdown. This works with headings, lists, italic, bold, links, and quotes.

You can easily copy and paste content from applications like Notion, Google Docs, iA Writter and many others maintaining formatting consistency.

<video autoPlay muted loop src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/broadcasts-intro-2.mp4?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f9eff19108e26080f5e2a6c001747125" data-path="images/broadcasts-intro-2.mp4" />

### Custom Styling

You can customize the look and feel of your email by changing **global styles** such as the background color, link color, and container size, allowing you to create emails aligned with your brand identity.

To do this, click on **Styles** at the top left of the Broadcast editor. You can edit specific images or lines of texts by selecting or highlighting them prior to clicking on **Styles**.

<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/broadcasts-intro-3.mp4?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ae6eacc8f633924b0585c78745fb4b29" data-path="images/broadcasts-intro-3.mp4" />

You can also edit individual styles for each component, including the font size, font weight, and text alignment. You can also set custom properties for each component, such as image alt, button links, and social links,

<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/broadcasts-intro-4.mp4?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=db5dfc8e83576ff410ca6be6950af9cc" data-path="images/broadcasts-intro-4.mp4" />

### Personalize your content

When creating broadcasts, you can include dynamic audience data to personalize the email content.

* `{{{FIRST_NAME|fallback}}}`
* `{{{LAST_NAME|fallback}}}`
* `{{{EMAIL}}}`
* `{{{RESEND_UNSUBSCRIBE_URL}}}`

When you include the `{{{RESEND_UNSUBSCRIBE_URL}}}` placeholder in the call, Resend includes an unsubscribe link in the email to automatically handle unsubscribe requests.

<Note>
  Learn how to create a [custom Unsubscribe
  Page](/dashboard/settings/unsubscribe-page).
</Note>

### Testing & Sending

Once you're finished writing your email, you can preview it in your personal inbox or send it to your team for feedback.

To do this, click on **Test Email** on the top right of your screen. Enter in the email address you'd like to send your email to, and then click on **Send Test Email** to complete.

Once you're ready to send your email to your Audience, click on **Send**, and slide to confirm.

<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/broadcasts-intro-5.mp4?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=63d941de662cc292556934834bc81d4c" data-path="images/broadcasts-intro-5.mp4" />

**Note**: Test emails do not include any custom Reply-To address that may have been configured. This behavior is limited to test mode and does not affect actual email sends.

## Sending a Broadcast from the Broadcast API

We also offer the option to send your Broadcasts from our [Broadcast API](/api-reference/broadcasts/create-broadcast).

The Broadcast API offers 6 endpoints for programmatically creating, updating, and sending broadcasts.

## Understand broadcast statuses

Here are all the statuses that can be associated with a broadcast:

* `draft` - The broadcast is a draft (note: if a broadcast is scheduled, it will be in the `draft` status until the scheduled time).
* `sent` - The broadcast was sent.
* `queued` - The broadcast is queued for delivery.

## Export your data

Admins can download your data in CSV format for the following resources:

* Emails
* Broadcasts
* Contacts
* Domains
* Logs
* API keys

<Info>Currently, exports are limited to admin users of your team.</Info>

To start, apply filters to your data and click on the "Export" button. Confirm your filters before exporting your data.

<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/exports.mp4?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1149ee4e83b4414e75a0ecaa92774c38" data-path="images/exports.mp4" />

If your exported data includes 1,000 items or less, the export will download immediately. For larger exports, you'll receive an email with a link to download your data.

All admins on your team can securely access the export for 7 days. Unavailable exports are marked as "Expired."

<Note>
  All exports your team creates are listed in the
  [Exports](https://resend.com/exports) page under **Settings** > **Team** >
  **Exports**. Select any export to view its details page. All members of your
  team can view your exports, but only admins can download the data.
</Note>


# Performance Tracking
Source: https://resend.com/docs/dashboard/broadcasts/performance-tracking

Track your Broadcasts email performance in real-time

Once your broadcast is sent, you can track its performance right away. The insights you can view are emails delivered, unsubscribed, click rate, and open rate.

You can view these insights by clicking on [Broadcast](https://resend.com/broadcasts) in the left column, and then clicking on the Broadcast that you want to view.

<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/broadcasts-performance-tracking-1.mp4?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=772b0573205e3bd1d3dee7fabbbcfef1" data-path="images/broadcasts-performance-tracking-1.mp4" />

Please note, at times, open rates can be inaccurate for a number of reasons due to the way inbox providers handle incoming emails. You can [read more about this here.](https://resend.com/docs/knowledge-base/why-are-my-open-rates-not-accurate)


# Implementing BIMI
Source: https://resend.com/docs/dashboard/domains/bimi

Set up BIMI to gain brand recognition by displaying your logo in the inbox.

## Prerequisites

To get the most out of this guide, you will need to:

* Establish verifiable use of your logo
  * Obtain a registered trademark for your logo
  * Or, use your logo for over one year
* [Add a DMARC record on your domain](/dashboard/domains/dmarc)

## What is BIMI?

BIMI ([Brand Indicators for Message Identification](https://bimigroup.org/)) is a standard that allows you to specify a logo (and sometimes a checkmark) to display next to your email in the inbox. These indicators can increase brand recognition and trust and improve engagement.

<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bimi-example.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7cad76755f1a51e03465d90d413df055" alt="bimi-example" data-og-width="1982" width="1982" data-og-height="1040" height="1040" data-path="images/bimi-example.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bimi-example.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=836dc64377c0ac1df68a8d3733a48643 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bimi-example.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=727c4357a30c0b0eaeae582fd70f0020 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bimi-example.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3fa44db936a5791898a3f9b2ca3baca6 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bimi-example.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=214ac85ca277465f35b858248f5b1412 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bimi-example.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=eee40e06db4eda54da8f9f14d3ba605d 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bimi-example.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1b9fbe3d9224ee53d14fa77c670dee59 2500w" />

Though this standard is newer, most major mailbox providers now support it. This gives BIMI adoption a competitive edge for brand recognition in the inbox. Most mailbox providers show brand indicators for those who purchase a certificate, of which there are two types: a Common Mark Certificate (CMC) and a Verified Mark Certificate (VMC).

Here's an overview of current email client support:

| Client                                                | BIMI w/a CMC | BIMI w/a VMC | BIMI w/out a VMC or CMC |
| ----------------------------------------------------- | ------------ | ------------ | ----------------------- |
| [Apple Mail](https://support.apple.com/en-us/108340)  | X            | ✓            | X                       |
| [Gmail](https://support.google.com/a/answer/10911320) | ✓            | ✓            | X                       |
| Outlook                                               | X            | X            | X                       |
| [Yahoo](https://senders.yahooinc.com/bimi/)           | ✓            | ✓            | ✓                       |

## Implementing BIMI

### 1. Configure DMARC

<Note>
  If you haven't set up DMARC yet, follow our [DMARC Setup
  Guide](/dashboard/domains/dmarc).
</Note>

BIMI requires a DMARC policy of `p=quarantine;` or `p=reject;`. This policy assures that your emails are properly authenticated and that no one else can spoof your domain and send them with your logo.

Here's an overview of the required parameters:

| Parameter | Purpose    | Required Value                 |
| --------- | ---------- | ------------------------------ |
| `p`       | Policy     | `p=quarantine;` or `p=reject;` |
| `pct`     | Percentage | `pct=100;`                     |

Here is an example of an adequate DMARC record:

```
"v=DMARC1; p=quarantine; pct=100; rua=mailto:dmarcreports@example.com"
```

<Note>
  For BIMI on a subdomain, the root or APEX domain must also have a DMARC policy
  of `p=quarantine` or `p=reject` in addition to the subdomain. If not, the
  subdomain will not be compliant to display a BIMI logo.
</Note>

### 2. Establish verifiable use of your logo

To display your logo in most email clients using BIMI, you need to prove ownership of your logo by obtaining a mark certificate. This process is similar to acquiring an SSL certificate for your website. You can purchase a mark certificate from various authorized vendors. We recommend [DigiCert](https://www.digicert.com/).

There are two possible mark Certificate's to verify the use of your logo:

* **Verified Mark Certificate (VMC)**: A certificate issued by a Certificate Authority (CA) that is used to verify that you are the owner of the logo you are trying to display. A VMC is avaiable if you have a trademark of your logo. With a VMC, Gmail will display a blue checkmark.
* **Common Mark Certificate (CMC)**: A certificate also issued by Certificate Authority (CA) to verify you. A CMC is available to you if you can establish that you’ve used your logo for one year. Currently, only Gmail supports a CMC.

A VMC offers the widest email client support, though the barrier of a trademark means a CMC is an easier path if you have eastablished use of your logo for one year.

Here are a some things to know before starting the certificate purchase process:

* If you don't hold a trademark for your logo or have not used your logo for a year, you will not be able to purchase a certiifcate.
* The process could take weeks, so start early and respond to their requests quickly.
* You will need to provide a [SVG Tiny P/S formatted logo](https://bimigroup.org/creating-bimi-svg-logo-files/).
* You will need to prove you own the domain by adding a DNS record.
* You will need to prove you are the owner of the trademark or logo by providing identification.
* You will need publicly available proof that your business exists. For newer startups, recommend [Yellow Pages](https://marketing.yellowpages.com/en/) or [Google Business Profiles](https://support.google.com/business/answer/3039617?hl=en) as the easiest method for proving your existence

## 3. Set your BIMI DNS Record

Once you have your VMC, you can set your BIMI DNS record. This TXT record points to the location of your VMC and your logo.

| Name           | Type | Value                                               |
| -------------- | ---- | --------------------------------------------------- |
| default.\_bimi | TXT  | v=BIMI1; l=link\_to\_logo; a=link\_to\_certificate; |

Here is an example of a BIMI record:

```
v=BIMI1; l=https://vmc.digicert.com/00-00.svg; a=https://vmc.digicert.com/00-00.pem;
```

<Tip>
  Ensure your logo uses an HTTPS URL. Mailbox providers will not display the
  logo if served from an HTTP URL.
</Tip>

It contains a publicly and programmatically accessible link to your verified logo (.svg) and a link to your VMC (.pem).

To confirm that your BIMI record is published correctly, the [BIMI working group offers a tool](https://bimigroup.org/bimi-generator/) to check it.

It often takes a few days for your logo to display in inboxes after this record propagates. Mailbox providers will also conditionally decide to show the logo based on the domain's sending email volume and reputation. A domain with a high spam or bounce rate may not have their avatar displayed.

## Reference

| Parameter | Purpose             | Example                                |
| --------- | ------------------- | -------------------------------------- |
| `v`       | The version of BIMI | `v=BIMI1`                              |
| `l`       | Logo                | `l=https://vmc.digicert.com/00-00.svg` |
| `a`       | Certificate         | `a=https://vmc.digicert.com/00-00.pem` |
| `s`       | Selector            | `s=springlogo`                         |

<Tip>
  The BIMI standard allows for multiple logos using the [selector
  parameter](https://bimigroup.org/how-and-why-to-implement-bimi-selectors/).
</Tip>

<Note>
  Having issues setting up BIMI? [We can help](https://resend.com/help).
</Note>


# Implementing DMARC
Source: https://resend.com/docs/dashboard/domains/dmarc

Implement DMARC to build trust in your domain and protect against email spoofing and unauthorized use of your domain in email messages.

## Prerequisites

Since DMARC relies on DKIM and SPF, first ensure your existing emails are passing SPF and DKIM.

* DKIM verifies the email wasn't altered in transit using cryptographic authentication.
* SPF authorizes IP addresses to send email for a domain.

If you have a [verified](/dashboard/domains/introduction) domain with Resend, it means you are already passing SPF and DKIM

## What is DMARC?

DMARC ([Domain-based Message Authentication, Reporting, and Conformance](https://dmarc.org/overview/)) is an email authentication protocol that instructs mail servers what to do if an email message fails SPF and DKIM, preventing email spoofing (forged headers). DMARC is added to a domain through a TXT record added to the domain at `_dmarc`.

By preventing spoofing, a domain can build trust with mailbox providers, as it allows them to verify that emails are authorized to send on behalf of that domain.

An email must pass either SPF or DKIM checks (but not necessarily both) to achieve DMARC compliance and be considered authenticated. A message fails DMARC if both SPF and DKIM fail on the message.

## Implementing DMARC

### 1. Add a TXT `_dmarc` Record

To start, add a flexible DMARC record to your domain.

| Name                | Type | Value                                                       |
| ------------------- | ---- | ----------------------------------------------------------- |
| \_dmarc.example.com | TXT  | `v=DMARC1; p=none; rua=mailto:dmarcreports@yourdomain.com;` |

This record is specifying a few parameters (see [Reference](#reference) section for more details):

* `v` - Version:
  This is the version of DMARC
* `p` - Policy:
  This is telling the inbox how to process messages that fail DMARC. Options are `none`, `quarantine`, `reject`. It's a best practice to use `quarantine` or `reject`, but you should only do it once you know your messages are delivering and fully passing DMARC.
* `rua` - Reporting URI of Aggregate:
  Provide a **valid address** that can receive email. The address can be a different domain than the one on which you set the DMARC policy. The aggregate report comes as an email with a `.xml` file attached that shares the IP sources of your messages and if they passed SPF or DKIM.

To ensure you don't accidentally introduce breaking changes to your email sending, we suggest starting with a policy of `p=none;` before moving to a stricter policy.

### 2. Test to Confirm Delivery and Passing

To test emails, send an email from all the applications and services your domain uses. Confirm that the messages are delivered to the inbox and that the headers show DMARC passing. Spending a few at this step is a good rule of thumb to ensure you're checking all sources of email from your domain and catch email that is sent at a different cadence than daily.

To confirm DMARC passed, you can inspect the email headers and confirm there is `dmarc=pass`.

<Tip>
  Gradually identify email sources using tools like [Google Postmaster
  Tools](https://gmail.com/postmaster/), which provides DKIM/SPF feedback.
  [DMARC monitoring
  services](https://dmarc.org/resources/products-and-services/) can aggregate
  your email sources by collecting DMARC reports, helping you discover any
  services sending email on your domain's behalf.
</Tip>

### 3. Upgrade Policy

Once you have verified DMARC is passing across all your sending, you should upgrade your Policy to `p=quarantine;`. This policy gives mailbox providers greater confidence in your domain since your domain only allows authenticated email.

| Policy        | Value                                            |
| ------------- | ------------------------------------------------ |
| p=none;       | Allow all email. Monitoring for DMARC failures.  |
| p=quarantine; | Send messages that fail DMARC to the spam folder |
| p=reject;     | Bounce delivery of emails that fail DMARC.       |

Once your policy is `p=quarantine;` or `p=reject;` you can explore setting up [BIMI](/dashboard/domains/bimi), which can provide established brands even greater sending credibility by displaying a logo as an avatar in an email client.

## Reference

<Tip>
  While the DMARC protocol includes both `pct` and `ruf` parameters, they are
  not widely followed by mailbox providers. These settings may not be respected
  or followed.
</Tip>

| Parameter | Purpose                                       | Example                           |
| --------- | --------------------------------------------- | --------------------------------- |
| `v`       | Protocol version                              | `v=DMARC1`                        |
| `pct`     | Percentage of messages subjected to filtering | `pct=20`                          |
| `ruf`     | Reporting URI for forensic reports            | `ruf=mailto:authfail@example.com` |
| `rua`     | Reporting URI of aggregate reports            | `rua=mailto:aggrep@example.com`   |
| `p`       | Policy for organizational domain              | `p=quarantine`                    |
| `sp`      | Policy for subdomains of the OD               | `sp=reject`                       |
| `adkim`   | Alignment mode for DKIM                       | `adkim=s`                         |
| `aspf`    | Alignment mode for SPF                        | `aspf=r`                          |

<Note>
  Having issues setting up DMARC? [We can help](https://resend.com/help).
</Note>


# Managing Domains
Source: https://resend.com/docs/dashboard/domains/introduction

Visualize all the domains on the Resend Dashboard.

<Warning>
  Domain not verifying? [Try
  this](/knowledge-base/what-if-my-domain-is-not-verifying).
</Warning>

## Verifying a domain

Resend sends emails using a domain you own.

We recommend using subdomains (e.g., `updates.yourdomain.com`) to isolate your sending reputation and communicate your intent. Learn more about [using subdomains](/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain).

In order to verify a domain, you must set two DNS entries:

1. [SPF](#what-are-spf-records): list of IP addresses authorized to send email on behalf of your domain
2. [DKIM](#what-are-dkim-records): public key used to verify email authenticity

These two DNS entries grant Resend permission to send email on your behalf. Once SPF and DKIM verify, you can optionally add a [DMARC record](/dashboard/domains/dmarc) to build additional trust with mailbox providers.

<Info>
  Resend requires you own your domain (i.e., not a shared or public domain).
</Info>

## View domain details

The [Domains dashboard](https://resend.com/domains) shows information about your domain name, its verification status, and history.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=feb6b86344d63199055cdaa7b15735fa" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/dashboard-domains-resend.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=01bfefe3ccfc517526d62fa7f953cbb4 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=1d9b94d0b98deb3adf26892f8294a949 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3feef54fa5b87f256d7a7f247bf82289 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=749db4f0ded23725640b0633256960e4 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fc74fbaa93b361f06a0ef8862e4b1c72 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=556ccbb31468c59963c254facc26d3f7 2500w" />

<Info>
  Need specific help with a provider? View our [knowledge base DNS
  Guides](/knowledge-base).
</Info>

## What are SPF records

Sender Policy Framework (SPF) is an email authentication standard that allows you to list all the IP addresses that are authorized to send email on behalf of your domain.

The SPF configuration is made of a TXT record that lists the IP addresses approved by the domain owner. It also includes a MX record that allows the recipient to send bounce and complaint feedback to your domain.

<img alt="SPF Records" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=630f500feba7768e05a69340e8a6dae5" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/dashboard-domains-resend-spf.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=c84bbc00070408bc9992bb4302ab605f 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=48a6d69dac78090d26fc6d6bd6db6b5d 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=23232666700bb7832fba8de233c95130 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f5b8d20b6e72a1a4128b32ec4fe9c5a9 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=585c800c0cb33341d0cf468bf9a9bb68 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d61e747071d3485f0aff6bb239db1a7a 2500w" />

## Custom Return Path

By default, Resend will use the `send` subdomain for the Return-Path address. You can change this by setting the optional `custom_return_path` parameter when [creating a domain](/api-reference/domains/create-domain) via the API or under **Advanced options** in the dashboard.

<img alt="Custom Return Path" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-custom-return-path.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=569a75fc160aad18116efc93bcebe148" data-og-width="3360" width="3360" data-og-height="2100" height="2100" data-path="images/dashboard-domains-resend-custom-return-path.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-custom-return-path.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6f4593ecf243990f3742f45a856a906f 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-custom-return-path.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b254d6c6d522a55d5c912ab300b9d21c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-custom-return-path.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bddc91c1f027754433e5214d0089423a 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-custom-return-path.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6d2bc0b11c21688ff53fc1717b21f507 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-custom-return-path.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e89880c546dd1b49f6349401ce2c267a 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-custom-return-path.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=88da06a234074796583c544f4373440c 2500w" />

For the API, optionally pass the custom return path parameter.

<CodeGroup>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  resend.domains.create({ name: 'example.com', customReturnPath: 'outbound' });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->domains->create([
    'name' => 'example.com',
    'custom_return_path' => 'outbound'
  ]);
  ```

  ```python Python theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  params: resend.Domains.CreateParams = {
    "name": "example.com",
    "custom_return_path": "outbound"
  }

  resend.Domains.create(params)
  ```

  ```ruby Ruby theme={null}
  Resend.api_key = ENV["RESEND_API_KEY"]

  params = {
    name: "example.com",
    custom_return_path: "outbound"
  }
  domain = Resend::Domains.create(params)
  puts domain
  ```

  ```go Go theme={null}
  import 	"github.com/resend/resend-go/v2"

  client := resend.NewClient("re_xxxxxxxxx")

  params := &resend.CreateDomainRequest{
      Name: "example.com",
      CustomReturnPath: "outbound",
  }

  domain, err := client.Domains.Create(params)
  ```

  ```rust Rust theme={null}
  use resend_rs::{types::CreateDomainOptions, Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let _domain = resend
      .domains
      .add(CreateDomainOptions::new("example.com").with_custom_return_path("outbound"))
      .await?;

    Ok(())
  }
  ```

  ```java Java theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          CreateDomainOptions params = CreateDomainOptions
                  .builder()
                  .name("example.com")
                  .customReturnPath("outbound")
                  .build();

          CreateDomainResponse domain = resend.domains().create(params);
      }
  }
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.DomainAddAsync( new DomainAddData {
     DomainName = "example.com",
     CustomReturnPath = "outbound"
  } );
  Console.WriteLine( "Domain Id={0}", resp.Content.Id );
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/domains' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "name": "example.com",
    "custom_return_path": "outbound"
  }'
  ```
</CodeGroup>

Custom return paths must adhere to the following rules:

* Must be 63 characters or less
* Must start with a letter, end with a letter or number, and contain only letters, numbers, and hyphens

Avoid setting values that could undermine credibility (e.g. `testing`), as they may be exposed to recipients in some email clients.

## What are DKIM records

DomainKeys Identified Mail (DKIM) is an email security standard designed to make sure that an email that claims to have come from a specific domain was indeed authorized by the owner of that domain.

The DKIM configuration is made of a TXT record that contains a public key that is used to verify the authenticity of the email.

<img alt="DKIM Records" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=345d1dc6b7c138dbd92bd6928c634bd9" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/dashboard-domains-resend-dkim.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=37e5d282deda4e727e9f002cf5b8f0dd 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=978f4a7f13387c0d721acd80a944123c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd473e4cdd467d31c1e2d4a507f5d914 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=784706a47cae7451a0200c461831bc30 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9780d5ff17771270ed33a0176bd7bd55 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=46f59e55a1a791b4a32e13bc49e5f0cd 2500w" />

## Understand a domain status

Domains can have different statuses, including:

* `not_started`: You've added a domain to Resend, but you haven't clicked on `Verify DNS Records` yet.
* `pending`: Resend is still trying to verify the domain.
* `verified`: Your domain is successfully verified for sending in Resend.
* `failed`: Resend was unable to detect the DNS records within 72 hours.
* `temporary_failure`: For a previously verified domain, Resend will periodically check for the DNS record required for verification. If at some point, Resend is unable to detect the record, the status would change to "Temporary Failure". Resend will recheck for the DNS record for 72 hours, and if it's unable to detect the record, the domain status would change to "Failure". If it's able to detect the record, the domain status would change to "Verified".

## Open and Click Tracking

Open and click tracking is disabled by default for all domains. You can enable it by clicking on the toggles within the domain settings.

<img alt="Open and Click Tracking" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-open-and-click-tracking.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b753867f46e27a252b8d8d8a93a3fedb" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/dashboard-domains-open-and-click-tracking.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-open-and-click-tracking.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6c5ef4bccc165d9274c083deeda77133 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-open-and-click-tracking.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8ccf76e39ec29b96f3958b331edc4c43 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-open-and-click-tracking.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6e5ed082462edd154ab22d647395f517 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-open-and-click-tracking.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d0c20eea121ae04af95ba1375728a9eb 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-open-and-click-tracking.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=955450d58fe48389f12fc0f28e33d96f 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-open-and-click-tracking.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=16ac8e9a32fef1e0b72cedc4f1df2dca 2500w" />

<Info>
  For best deliverability, we recommend disabling click and open tracking [for
  sensitive transactional
  emails](/dashboard/emails/deliverability-insights#disable-click-tracking).
</Info>

## How Open Tracking Works

A 1x1 pixel transparent GIF image is inserted in each email and includes a unique reference to this image file. When the image is downloaded, Resend can tell exactly which message was opened and by whom.

## How Click Tracking Works

To track clicks, Resend modifies each link in the body of the HTML email. When recipients open a link, they are sent to a Resend server, and are immediately redirected to the URL destination.

## Export your data

Admins can download your data in CSV format for the following resources:

* Emails
* Broadcasts
* Contacts
* Domains
* Logs
* API keys

<Info>Currently, exports are limited to admin users of your team.</Info>

To start, apply filters to your data and click on the "Export" button. Confirm your filters before exporting your data.

<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/exports.mp4?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1149ee4e83b4414e75a0ecaa92774c38" data-path="images/exports.mp4" />

If your exported data includes 1,000 items or less, the export will download immediately. For larger exports, you'll receive an email with a link to download your data.

All admins on your team can securely access the export for 7 days. Unavailable exports are marked as "Expired."

<Note>
  All exports your team creates are listed in the
  [Exports](https://resend.com/exports) page under **Settings** > **Team** >
  **Exports**. Select any export to view its details page. All members of your
  team can view your exports, but only admins can download the data.
</Note>


# Choosing a Region
Source: https://resend.com/docs/dashboard/domains/regions

Resend offers sending from multiple regions

Resend users have the option to send transactional and marketing emails from four different regions:

* North Virginia (us-east-1)
* Ireland (eu-west-1)
* São Paulo (sa-east-1)
* Tokyo (ap-northeast-1)

No matter where your users are, you can ensure that they receive your emails in a timely and efficient manner. You can visualize the different regions in the Resend dashboard:

<img alt="Multi Region Domains" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/multi-region-1.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0572cd0780bdcfc50ad558666dd8d7a5" data-og-width="1680" width="1680" data-og-height="1050" height="1050" data-path="images/multi-region-1.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/multi-region-1.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1e66c007fce1896c763fc18550d22611 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/multi-region-1.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b6bf26c243a6036e29c2eb61f88b84c2 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/multi-region-1.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3fa8a13d8231e8073d935324ee88a480 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/multi-region-1.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=a76983741caae59bc3c4483fb844d643 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/multi-region-1.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c9f59aca189df61d050eab515b490036 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/multi-region-1.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1bd634e8d24e32f0b7ce81c3ddd350c7 2500w" />

## Why is this important?

Especially for transactional emails like magic links, password resets, and welcome messages, users expect to receive them right away. If they don't, they might not be able to access your service right away, which could be a missed opportunity for your organization.

Here are some of the other benefits of using our multi-region email sending feature:

1. **Faster delivery:** By sending emails from the region closest to your user, you can reduce latency and ensure a faster time-to-inbox. This can be the difference between people using/buying your product or not.
2. **Easier account management:** Instead of having to maintain different accounts for each region, we're providing multi-region within the same account. That way, you aren't juggling different login credentials.
3. **Increased resilience:** In case of disruption in one region, our multi-region feature enables you to send emails from a backup domain in a separate region, guaranteeing maximum uptime.

## Get Started

To start using our multi-region email sending feature, go to **[Domains](https://resend.com/domains)**, then select the option to add a new domain.

Finally, select the region you want to send your emails.

## How to set up multi-region for the same domain

For advanced needs, you can set up multiple regions for the same domain. We recommend setting a unique subdomain for each region (e.g., us.domain.com, eu.domain.com). When sending transactional emails or marketing emails, choose the right domain for your users.

## Changing Domain Region

If you'd like to switch the region your domain is currently set to:

1. Delete your current domain in the [Domain's page](https://resend.com/domains).
2. Add the same domain again, selecting the new region.
3. Update your DNS records to point to the new domain.

For more help, please reach out to [Support](https://resend.com/help), and we can help you out.


# Add an unsubscribe link to transactional emails
Source: https://resend.com/docs/dashboard/emails/add-unsubscribe-to-transactional-emails

Learn how to give email recipients the ability to unsubscribe without searching for the unsubscribe link.

Resend currently doesn't manage contact lists for transactional emails.

If you manage your own list, you can add the `List-Unsubscribe: https://example.com/unsubscribe` header when sending emails using the Resend API.

As of Febuary 2024, your bulk messages must include a URL version in your list-unsubscribe header, `List-Unsubscribe-Post: List-Unsubscribe=One-Click`, and to allow for a `POST` request from the same URL.

When receiving a `POST`, it should return a blank page with `200 (OK)` or `202 (Accepted)`, and should show the regular unsubscribe page with the `GET` method. Ensure that users stop receiving email within 48 hours of this request.

This header allows email clients to offer an easy “Unsubscribe” option in their UI, enhancing user experience and decreasing spam complaints.

You can read more about this requirement in our [Bulk Sending Requirements blog post.](https://resend.com/blog/gmail-and-yahoo-bulk-sending-requirements-for-2024#one-click-unsubscribe)

```ts Node.js {11} theme={null}
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

await resend.emails.send({
  from: 'Acme <onboarding@resend.dev>',
  to: ['delivered@resend.dev'],
  subject: 'hello world',
  text: 'it works!',
  headers: {
    'List-Unsubscribe': '<https://example.com/unsubscribe>',
  },
});
```

## Example

<Card title="Unsubscribe url header" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-unsubscribe-url-header">
  See the full source code.
</Card>


# Attachments
Source: https://resend.com/docs/dashboard/emails/attachments

Send emails with attachments.

There are two ways to send attachments:

1. [From a remote file](#send-attachments-from-a-remote-file)
2. [From a local file](#send-attachments-from-a-local-file)

<Info>
  We currently do not support sending attachments [when using our batch
  endpoint](/api-reference/emails/send-batch-emails).
</Info>

## Send attachments from a remote file

Include the `path` parameter to send attachments from a remote file. This parameter accepts a URL to the file you want to attach.

Define the file name that will be attached using the `filename` parameter.

<CodeGroup>
  ```ts Node.js {12-13} theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'Receipt for your payment',
    html: '<p>Thanks for the payment</p>',
    attachments: [
      {
        path: 'https://resend.com/static/sample/invoice.pdf',
        filename: 'invoice.pdf',
      },
    ],
  });
  ```

  ```php PHP {10-11} theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->emails->send([
    'from' => 'Acme <onboarding@resend.dev>',
    'to' => ['delivered@resend.dev'],
    'subject' => 'Receipt for your payment',
    'html' => '<p>Thanks for the payment</p>',
    'attachments' => [
      [
        'path' => 'https://resend.com/static/sample/invoice.pdf',
        'filename' => 'invoice.pdf'
      ]
    ]
  ]);
  ```

  ```python Python {6-7} theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  attachment: resend.RemoteAttachment = {
    "path": "https://resend.com/static/sample/invoice.pdf",
    "filename": "invoice.pdf",
  }

  params: resend.Emails.SendParams = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "Receipt for your payment",
    "html": "<p>Thanks for the payment</p>",
    "attachments": [attachment],
  }

  resend.Emails.send(params)
  ```

  ```rb Ruby {12-13} theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  params = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "Receipt for your payment",
    "html": "<p>Thanks for the payment</p>",
    "attachments": [
      {
        "path": "https://resend.com/static/sample/invoice.pdf",
        "filename": 'invoice.pdf',
      }
    ]
  }

  Resend::Emails.send(params)
  ```

  ```go Go {12-13} theme={null}
  import (
  	"fmt"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
    ctx := context.TODO()
    client := resend.NewClient("re_xxxxxxxxx")

    attachment := &resend.Attachment{
      Path:  "https://resend.com/static/sample/invoice.pdf",
      Filename: "invoice.pdf",
    }

    params := &resend.SendEmailRequest{
        From:        "Acme <onboarding@resend.dev>",
        To:          []string{"delivered@resend.dev"},
        Subject:     "Receipt for your payment",
        Html:        "<p>Thanks for the payment</p>",
        Attachments: []*resend.Attachment{attachment},
    }

    sent, err := client.Emails.SendWithContext(ctx, params)

    if err != nil {
      panic(err)
    }
    fmt.Println(sent.Id)
  }
  ```

  ```rust Rust {12-13} theme={null}
  use resend_rs::types::{CreateAttachment, CreateEmailBaseOptions};
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let from = "Acme <onboarding@resend.dev>";
    let to = ["delivered@resend.dev"];
    let subject = "Receipt for your payment";

    let path = "https://resend.com/static/sample/invoice.pdf";
    let filename = "invoice.pdf";

    let email = CreateEmailBaseOptions::new(from, to, subject)
      .with_html("<p>Thanks for the payment</p>")
      .with_attachment(CreateAttachment::from_path(path).with_filename(filename));

    let _email = resend.emails.send(email).await?;

    Ok(())
  }
  ```

  ```java Java {8-9} theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          Attachment att = Attachment.builder()
                  .path("https://resend.com/static/sample/invoice.pdf")
                  .fileName("invoice.pdf")
                  .build();

          CreateEmailOptions params = CreateEmailOptions.builder()
                  .from("Acme <onboarding@resend.dev>")
                  .to("delivered@resend.dev")
                  .subject("Receipt for your payment")
                  .html("<p>Thanks for the payment</p>")
                  .attachments(att)
                  .build();

          CreateEmailResponse data = resend.emails().send(params);
      }
  }
  ```

  ```csharp .NET {14-18} theme={null}
  using Resend;
  using System.Collections.Generic;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var message = new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "delivered@resend.dev",
      Subject = "Receipt for your payment",
      HtmlBody = "<p>Thanks for the payment</p>",
  };

  message.Attachments = new List<EmailAttachment>();
  message.Attachments.Add( new EmailAttachment() {
    Filename = "invoice.pdf",
    Path = "https://resend.com/static/sample/invoice.pdf",
  } );

  var resp = await resend.EmailSendAsync( message );
  Console.WriteLine( "Email Id={0}", resp.Content );
  ```

  ```bash cURL {11-12} theme={null}
  curl -X POST 'https://api.resend.com/emails' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "Receipt for your payment",
    "html": "<p>Thanks for the payment</p>",
    "attachments": [
      {
        "path": "https://resend.com/static/sample/invoice.pdf",
        "filename": "invoice.pdf"
      }
    ]
  }'
  ```
</CodeGroup>

## Send attachments from a local file

Include the `content` parameter to send attachments from a local file. This parameter accepts the Base64 encoded content of the file you want to attach.

Define the file name that will be attached using the `filename` parameter.

<CodeGroup>
  ```ts Node.js {16-17} theme={null}
  import { Resend } from 'resend';
  import fs from 'fs';

  const resend = new Resend('re_xxxxxxxxx');

  const filepath = `${__dirname}/static/invoice.pdf`;
  const attachment = fs.readFileSync(filepath).toString('base64');

  await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'Receipt for your payment',
    text: '<p>Thanks for the payment</p>',
    attachments: [
      {
        content: attachment,
        filename: 'invoice.pdf',
      },
    ],
  });
  ```

  ```php PHP {10-11} theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->emails->send([
    'from' => 'Acme <onboarding@resend.dev>',
    'to' => ['delivered@resend.dev'],
    'subject' => 'Receipt for your payment',
    'html' => '<p>Thanks for the payment</p>',
    'attachments' => [
      [
        'filename' => 'invoice.pdf',
        'content' => $invoiceBuffer
      ]
    ]
  ]);
  ```

  ```python Python {10} theme={null}
  import os
  import resend

  resend.api_key = "re_xxxxxxxxx"

  f: bytes = open(
    os.path.join(os.path.dirname(__file__), "../static/invoice.pdf"), "rb"
  ).read()

  attachment: resend.Attachment = {"content": list(f), "filename": "invoice.pdf"}

  params: resend.Emails.SendParams = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "Receipt for your payment",
    "html": "<p>Thanks for the payment</p>",
    "attachments": [attachment],
  }

  resend.Emails.send(params)
  ```

  ```rb Ruby {14-15} theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  file = IO.read("invoice.pdf")

  params = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "Receipt for your payment",
    "html": "<p>Thanks for the payment</p>",
    "attachments": [
      {
        "content": file.bytes,
        "filename": 'invoice.pdf',
      }
    ]
  }

  Resend::Emails.send(params)
  ```

  ```go Go {19-20} theme={null}
  import (
  	"fmt"
  	"os"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
    ctx := context.TODO()
    client := resend.NewClient("re_xxxxxxxxx")

    pwd, _ := os.Getwd()
    f, err := os.ReadFile(pwd + "/static/invoice.pdf")
    if err != nil {
      panic(err)
    }

    attachment := &resend.Attachment{
      Content:  f,
      Filename: "invoice.pdf",
    }

    params := &resend.SendEmailRequest{
        From:        "Acme <onboarding@resend.dev>",
        To:          []string{"delivered@resend.dev"},
        Subject:     "Receipt for your payment",
        Html:        "<p>Thanks for the payment</p>",
        Attachments: []*resend.Attachment{attachment},
    }

    sent, err := client.Emails.SendWithContext(ctx, params)

    if err != nil {
      panic(err)
    }
    fmt.Println(sent.Id)
  }
  ```

  ```rust Rust {22} theme={null}
  use std::fs::File;
  use std::io::Read;

  use resend_rs::types::{CreateAttachment, CreateEmailBaseOptions};
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let from = "Acme <onboarding@resend.dev>";
    let to = ["delivered@resend.dev"];
    let subject = "Receipt for your payment";

    let filename = "invoice.pdf";
    let mut f = File::open(filename).unwrap();
    let mut invoice = Vec::new();
    f.read_to_end(&mut invoice).unwrap();

    let email = CreateEmailBaseOptions::new(from, to, subject)
      .with_html("<p>Thanks for the payment</p>")
      .with_attachment(CreateAttachment::from_content(invoice).with_filename(filename));

    let _email = resend.emails.send(email).await?;

    Ok(())
  }
  ```

  ```java Java {8-9} theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          Attachment att = Attachment.builder()
                  .fileName("invoice.pdf")
                  .content("invoiceBuffer")
                  .build();

          CreateEmailOptions params = CreateEmailOptions.builder()
                  .from("Acme <onboarding@resend.dev>")
                  .to("delivered@resend.dev")
                  .subject("Receipt for your payment")
                  .html("<p>Thanks for the payment</p>")
                  .attachments(att)
                  .build();

          CreateEmailOptions params = CreateEmailOptions.builder()
      }
  }
  ```

  ```csharp .NET {15-19} theme={null}
  using Resend;
  using System.Collections.Generic;
  using System.IO;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var message = new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "delivered@resend.dev",
      Subject = "Receipt for your payment",
      HtmlBody = "<p>Thanks for the payment</p>",
  };

  message.Attachments = new List<EmailAttachment>();
  message.Attachments.Add( new EmailAttachment() {
    Filename = "invoice.pdf",
    Content = await File.ReadAllBytesAsync( "invoice.pdf" ),
  } );

  var resp = await resend.EmailSendAsync( message );
  Console.WriteLine( "Email Id={0}", resp.Content );
  ```

  ```bash cURL {11-12} theme={null}
  curl -X POST 'https://api.resend.com/emails' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "Receipt for your payment",
    "html": "<p>Thanks for the payment</p>",
    "attachments": [
      {
        "content": "UmVzZW5kIGF0dGFjaG1lbnQgZXhhbXBsZS4gTmljZSBqb2Igc2VuZGluZyB0aGUgZW1haWwh%",
        "filename": "invoice.txt"
      }
    ]
  }'
  ```
</CodeGroup>

## Embed Images using CID

You can optionally embed an image in the HTML body of the email. Both remote and local attachments are supported. All attachment requirements, options, and limitations apply to embedded inline images as well.

Embedding images requires two steps:

**1. Add the CID in the email HTML.**

Use the prefix `cid:` to reference the ID in the `src` attribute of an image tag in the HTML body of the email.

```html  theme={null}
<img src="cid:logo-image" />
```

**2. Reference the CID in the attachment**

Include the `content_id` parameter in the attachment object (e.g. `content_id: "logo-image"`).

The ID is an arbitrary string set by you, and must be less than 128 characters.

Learn more about [embedding images](/dashboard/emails/embed-inline-images).

## Attachment Limitations

* Emails can be no larger than 40MB (including attachments after Base64 encoding).
* Not all file types are supported. See the list of [unsupported file types](/knowledge-base/what-attachment-types-are-not-supported).
* Emails with attachments cannot be scheduled.
* Emails with attachments cannot be sent using our [batching endpoint](/api-reference/emails/send-batch-emails).

<Note>
  All attachments (including inline images) do not currently display in the
  [emails dashboard](https://resend.com/emails) when previewing an email's HTML.
</Note>

## Examples

<CardGroup>
  <Card title="Attachments with Next.js (remote file)" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-attachments">
    See the full source code.
  </Card>

  <Card title="Attachments with Next.js (local file)" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-attachments-content">
    See the full source code.
  </Card>
</CardGroup>


# Batch Validation Modes
Source: https://resend.com/docs/dashboard/emails/batch-validation-modes

Control how batch validation is performed.

The batch validation header controls how emails are validated in batch sending.

`x-batch-validation`

Choose between `strict` and `permissive` mode.

## Strict mode (default)

Strict mode sends the batch only if all emails in the batch request are valid.

* **Atomic behavior**: if any email in the batch fails validation, the entire batch is rejected
* **Error details**: only the validation error causing the failure is returned

If the header is omitted, strict mode applies.

## Permissive mode

Permissive mode processes all emails, allowing for partial success and returns the following two arrays:

* **data**: array of objects for all created emails, each containing an email `id`.
* **errors**: array of objects for emails which could not be created due to validation errors. Each object contains the following properties:
  * `index`: index of the email in the batch request
  * `message`: error message identifying the validation error

## How to use batch validation modes

<CodeGroup>
  ```ts Node.js {21} theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, errors } = await resend.batch.send(
    [
      {
        from: 'Acme <onboarding@resend.dev>',
        to: ['foo@gmail.com'],
        subject: 'hello world',
        html: '<h1>it works!</h1>',
      },
      {
        from: 'Acme <onboarding@resend.dev>',
        to: ['bar@outlook.com'],
        subject: 'world hello',
        html: '<p>it works!</p>',
      },
    ],
    {
      batchValidation: 'permissive',
    },
  );
  ```

  ```php PHP {19} theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->batch->send(
    [
      [
        'from' => 'Acme <onboarding@resend.dev>',
        'to' => ['foo@gmail.com'],
        'subject' => 'hello world',
        'html' => '<h1>it works!</h1>',
      ],
      [
        'from' => 'Acme <onboarding@resend.dev>',
        'to' => ['bar@outlook.com'],
        'subject' => 'world hello',
        'html' => '<p>it works!</p>',
      ]
    ],
    [
      'batch_validation' => 'permissive',
    ]
  );
  ```

  ```py Python {22} theme={null}
  import resend
  from typing import List

  resend.api_key = "re_xxxxxxxxx"

  params: List[resend.Emails.SendParams] = [
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["foo@gmail.com"],
      "subject": "hello world",
      "html": "<h1>it works!</h1>",
    },
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["bar@outlook.com"],
      "subject": "world hello",
      "html": "<p>it works!</p>",
    }
  ]

  options: resend.Batch.SendOptions = {
    "batch_validation": "permissive",
  }

  resend.Batch.send(params, options)
  ```

  ```rb Ruby {22} theme={null}
  require "resend"

  Resend.api_key = 're_xxxxxxxxx'

  params = [
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["foo@gmail.com"],
      "subject": "hello world",
      "html": "<h1>it works!</h1>",
    },
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["bar@outlook.com"],
      "subject": "world hello",
      "html": "<p>it works!</p>",
    }
  ]

  Resend::Batch.send(
    params,
    options: { batch_validation: "permissive" }
  )
  ```

  ```go Go {32} theme={null}
  package examples

  import (
  	"fmt"
  	"os"

  	"github.com/resend/resend-go/v2"
  )

  func main() {

    ctx := context.TODO()

    client := resend.NewClient("re_xxxxxxxxx")

    var batchEmails = []*resend.SendEmailRequest{
      {
        From:    "Acme <onboarding@resend.dev>",
        To:      []string{"foo@gmail.com"},
        Subject: "hello world",
        Html:    "<h1>it works!</h1>",
      },
      {
        From:    "Acme <onboarding@resend.dev>",
        To:      []string{"bar@outlook.com"},
        Subject: "world hello",
        Html:    "<p>it works!</p>",
      },
    }

    options := &resend.BatchSendEmailOptions{
      BatchValidation: "permissive",
    }

    sent, err := client.Batch.SendWithOptions(ctx, batchEmails, options)

    if err != nil {
      panic(err)
    }
    fmt.Println(sent.Data)
  }
  ```

  ```rust Rust {25} theme={null}
  use resend_rs::types::{BatchValidation, CreateEmailBaseOptions};
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let emails = vec![
      CreateEmailBaseOptions::new(
        "Acme <onboarding@resend.dev>",
        vec!["foo@gmail.com"],
        "hello world",
      )
      .with_html("<h1>it works!</h1>"),
      CreateEmailBaseOptions::new(
        "Acme <onboarding@resend.dev>",
        vec!["bar@outlook.com"],
        "world hello",
      )
      .with_html("<p>it works!</p>"),
    ];

    let _emails = resend
      .batch
      .send_with_batch_validation(emails, BatchValidation::Permissive)
      .await?;

    Ok(())
  }
  ```

  ```java Java {23} theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {

          Resend resend = new Resend("re_xxxxxxxxx");

          CreateEmailOptions firstEmail = CreateEmailOptions.builder()
              .from("Acme <onboarding@resend.dev>")
              .to("foo@gmail.com")
              .subject("hello world")
              .html("<h1>it works!</h1>")
              .build();

          CreateEmailOptions secondEmail = CreateEmailOptions.builder()
              .from("Acme <onboarding@resend.dev>")
              .to("bar@outlook.com")
              .subject("world hello")
              .html("<p>it works!</p>")
              .build();

          RequestOptions options = RequestOptions.builder()
              .add("x-batch-validation", "permissive")
              .build();

          CreateBatchEmailsResponse data = resend.batch()
            .send(
              Arrays.asList(firstEmail, secondEmail),
              options
            );
      }
  }
  ```

  ```csharp .NET {5} theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var mail1 = new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "foo@gmail.com",
      Subject = "hello world",
      HtmlBody = "<p>it works!</p>",
  };

  var mail2 = new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "bar@outlook.com",
      Subject = "hello world",
      HtmlBody = "<p>it works!</p>",
  };

  var resp = await resend.EmailBatchAsync(
      [ mail1, mail2 ],
      EmailBatchValidationMode.Permissive
  );

  Console.WriteLine( "Nr Emails={0}", resp.Content.Data.Count );

  if ( resp.Content.Errors?.Count > 0 )
  {
      foreach ( var error in resp.Content.Errors )
      {
          Console.WriteLine( "Error at index {0}: {1}", error.Index, error.Message );
      }
  }
  ```

  ```bash cURL {4} theme={null}
  curl -X POST 'https://api.resend.com/emails/batch' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -H 'x-batch-validation: permissive' \
       -d $'[
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["foo@gmail.com"],
      "subject": "hello world",
      "html": "<h1>it works!</h1>"
    },
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["bar@outlook.com"],
      "subject": "world hello",
      "html": "<p>it works!</p>"
    }
  ]'
  ```
</CodeGroup>

## Example response

```json Response theme={null}
{
  "data": [
    {
      "id": "ae2014de-c168-4c61-8267-70d2662a1ce1"
    },
    {
      "id": "faccb7a5-8a28-4e9a-ac64-8da1cc3bc1cb"
    }
  ],
  // the `errors` array is only present in permissive batch validation mode
  "errors": [
    {
      "index": 2, // 0-indexed (first item is index 0)
      "message": "The `to` field is missing."
    }
  ]
}
```

## Which errors are returned?

Only `permissive` mode returns an errors array, since the entire batch is rejected if any email fails validation in `strict` mode.

When an email in your payload causes an error, that email cannot be created, so an error object is returned.

Reasons your email may cause an error include:

* Required fields are missing.
* Fields contain invalid data.
* The batch contains more than 100 emails.

Importantly, this means the following:

* The email will not appear in the dashboard, since it could not be created.
* The error object will be included in the `errors` array.
* The only way to understand why the email failed is to inspect the returned error object.


# Custom Headers
Source: https://resend.com/docs/dashboard/emails/custom-headers

Customize how emails are sent with your own headers.

Email headers are typically hidden from the end user but are crucial for deliverability. They include information about the sender, receiver, timestamp, and more.

Resend already includes all the necessary headers for you, but now you can also add your own custom headers.

This is a fairly advanced feature, but it can be useful for a few things:

* Prevent threading on Gmail with the **`X-Entity-Ref-ID`** header ([Example](https://github.com/resend/resend-examples/tree/main/with-prevent-thread-on-gmail))
* Include a shortcut for users to unsubscribe with the **`List-Unsubscribe`** header ([Example](https://github.com/resend/resend-examples/tree/main/with-unsubscribe-url-header))

Here's how you can add custom headers to your emails:

<CodeGroup>
  ```ts Node.js {11} theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'hello world',
    html: '<p>it works!</p>',
    headers: {
      'X-Entity-Ref-ID': 'xxx_xxxx',
    },
  });
  ```

  ```php PHP {9} theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->emails->send([
    'from' => 'Acme <onboarding@resend.dev>',
    'to' => ['delivered@resend.dev'],
    'subject' => 'hello world',
    'html' => '<p>it works!</p>',
    'headers' => [
      'X-Entity-Ref-ID' => 'xxx_xxxx',
    ]
  ]);
  ```

  ```python Python {11} theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  params: resend.Emails.SendParams = {
    "from": "onboarding@resend.dev",
    "to": ["delivered@resend.dev"],
    "subject": "hi",
    "html": "<p>it works!</p>",
    "headers": {
      "X-Entity-Ref-ID": "xxx_xxxx"
    }
  }

  email = resend.Emails.send(params)
  print(email)
  ```

  ```rb Ruby {11} theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  params = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>",
    "headers": {
      "X-Entity-Ref-ID": "123"
    },
  }

  sent = Resend::Emails.send(params)
  puts sent
  ```

  ```go Go {17} theme={null}
  import (
  	"fmt"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
    ctx := context.TODO()
    client := resend.NewClient("re_xxxxxxxxx")

    params := &resend.SendEmailRequest{
        From:        "Acme <onboarding@resend.dev>",
        To:          []string{"delivered@resend.dev"},
        Subject:     "hello world",
        Html:        "<p>it works!</p>",
        Headers:     map[string]string{
          "X-Entity-Ref-ID": "xxx_xxxx",
        }
    }

    sent, err := client.Emails.SendWithContext(ctx, params)

    if err != nil {
      panic(err)
    }
    fmt.Println(sent.Id)
  }
  ```

  ```rust Rust {14} theme={null}
  use resend_rs::types::{Attachment, CreateEmailBaseOptions, Tag};
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let from = "Acme <onboarding@resend.dev>";
    let to = ["delivered@resend.dev"];
    let subject = "hello world";

    let email = CreateEmailBaseOptions::new(from, to, subject)
      .with_html("<p>it works!</p>")
      .with_header("X-Entity-Ref-ID", "xxx_xxxx");

    let _email = resend.emails.send(email).await?;

    Ok(())
  }
  ```

  ```java Java {13} theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          CreateEmailOptions params = CreateEmailOptions.builder()
                  .from("Acme <onboarding@resend.dev>")
                  .to("delivered@resend.dev")
                  .subject("hello world")
                  .html("<p>it works!</p>")
                  .headers(Map.of(
                      "X-Entity-Ref-ID", "xxx_xxxx"
                  ))
                  .build();

          CreateEmailResponse data = resend.emails().send(params);
      }
  }
  ```

  ```csharp .NET {12-15} theme={null}
  using Resend;
  using System.Collections.Generic;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var message = new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "delivered@resend.dev",
      Subject = "hello world",
      HtmlBody = "<p>it works!</p>",
      Headers = new Dictionary<string, string>()
      {
          { "X-Entity-Ref-ID", "xxx_xxxx" },
      },
  };

  var resp = await resend.EmailSendAsync( message );
  Console.WriteLine( "Email Id={0}", resp.Content );
  ```

  ```bash cURL {10} theme={null}
  curl -X POST 'https://api.resend.com/emails' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>",
    "headers": {
      "X-Entity-Ref-ID": "xxx_xxxx"
    }
  }'
  ```
</CodeGroup>


# Deliverability Insights
Source: https://resend.com/docs/dashboard/emails/deliverability-insights

Improve your deliverability with tailored insights based on your sending.

When you view your email within Resend, there is a "Insights" option. When selected, this will run eight deliverability best practice checks on your email and recommend possible changes to improve deliverability.

<img alt="Deliverability Insights" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-1.jpg?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=78f3941a7a90d4546200c6cba6607270" data-og-width="3357" width="3357" data-og-height="2101" height="2101" data-path="images/deliverability-insights-1.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-1.jpg?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=10cbd1aec848ad402ae285984ee33c74 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-1.jpg?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8e503253073f8943cd8ebebeb917daad 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-1.jpg?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1dea6f4d95e439047c40fadb11df21a7 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-1.jpg?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1c625d077d36c6c95833fa043b9e0f49 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-1.jpg?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b705bffec5f0cce119f2c90e73ab5efe 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-1.jpg?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=09087699e0b0b4de5f341a179ba8373c 2500w" />

If a check passes, you'll get a nice green check. Resend will provide advice if it fails. We break these into two categories: Attention and Improvements.

## Attention Insights

Changes to your email that can improve deliverability.

<img alt="Attention Insights" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-2.jpg?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=158b0b42d45e7172f150a8818671a03e" data-og-width="2058" width="2058" data-og-height="714" height="714" data-path="images/deliverability-insights-2.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-2.jpg?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3cbdb326168584456f2a793c79387c86 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-2.jpg?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=07bb0c4f63026da319c189047137a8d6 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-2.jpg?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d1a074eefceefdad5b445b2cf543b3eb 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-2.jpg?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b931088f6b83c347decd6361efd24168 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-2.jpg?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d6ee6b74301f50a183e43ccddd9dd551 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-2.jpg?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c5e4b12221c033d54d12dd689bcd0203 2500w" />

#### Link URLs match sending domain

Ensure that the URLs in your email match the sending domain. Mismatched URLs can trigger spam filters.

For example, if your sending domain is `@widgets.com`, ensure links within the message point back to `https://widgets.com`.

#### DMARC Record is Valid

DMARC is a TXT record published in the DNS that specifies how email receivers should handle messages from your domain that don’t pass SPF or DKIM validation. [A valid DMARC record](/dashboard/domains/dmarc) can help improve email deliverability.

Starting in 2024, Gmail and Yahoo require senders to have a DMARC record published. When [viewing your domain](https://resend.com/domains) in Resend, we provide a suggested DMARC record if you’re unsure what to publish.

#### Include Plain Text Version

Including a plain text version of your email ensures that your message is accessible to all recipients, including those who have email clients that do not support HTML.

If you're using Resend's API, [plain text is passed via the `text` parameter](https://resend.com/docs/api-reference/emails/send-email).

This can also generate plain text using [React Email](https://react.email/docs/utilities/render#4-convert-to-plain-text).

#### Don't use "no-reply"

Indicating that this is a one-way communication decreases trust. Some email providers use engagement (email replies) when deciding how to filter your email. A valid email address allows you to communicate with your recipients easily if they have questions.

#### Keep email body size small

Gmail limits the size of each email message to 102 KB. Once that limit is reached, the remaining content is clipped and hidden behind a link to view the entire message. Keep your email body size small to avoid this issue.

This check will show the current size of your email.

## Improvement Insights

If you're diagnosing a deliverability issue, changing your email practices could be helpful.

<img alt="Improvement Insights" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-3.jpg?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=64e4640b71c022a296f423ce4afdfbc8" data-og-width="2058" width="2058" data-og-height="844" height="844" data-path="images/deliverability-insights-3.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-3.jpg?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b6cc20f063c66c7cc88487c5b7269d8c 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-3.jpg?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d9ac8759f9c69dfec8d4bcea3e77cd60 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-3.jpg?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=34990ef6c6f425948f777f2267e5fdcc 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-3.jpg?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=cb2c2ae6bc5cb02d217b65b04cc66081 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-3.jpg?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c408a0b614cf29bfcc33fa7a56c4a551 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deliverability-insights-3.jpg?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=27d1aa0f9db84c83b034020c28c06fd5 2500w" />

#### Use a Subdomain

Using a subdomain instead of the root domain helps segment your sending by purpose. This protects different types of sending from impacting the reputation of others and clearly shows the sending purpose.

#### Disable Click Tracking

Click tracking modifies links, sometimes causing spam filters to flag emails as suspicious or phishing attempts. Disabling click tracking can help with email deliverability, especially for sensitive transactional emails like login or email verification.

If on, you can [disable click tracking on your domain in Resend](https://resend.com/domains).

#### Disable Open Tracking

Spam filters are sensitive to tracking pixels, flagging them as potential spam. Without these tracking elements, emails may bypass these filters more effectively, especially for sensitive transactional emails like login or email verification.

If on, you can [disable open tracking on your domain in Resend](https://resend.com/domains).


# Email Bounces
Source: https://resend.com/docs/dashboard/emails/email-bounces

Understanding and resolving delivery issues.

## Why does an email bounce?

A bounce happens when an email cannot be delivered to the person it was meant for, and is returned to the sender. It essentially "bounces" back to the person who sent it.

Some reasons include invalid email addresses, full mailboxes, technical issues with email servers, spam filters, message size restrictions, or blacklisting of the sender's email server.

## Bounce Types and Subtypes

When an email bounces, Resend receives a message from the recipient's mail server. The bounce message explains why the delivery failed so the sender can fix the issue.

There are three types of bounces:

1. `Permanent` - also known as "hard bounce,” where the recipient's mail server rejects the email and will never be delivered.

   * `General` - The recipient's email provider sent a hard bounce message.
   * `NoEmail` - It was not possible to retrieve the recipient email address from the bounce message.
   * `Suppressed` - The recipient's email address is on the suppression list because it has a history of producing hard bounces.
   * `OnAccountSuppressionList` - Resend has suppressed sending to this address because it has previously "hard bounced."

2. `Transient` - also known as "soft bounce,” where the recipient's mail server rejects the email but it could be delivered in the future.

   * `General` - The recipient's email provider sent a general bounce message. You might be able to send a message to the same recipient in the future if the issue that caused the message to bounce is resolved.
   * `MailboxFull` - The recipient's email provider sent a bounce message because the recipient's inbox was full. You might be able to send to the same recipient in the future when the mailbox is no longer full.
   * `MessageTooLarge` - The recipient's email provider sent a bounce message because message you sent was too large. You might be able to send a message to the same recipient if you reduce the size of the message.
   * `ContentRejected` - The recipient's email provider sent a bounce message because the message you sent contains content that the provider doesn't allow. You might be able to send a message to the same recipient if you change the content of the message.
   * `AttachmentRejected` - The recipient's email provider sent a bounce message because the message contained an unacceptable attachment. For example, some email providers may reject messages with attachments of a certain file type, or messages with very large attachments. You might be able to send a message to the same recipient if you remove or change the content of the attachment.

<Tip>
  Sometimes, inboxes use autoresponders to signal a bounce. A `transient` status
  could mean it's related to the autoresponder, and it's not a permanent issue.
</Tip>

3. `Undetermined` - where the recipient's email server bounced, but the bounce message didn't contain enough information for Resend to determine the underlying reason.
   * `Undetermined` - The recipient's email provider sent a bounce message. The bounce message didn't contain enough information for Resend to determine the reason for the bounce.

## Viewing Bounce Details in Resend

You can see the bounce details by clicking on the email, and hovering over the `Bounced` label.

<img alt="Email Bounce Notification" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-bounce-details-1.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f0f99293137b8de4a9862b05cfd87d74" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/email-bounce-details-1.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-bounce-details-1.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0fd440475bc204251169761afee247d4 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-bounce-details-1.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5d0c2fa42b7e8173818e5ed4f27dabc0 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-bounce-details-1.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=a7777878ad51806c9c2368069a663cf7 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-bounce-details-1.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ed292d9d5aef5c9ef159b7d026e89d77 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-bounce-details-1.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=85dec0cbae94dae7a300487c6748af36 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-bounce-details-1.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=060e633e0c298de6faaddae8c77d927f 2500w" />

Once you click **See Details**, the drawer will open on the right side of your screen with the bounce type, subtype, along with suggestions on how to proceed.

If the email is on the suppression list, you can click **Remove from Suppression List** to remove it.

<img alt="Email Bounce Drawer" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=baf9f0a40313b856be978b728fb1d01c" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/email-suppression-list-2.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5cd771fb178129ea877cb7a8c4ae7232 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1afcefe9521079a01a864660d4cadb3f 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=754178c89bd180234e114b26931ad834 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ba26e1577b0f049e9d52b087004ed564 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0e3a00dfb4ff6af14ab63702bb457fba 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e08834d9cda300da7cb0473c4d100b10 2500w" />


# Email Templates
Source: https://resend.com/docs/dashboard/emails/email-templates

Use high quality, unstyled components for your transactional emails using React and Typescript

While you can generate HTML for your emails using any method, we recommend [React Email](https://react.email/) for React developers. It makes it easy to create email templates with React and TailwindCSS.

* [Getting started quickguide](https://react.email/docs/getting-started/automatic-setup)
* [Email components](https://react.email/components)
* [Email examples](https://react.email/templates)

Each example includes a preview, the React code, the rendered HTML, and the plain text version of the email.

<video autoPlay muted loop src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-templates.mp4?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=53e3e044cf3c77ef9a3b5a124dda02b8" data-path="images/email-templates.mp4" />


# Embed Inline Images
Source: https://resend.com/docs/dashboard/emails/embed-inline-images

Send emails with inline images.

You can optionally embed an image in the HTML body of the email. This allows you to include images without needing to host them in an external server.

<Info>
  We currently do not support sending attachments (including inline images)
  [when using our batch endpoint](/api-reference/emails/send-batch-emails).
</Info>

<Steps>
  <Step title="Add the CID in the email HTML.">
    Use the prefix `cid:` to reference the ID in the `src` attribute of an image tag in the HTML body of the email.

    ```html  theme={null}
      <img src="cid:logo-image">
    ```
  </Step>

  <Step title="Reference the CID in the attachment">
    Include the `content_id` parameter in the attachment object (e.g. `content_id: "logo-image"`).

    ```bash  theme={null}
    "attachments": [
        {
          "path": "https://resend.com/static/sample/logo.png",
          "filename": "logo.png",
          "content_id": "logo-image"
        }
      ]
    ```

    The ID is an arbitrary string set by you, and must be less than 128 characters.
  </Step>
</Steps>

## Implementation details

Both remote and local attachments are supported. All attachment [requirements, options, and limitations](/dashboard/emails/attachments) apply to inline images as well.

As with all our features, inline images are available across all our SDKs.

### Remote image example

<CodeGroup>
  ```ts Node.js {9, 14} theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'Thank you for contacting us',
    html: '<p>Here is our <img src="cid:logo-image"/> inline logo</p>',
    attachments: [
      {
        path: 'https://resend.com/static/sample/logo.png',
        filename: 'logo.png',
        contentId: 'logo-image',
      },
    ],
  });
  ```

  ```php PHP {7,12} theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->emails->send([
    'from' => 'Acme <onboarding@resend.dev>',
    'to' => ['delivered@resend.dev'],
    'subject' => 'Thank you for contacting us',
    'html' => '<p>Here is our <img src="cid:logo-image"/> inline logo</p>',
    'attachments' => [
      [
        'path' => 'https://resend.com/static/sample/logo.png',
        'filename' => 'logo.png',
        'content_id' => 'logo-image',
      ]
    ]
  ]);
  ```

  ```python Python {8,15} theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  attachment: resend.RemoteAttachment = {
    "path": "https://resend.com/static/sample/logo.png",
    "filename": "logo.png",
    "content_id": "logo-image",
  }

  params: resend.Emails.SendParams = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "Thank you for contacting us",
    "html": "<p>Here is our <img src=\"cid:logo-image\"/> inline logo</p>",
    "attachments": [attachment],
  }

  resend.Emails.send(params)
  ```

  ```rb Ruby {9, 14} theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  params = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "Thank you for contacting us",
    "html": "<p>Here is our <img src=\"cid:logo-image\"/> inline logo</p>",
    "attachments": [
      {
        "path": "https://resend.com/static/sample/logo.png",
        "filename": 'logo.png',
        "content_id": "logo-image",
      }
    ]
  }

  Resend::Emails.send(params)
  ```

  ```go Go {14, 21} theme={null}
  import (
  	"fmt"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
    ctx := context.TODO()
    client := resend.NewClient("re_xxxxxxxxx")

    attachment := &resend.Attachment{
      Path:  "https://resend.com/static/sample/logo.png",
      Filename: "logo.png",
      ContentId: "logo-image",
    }

    params := &resend.SendEmailRequest{
        From:        "Acme <onboarding@resend.dev>",
        To:          []string{"delivered@resend.dev"},
        Subject:     "Thank you for contacting us",
        Html:        "<p>Here is our <img src=\"cid:logo-image\"/> inline logo</p>",
        Attachments: []*resend.Attachment{attachment},
    }

    sent, err := client.Emails.SendWithContext(ctx, params)

    if err != nil {
      panic(err)
    }
    fmt.Println(sent.Id)
  }
  ```

  ```rust Rust {14, 17} theme={null}
  use resend_rs::types::{CreateAttachment, CreateEmailBaseOptions};
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let from = "Acme <onboarding@resend.dev>";
    let to = ["delivered@resend.dev"];
    let subject = "Thank you for contacting us";

    let path = "https://resend.com/static/sample/logo.png";
    let filename = "logo.png";
    let content_id = "logo-image";

    let email = CreateEmailBaseOptions::new(from, to, subject)
      .with_html("<p>Here is our <img src=\"cid:logo-image\"/> inline logo</p>")
      .with_attachment(
        CreateAttachment::from_path(path)
          .with_filename(filename)
          .with_content_id(content_id),
      );

    let _email = resend.emails.send(email).await?;

    Ok(())
  }
  ```

  ```java Java {10, 17} theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          Attachment att = Attachment.builder()
                  .path("https://resend.com/static/sample/logo.png")
                  .fileName("logo.png")
                  .ContentId("logo-image")
                  .build();

          CreateEmailOptions params = CreateEmailOptions.builder()
                  .from("Acme <onboarding@resend.dev>")
                  .to("delivered@resend.dev")
                  .subject("Thank you for contacting us")
                  .html("<p>Here is our <img src=\"cid:logo-image\"/> inline logo</p>")
                  .attachments(att)
                  .build();

          CreateEmailResponse data = resend.emails().send(params);
      }
  }
  ```

  ```csharp .NET {11, 18} theme={null}
  using Resend;
  using System.Collections.Generic;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var message = new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "delivered@resend.dev",
      Subject = "Thank you for contacting us",
      HtmlBody = "<p>Here is our <img src=\"cid:logo-image\"/> inline logo</p>",
  };

  message.Attachments = new List<EmailAttachment>();
  message.Attachments.Add( new EmailAttachment() {
    Filename = "logo.png",
    Path = "https://resend.com/static/sample/logo.png",
    ContentId = "logo-image",
  } );

  var resp = await resend.EmailSendAsync( message );
  Console.WriteLine( "Email Id={0}", resp.Content );
  ```

  ```bash cURL {8,13} theme={null}
  curl -X POST 'https://api.resend.com/emails' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "Thank you for contacting us",
    "html": "<p>Here is our <img src=\"cid:logo-image\"/> inline logo</p>",
    "attachments": [
      {
        "path": "https://resend.com/static/sample/logo.png",
        "filename": "logo.png",
        "content_id": "logo-image"
      }
    ]
  }'
  ```
</CodeGroup>

### Local image example

<CodeGroup>
  ```ts Node.js {13, 18} theme={null}
  import { Resend } from 'resend';
  import fs from 'fs';

  const resend = new Resend('re_xxxxxxxxx');

  const filepath = `${__dirname}/static/logo.png`;
  const attachment = fs.readFileSync(filepath).toString('base64');

  await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'Thank you for contacting us',
    text: '<p>Here is our <img src="cid:logo-image"/> inline logo</p>',
    attachments: [
      {
        content: attachment,
        filename: 'logo.png',
        contentId: 'logo-image',
      },
    ],
  });
  ```

  ```php PHP {7, 12} theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->emails->send([
    'from' => 'Acme <onboarding@resend.dev>',
    'to' => ['delivered@resend.dev'],
    'subject' => 'Thank you for contacting us',
    'html' => '<p>Here is our <img src="cid:logo-image"/> inline logo</p>',
    'attachments' => [
      [
        'filename' => 'logo.png',
        'content' => $invoiceBuffer,
        'content_id' => 'logo-image',
      ]
    ]
  ]);
  ```

  ```python Python {10, 16} theme={null}
  import os
  import resend

  resend.api_key = "re_xxxxxxxxx"

  f: bytes = open(
    os.path.join(os.path.dirname(__file__), "../static/logo.png"), "rb"
  ).read()

  attachment: resend.Attachment = {"content": list(f), "filename": "logo.png", "content_id": "logo-image"}

  params: resend.Emails.SendParams = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "Thank you for contacting us",
    "html": "<p>Here is our <img src=\"cid:logo-image\"/> inline logo</p>",
    "attachments": [attachment],
  }

  resend.Emails.send(params)
  ```

  ```rb Ruby {11,16} theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  file = IO.read("logo.png")

  params = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "Thank you for contacting us",
    "html": "<p>Here is our <img src=\"cid:logo-image\"/> inline logo</p>",
    "attachments": [
      {
        "content": file.bytes,
        "filename": 'logo.png',
        "content_id": "logo-image",
      }
    ]
  }

  Resend::Emails.send(params)
  ```

  ```go Go {21, 28} theme={null}
  import (
  	"fmt"
  	"os"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
    ctx := context.TODO()
    client := resend.NewClient("re_xxxxxxxxx")

    pwd, _ := os.Getwd()
    f, err := os.ReadFile(pwd + "/static/logo.png")
    if err != nil {
      panic(err)
    }

    attachment := &resend.Attachment{
      Content:  f,
      Filename: "logo.png",
      ContentId: "logo-image",
    }

    params := &resend.SendEmailRequest{
        From:        "Acme <onboarding@resend.dev>",
        To:          []string{"delivered@resend.dev"},
        Subject:     "Thank you for contacting us",
        Html:        "<p>Here is our <img src=\"cid:logo-image\"/> inline logo</p>",
        Attachments: []*resend.Attachment{attachment},
    }

    sent, err := client.Emails.SendWithContext(ctx, params)

    if err != nil {
      panic(err)
    }
    fmt.Println(sent.Id)
  }
  ```

  ```rust Rust {16,22} theme={null}
  use std::fs::File;
  use std::io::Read;

  use resend_rs::types::{CreateAttachment, CreateEmailBaseOptions};
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let from = "Acme <onboarding@resend.dev>";
    let to = ["delivered@resend.dev"];
    let subject = "Thank you for contacting us";

    let filename = "logo.png";
    let content_id = "logo-image";
    let mut f = File::open(filename).unwrap();
    let mut invoice = Vec::new();
    f.read_to_end(&mut invoice).unwrap();

    let email = CreateEmailBaseOptions::new(from, to, subject)
      .with_html("<p>Here is our <img src=\"cid:logo-image\"/> inline logo</p>")
      .with_attachment(
        CreateAttachment::from_content(invoice)
          .with_filename(filename)
          .with_content_id(content_id),
      );

    let _email = resend.emails.send(email).await?;

    Ok(())
  }
  ```

  ```java Java {10, 17} theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          Attachment att = Attachment.builder()
                  .fileName("logo.png")
                  .content("invoiceBuffer")
                  .contentId("logo-image")
                  .build();

          CreateEmailOptions params = CreateEmailOptions.builder()
                  .from("Acme <onboarding@resend.dev>")
                  .to("delivered@resend.dev")
                  .subject("Thank you for contacting us")
                  .html("<p>Here is our <img src=\"cid:logo-image\"/> inline logo</p>")
                  .attachments(att)
                  .build();

          CreateEmailOptions params = CreateEmailOptions.builder()
      }
  }
  ```

  ```csharp .NET {12, 19} theme={null}
  using Resend;
  using System.Collections.Generic;
  using System.IO;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var message = new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "delivered@resend.dev",
      Subject = "Thank you for contacting us",
      HtmlBody = "<p>Here is our <img src=\"cid:logo-image\"/> inline logo</p>",
  };

  message.Attachments = new List<EmailAttachment>();
  message.Attachments.Add( new EmailAttachment() {
    Filename = "logo.png",
    Content = await File.ReadAllBytesAsync( "logo.png" ),
    ContentId = "logo-image",
  } );

  var resp = await resend.EmailSendAsync( message );
  Console.WriteLine( "Email Id={0}", resp.Content );
  ```

  ```bash cURL {8, 13} theme={null}
  curl -X POST 'https://api.resend.com/emails' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "Thank you for contacting us",
    "html": "<p>Here is our <img src=\"cid:logo-image\"/> inline logo</p>",
    "attachments": [
      {
        "content": "UmVzZW5kIGF0dGFjaG1lbnQgZXhhbXBsZS4gTmljZSBqb2Igc2VuZGluZyB0aGUgZW1haWwh%",
        "filename": "invoice.txt",
        "content_id": "logo-image"
      }
    ]
  }'
  ```
</CodeGroup>

## Other considerations

Before adding inline images, consider the following.

* As these images are sent as attachments, you need to encode your image as Base64 when sending the raw content via the API. There is no need to do this when passing the path of a remote image (the API handles this for you).
* Inline images increase the size of the email.
* Inline images may be rejected by some clients (especially webmail).
* As with all attachments, we recommend adding a `content_type` (e.g. `image/png`) or `filename` (e.g. `logo.png`) parameter to the attachment object, as this often helps email clients render the attachment correctly.

<Note>
  All attachments (including inline images) do not currently display in the
  [emails dashboard](https://resend.com/emails) when previewing email HTML.
</Note>


# Idempotency Keys
Source: https://resend.com/docs/dashboard/emails/idempotency-keys

Use idempotency keys to ensure that emails are sent only once.

Include an idempotency key in any email requests to ensure that the same email request is processed only once, even if it's sent multiple times.

<Info>
  Idempotency keys are currently supported on the `POST /emails` and the `POST
    /emails/batch` endpoints on the Resend API.
</Info>

## How does it work?

When you send an email with an idempotency key, we check if an email with the same idempotency key has already been sent in the last 24 hours. **This is an optional feature** that simplifies managing retries on your side.

This makes it safe to retry requests that send an email. You don't have to worry about checking if the original request was sent -- you can just make the same request and our API will give the same response, without actually sending the email again.

## How to use idempotency keys?

Idempotency keys can be **up to 256 characters** and should be unique per API request.

We **recommend using a UUID** or other string that uniquely identifies that specific email.

<Tip>If you have multiple events that trigger emails related to a single entity in your system, you can format your idempotency keys to take advantage of that entity's ID. One idea is to format idempotency keys like `<event-type>/<entity-id>`, for example `welcome-user/123456789`. The specific format you use is up to you.</Tip>

Send the key in the `Idempotency-Key` HTTP header in your API requests. Our SDKs also provide a convenient way to set this header. If you're using SMTP, you can set the `Resend-Idempotency-Key` email header instead.

We keep idempotency keys in our system for **24 hours**. This should give you an ample window to retry any failed processes on your end without having to keep track of the sent status.

### `POST /emails` endpoint example

<CodeGroup>
  ```ts Node.js {9} theme={null}
  await resend.emails.send(
    {
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: 'hello world',
      html: '<p>it works!</p>',
    },
    {
      idempotencyKey: 'welcome-user/123456789',
    },
  );
  ```

  ```php PHP {9} theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->emails->send([
    'from' => 'Acme <onboarding@resend.dev>',
    'to' => ['delivered@resend.dev'],
    'subject' => 'hello world',
    'html' => '<p>it works!</p>',
  ], [
    'idempotency_key' => 'welcome-user/123456789',
  ]);
  ```

  ```python Python {9} theme={null}
  params: resend.Emails.SendParams = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>"
  }

  options: resend.Emails.SendOptions = {
    "idempotency_key": "welcome-user/123456789",
  }

  resend.Emails.send(params, options)
  ```

  ```rb Ruby {9} theme={null}
  params = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>"
  }
  Resend::Emails.send(
    params,
    options: { idempotency_key: "welcome-user/123456789" }
  )
  ```

  ```go Go {9} theme={null}
  ctx := context.TODO()
  params := &resend.SendEmailRequest{
    From:    "onboarding@resend.dev",
    To:      []string{"delivered@resend.dev"},
    Subject: "hello world",
    Html:    "<p>it works!</p>",
  }
  options := &resend.SendEmailOptions{
    IdempotencyKey: "welcome-user/123456789",
  }
  _, err := client.Emails.SendWithOptions(ctx, params, options)
  if err != nil {
    panic(err)
  }
  ```

  ```rust Rust {14} theme={null}
  use resend_rs::types::CreateEmailBaseOptions;
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let from = "Acme <onboarding@resend.dev>";
    let to = ["delivered@resend.dev"];
    let subject = "Hello World";

    let email = CreateEmailBaseOptions::new(from, to, subject)
      .with_html("<p>it works!</p>")
      .with_idempotency_key("welcome-user/123456789");

    let _email = resend.emails.send(email).await?;

    Ok(())
  }
  ```

  ```java Java {9} theme={null}
  CreateEmailOptions params = CreateEmailOptions.builder()
    .from("Acme <onboarding@resend.dev>")
    .to("delivered@resend.dev")
    .subject("hello world")
    .html("<p>it works!</p>")
    .build();

  RequestOptions options = RequestOptions.builder()
    .setIdempotencyKey("welcome-user/123456789").build();

  CreateEmailResponse data = resend.emails().send(params, options);
  ```

  ```csharp C# {11} theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var key = IdempotencyKey.New<int>( "welcome-user", 123456789 );
  var resp = await resend.EmailSendAsync(key, new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "delivered@resend.dev",
      Subject = "hello world",
      HtmlBody = "<p>it works!</p>",
  } );
  Console.WriteLine( "Email Id={0}", resp.Content );
  ```

  ```bash cURL {4} theme={null}
  curl -X POST 'https://api.resend.com/emails' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -H 'Idempotency-Key: welcome-user/123456789' \
       -d $'{
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>"
  }'
  ```

  ```yaml SMTP {4} theme={null}
  From: Acme <onboarding@resend.dev>
  To: delivered@resend.dev
  Subject: hello world
  Resend-Idempotency-Key: welcome-user/123456789

  <p>it works!</p>
  ```
</CodeGroup>

### `POST /emails/batch` endpoint example

<Tip>
  Format your idempotency keys to take advantage of that entity's ID (i.e.,
  `<event-type>/<entity-id>`). For batch sends, choose a key that represents the whole batch, like a team, workspace, or project (i.e., `team-quota/123456789`).
</Tip>

<CodeGroup>
  ```ts Node.js {21} theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  await resend.batch.send(
    [
      {
        from: 'Acme <onboarding@resend.dev>',
        to: ['foo@gmail.com'],
        subject: 'hello world',
        html: '<h1>it works!</h1>',
      },
      {
        from: 'Acme <onboarding@resend.dev>',
        to: ['bar@outlook.com'],
        subject: 'world hello',
        html: '<p>it works!</p>',
      },
    ],
    {
      idempotencyKey: 'team-quota/123456789',
    },
  );
  ```

  ```php PHP {19} theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->batch->send(
    [
      [
        'from' => 'Acme <onboarding@resend.dev>',
        'to' => ['foo@gmail.com'],
        'subject' => 'hello world',
        'html' => '<h1>it works!</h1>',
      ],
      [
        'from' => 'Acme <onboarding@resend.dev>',
        'to' => ['bar@outlook.com'],
        'subject' => 'world hello',
        'html' => '<p>it works!</p>',
      ]
    ],
    [
      'idempotency_key' => 'team-quota/123456789',
    ]
  );
  ```

  ```py Python {22} theme={null}
  import resend
  from typing import List

  resend.api_key = "re_xxxxxxxxx"

  params: List[resend.Emails.SendParams] = [
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["foo@gmail.com"],
      "subject": "hello world",
      "html": "<h1>it works!</h1>",
    },
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["bar@outlook.com"],
      "subject": "world hello",
      "html": "<p>it works!</p>",
    }
  ]

  options: resend.Batch.SendOptions = {
    "idempotency_key": "team-quota/123456789",
  }

  resend.Batch.send(params, options)
  ```

  ```rb Ruby {22} theme={null}
  require "resend"

  Resend.api_key = 're_xxxxxxxxx'

  params = [
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["foo@gmail.com"],
      "subject": "hello world",
      "html": "<h1>it works!</h1>",
    },
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["bar@outlook.com"],
      "subject": "world hello",
      "html": "<p>it works!</p>",
    }
  ]

  Resend::Batch.send(
    params,
    options: { idempotency_key: "team-quota/123456789" }
  )
  ```

  ```go Go {32} theme={null}
  package examples

  import (
  	"fmt"
  	"os"

  	"github.com/resend/resend-go/v2"
  )

  func main() {

    ctx := context.TODO()

    client := resend.NewClient("re_xxxxxxxxx")

    var batchEmails = []*resend.SendEmailRequest{
      {
        From:    "Acme <onboarding@resend.dev>",
        To:      []string{"foo@gmail.com"},
        Subject: "hello world",
        Html:    "<h1>it works!</h1>",
      },
      {
        From:    "Acme <onboarding@resend.dev>",
        To:      []string{"bar@outlook.com"},
        Subject: "world hello",
        Html:    "<p>it works!</p>",
      },
    }

    options := &resend.BatchSendEmailOptions{
      IdempotencyKey: "team-quota/123456789",
    }

    sent, err := client.Batch.SendWithOptions(ctx, batchEmails, options)

    if err != nil {
      panic(err)
    }
    fmt.Println(sent.Data)
  }
  ```

  ```rust Rust {23} theme={null}
  use resend_rs::types::CreateEmailBaseOptions;
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let emails = vec![
      CreateEmailBaseOptions::new(
        "Acme <onboarding@resend.dev>",
        vec!["foo@gmail.com"],
        "hello world",
      )
      .with_html("<h1>it works!</h1>"),
      CreateEmailBaseOptions::new(
        "Acme <onboarding@resend.dev>",
        vec!["bar@outlook.com"],
        "world hello",
      )
      .with_html("<p>it works!</p>"),
    ];

    let _emails = resend.batch.send_with_idempotency_key(emails, "team-quota/123456789").await?;

    Ok(())
  }
  ```

  ```java Java {23} theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          CreateEmailOptions firstEmail = CreateEmailOptions.builder()
              .from("Acme <onboarding@resend.dev>")
              .to("foo@gmail.com")
              .subject("hello world")
              .html("<h1>it works!</h1>")
              .build();

          CreateEmailOptions secondEmail = CreateEmailOptions.builder()
              .from("Acme <onboarding@resend.dev>")
              .to("bar@outlook.com")
              .subject("world hello")
              .html("<p>it works!</p>")
              .build();

          CreateBatchEmailsResponse data = resend.batch().send(
              Arrays.asList(firstEmail, secondEmail),
              Map.of("idempotency_key", "team-quota/123456789")
          );
      }
  }
  ```

  ```csharp .NET {5} theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var key = IdempotencyKey.New<int>( "team-quota", 123456789 );

  var mail1 = new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "foo@gmail.com",
      Subject = "hello world",
      HtmlBody = "<p>it works!</p>",
  };

  var mail2 = new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "bar@outlook.com",
      Subject = "hello world",
      HtmlBody = "<p>it works!</p>",
  };

  var resp = await resend.EmailBatchAsync(key, [ mail1, mail2 ] );
  Console.WriteLine( "Nr Emails={0}", resp.Content.Count );
  ```

  ```bash cURL {4} theme={null}
  curl -X POST 'https://api.resend.com/emails/batch' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -H 'Idempotency-Key: team-quota/123456789' \
       -d $'[
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["foo@gmail.com"],
      "subject": "hello world",
      "html": "<h1>it works!</h1>"
    },
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["bar@outlook.com"],
      "subject": "world hello",
      "html": "<p>it works!</p>"
    }
  ]'
  ```
</CodeGroup>

## Possible responses

After checking if an email with the same idempotency key has already been sent, Resend returns one of the following responses:

* **Successful responses** will return the email ID of the sent email.
* **Error responses** will return one of the following errors:
  * `400`: `invalid_idempotency_key` - the idempotency key has to be between 1-256 characters. You can retry with a valid key or without supplying an idempotency key.
  * `409`: `invalid_idempotent_request` - this idempotency key has already been used on a request that had a different payload. Retrying this request is useless without changing the idempotency key or payload.
  * `409`: `concurrent_idempotent_requests` - another request with the same idempotency key is currently in progress. As it isn't finished yet, Resend can't return its original response, but it is safe to retry this request later if needed.


# Managing Emails
Source: https://resend.com/docs/dashboard/emails/introduction

Learn how to view and manage all sent emails on the Resend Dashboard.

## View email details

See all the metadata associated with an email, including the sender address, recipient address, subject, and more from the [Emails](https://resend.com/emails) page. Select any email to view its details.

<img alt="Email Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-item.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=406e90f545d6b4f4289cd86311a2642a" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-emails-item.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-item.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9c4fe6d74b31ca68b377b9608bd9b82e 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-item.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=97e6fbae459d384a1d3edf9946ff2827 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-item.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6cbc76ff913249d8bb6956c9c10f5124 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-item.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bceed259b91ce958aa4dc94f3109602a 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-item.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3e1cbb140ff294b35af6d897c03601e2 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-item.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=83ee9a501a2c55e225d028f36c3178e1 2500w" />

Each email contains a **Preview**, **Plain Text**, and **HTML** version to visualize the content of your sent email in its various formats.

## Understand email events

Here are all the events that can be associated with an email:

* `bounced` - The recipient's mail server rejected the email. ([Learn more about bounced emails](/dashboard/emails/email-bounces))
* `canceled` - The scheduled email was canceled (by user).
* `clicked` - The recipient clicked on a link in the email.
* `complained` - The email was successfully delivered to the recipient's mail server, but the recipient marked it as spam.
* `delivered` - Resend successfully delivered the email to the recipient's mail server.
* `delivery_delayed` - The email couldn't be delivered to the recipient's mail server because a temporary issue occurred. Delivery delays can occur, for example, when the recipient's inbox is full, or when the receiving email server experiences a transient issue.
* `failed` - The email failed to be sent.
* `opened` - The recipient opened the email.
* `queued` - The email created from Broadcasts or Batches is queued for delivery.
* `scheduled` - The email is scheduled for delivery.
* `sent` - The email was sent successfully.

## Share email link

You can share a public link of a sent email, which is valid for 48 hours. Anyone with the link can visualize the email.

To share a link, click on the **dropdown menu** <Icon icon="ellipsis" iconType="solid" />, and select **Share email**.

<img alt="Email - Share Link Option" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-option.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=1e3019a33d90161bc41a77817e2a54c5" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-emails-share-option.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-option.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e30b17d8ff7f24c25cda3ffb3b5b5c50 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-option.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8f538e8f5ec25210d2678ed039dc8bca 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-option.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=77213269fded8af1f2ecce8f0f83f297 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-option.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=c7ebb38b1dbe5b19847ad9c35a9e8663 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-option.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=93f7516be2a526e6212b18c9df475090 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-option.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=830f1e0e91e335f9d30d242fd89c64a5 2500w" />

Then copy the URL and share it with your team members.

<img alt="Email - Share Link Modal" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-modal.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=467d298ee78312a1f1b8356ea61457e5" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-emails-share-modal.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-modal.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e1c79c50296e5651a11dc1f7f5919825 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-modal.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=45582ea684e96b847ece4e63585d7b53 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-modal.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=07ef9ed822e59a3966272cfdab89af53 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-modal.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=83a9e17345f42b5b28db81d0565e8814 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-modal.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b8e7dead6a1f07b4145eed9c32b21fe2 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-modal.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=964bbb468617b0ccd5ed79321a0509b6 2500w" />

Anyone with the link can visualize the email without authenticating for 48 hours.

<img alt="Email - Share Link Item" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-item.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=05c438ac1b5e0721475b3f028a6f6934" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-emails-share-item.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-item.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=534d1d13dfb920550b52096a5427722a 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-item.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=c25f375fed2a3ebca311fd0a0a767008 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-item.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=65388828f56284528f1fa85985b28f27 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-item.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2d38832416dba1cf4a40c6212df70b13 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-item.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5e6de58bba03b6122a421870763e88aa 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-share-item.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=7cbf4bf5445b5ccca2dc189a363c03d5 2500w" />

## See associated logs

You can check all the logs associated with an email. This will help you troubleshoot any issues with the request itself.

To view the logs, click on the dropdown menu, and select "View log".

<img alt="Email - View Logs Option" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-option.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ad69ba9d638fe43f62974a0d76b1e01e" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-emails-log-option.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-option.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f924038ec2ae9768db94afe11975a339 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-option.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e2f6c2970e08794f53c9a7c9dd6112c9 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-option.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4f3765f045c46e352023a72ae8b07dc9 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-option.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=43fcfbf8463ebb5c6dc7a4b9cc13bc5d 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-option.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fbe11b02f7f21261fb3d7b382fa7d699 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-option.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8a8be4a345f62e9206060779e2b10db5 2500w" />

This will take you to logs, where you can see all the logs associated with the email.

<img alt="Email - View Logs Item" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-item.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=936f066559e1ae477523be37aa959f90" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-emails-log-item.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-item.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4874f252a6f943f1a7c301f54b901197 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-item.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5ad7eee0993f9fa1c2687e93c0d9c51f 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-item.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=76e96f83e1528859a48d3c3b9ab228bc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-item.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f6360563026b88336d490c8061448919 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-item.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=923f5b68c228ff64f5e0557a097f9b08 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-emails-log-item.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3242bbea28e6ba67f39b21fdebfa1a81 2500w" />

## Export your data

Admins can download your data in CSV format for the following resources:

* Emails
* Broadcasts
* Contacts
* Domains
* Logs
* API keys

<Info>Currently, exports are limited to admin users of your team.</Info>

To start, apply filters to your data and click on the "Export" button. Confirm your filters before exporting your data.

<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/exports.mp4?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1149ee4e83b4414e75a0ecaa92774c38" data-path="images/exports.mp4" />

If your exported data includes 1,000 items or less, the export will download immediately. For larger exports, you'll receive an email with a link to download your data.

All admins on your team can securely access the export for 7 days. Unavailable exports are marked as "Expired."

<Note>
  All exports your team creates are listed in the
  [Exports](https://resend.com/exports) page under **Settings** > **Team** >
  **Exports**. Select any export to view its details page. All members of your
  team can view your exports, but only admins can download the data.
</Note>


# Schedule Email
Source: https://resend.com/docs/dashboard/emails/schedule-email

Send emails at a specific time without additional complexity.

While some emails need to be delivered as soon as possible, like password resets or magic links, others can be scheduled for a specific time.

Here are some examples of when you might want to schedule an email:

* Send welcome email **5 minutes after** signup
* Trigger a reminder email **24 hours before** an event
* Schedule a weekly digest email for the **next day at 9am PST**

Before, you had to use external services to handle the scheduling logic, but now you can use the new Resend API to schedule emails.

<Info>Emails can be scheduled up to 30 days in advance.</Info>

There are two ways to schedule an email:

1. [Using natural language](#1-schedule-using-natural-language)
2. [Using date format](#2-schedule-using-date-format)

## 1. Schedule using natural language

You can use the various Resend SDKs to schedule emails.

The date can be defined using natural language, such as `"in 1 hour"`, `"tomorrow at 9am"`, or `"Friday at 3pm ET"`.

<CodeGroup>
  ```ts Node.js {10} theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'hello world',
    html: '<p>it works!</p>',
    scheduledAt: 'in 1 min',
  });
  ```

  ```php PHP {8} theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->emails->send([
    'from' => 'Acme <onboarding@resend.dev>',
    'to' => ['delivered@resend.dev'],
    'subject' => 'hello world',
    'html' => '<p>it works!</p>',
    'scheduled_at' => 'in 1 min'
  ]);
  ```

  ```python Python {10} theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  params: resend.Emails.SendParams = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>",
    "scheduled_at": "in 1 min"
  }

  resend.Emails.send(params)
  ```

  ```rb Ruby {10} theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  params = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>",
    "scheduled_at": "in 1 min"
  }

  Resend::Emails.send(params)
  ```

  ```go Go {16} theme={null}
  import (
  	"fmt"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
    ctx := context.TODO()
    client := resend.NewClient("re_xxxxxxxxx")

    params := &resend.SendEmailRequest{
      From:        "Acme <onboarding@resend.dev>",
      To:          []string{"delivered@resend.dev"},
      Subject:     "hello world",
      Html:        "<p>it works!</p>",
      ScheduledAt: "in 1 min"
    }

    sent, err := client.Emails.SendWithContext(ctx, params)

    if err != nil {
      panic(err)
    }
    fmt.Println(sent.Id)
  }
  ```

  ```rust Rust {14} theme={null}
  use resend_rs::types::CreateEmailBaseOptions;
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let from = "Acme <onboarding@resend.dev>";
    let to = ["delivered@resend.dev"];
    let subject = "hello world";

    let email = CreateEmailBaseOptions::new(from, to, subject)
      .with_html("<p>it works!</p>")
      .with_scheduled_at("in 1 min");

    let _email = resend.emails.send(email).await?;

    Ok(())
  }
  ```

  ```java Java {12} theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          CreateEmailOptions params = CreateEmailOptions.builder()
                  .from("Acme <onboarding@resend.dev>")
                  .to("delivered@resend.dev")
                  .subject("hello world")
                  .html("<p>it works!</p>")
                  .scheduledAt("in 1 min")
                  .build();

          CreateEmailResponse data = resend.emails().send(params);
      }
  }
  ```

  ```csharp .NET {11} theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.EmailSendAsync( new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "delivered@resend.dev",
      Subject = "hello world",
      HtmlBody = "<p>it works!</p>",
      MomentSchedule = "in 1 min",
  } );
  Console.WriteLine( "Email Id={0}", resp.Content );
  ```

  ```bash cURL {9} theme={null}
  curl -X POST 'https://api.resend.com/emails' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>",
    "scheduled_at": "in 1 min"
  }'
  ```
</CodeGroup>

## 2. Schedule using date format

You can also use a date in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format (e.g: `2024-08-05T11:52:01.858Z`).

<CodeGroup>
  ```ts Node.js {5} theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const oneMinuteFromNow = new Date(Date.now() + 1000 * 60).toISOString();

  await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'hello world',
    html: '<p>it works!</p>',
    scheduledAt: oneMinuteFromNow,
  });
  ```

  ```php PHP {3} theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $oneMinuteFromNow = (new DateTime())->modify('+1 minute')->format(DateTime::ISO8601);

  $resend->emails->send([
    'from' => 'Acme <onboarding@resend.dev>',
    'to' => ['delivered@resend.dev'],
    'subject' => 'hello world',
    'html' => '<p>it works!</p>',
    'scheduled_at' => $oneMinuteFromNow
  ]);
  ```

  ```python Python {6} theme={null}
  import resend
  from datetime import datetime, timedelta

  resend.api_key = "re_xxxxxxxxx"

  one_minute_from_now = (datetime.now() + timedelta(minutes=1)).isoformat()

  params: resend.Emails.SendParams = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>",
    "scheduled_at": one_minute_from_now
  }

  resend.Emails.send(params)
  ```

  ```rb Ruby {5} theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  one_minute_from_now = (Time.now + 1 * 60).strftime("%Y-%m-%dT%H:%M:%S.%L%z")

  params = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>",
    "scheduled_at": one_minute_from_now
  }

  Resend::Emails.send(params)
  ```

  ```go Go {12} theme={null}
  import (
  	"fmt"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
    ctx := context.TODO()
    client := resend.NewClient("re_xxxxxxxxx")

    oneMinuteFromNow := time.Now().Add(time.Minute * time.Duration(1))
    oneMinuteFromNowISO := oneMinuteFromNow.Format("2006-01-02T15:04:05-0700")

    params := &resend.SendEmailRequest{
      From:        "Acme <onboarding@resend.dev>",
      To:          []string{"delivered@resend.dev"},
      Subject:     "hello world",
      Html:        "<p>it works!</p>",
      ScheduledAt: oneMinuteFromNowISO
    }

    sent, err := client.Emails.SendWithContext(ctx, params)

    if err != nil {
      panic(err)
    }
    fmt.Println(sent.Id)
  }
  ```

  ```rust Rust {12-15} theme={null}
  use chrono::{Local, TimeDelta};
  use resend_rs::types::CreateEmailBaseOptions;
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let from = "Acme <onboarding@resend.dev>";
    let to = ["delivered@resend.dev"];
    let subject = "hello world";
    let one_minute_from_now = Local::now()
      .checked_add_signed(TimeDelta::minutes(1))
      .unwrap()
      .to_rfc3339();

    let email = CreateEmailBaseOptions::new(from, to, subject)
      .with_html("<p>it works!</p>")
      .with_scheduled_at(&one_minute_from_now);

    let _email = resend.emails.send(email).await?;

    Ok(())
  }
  ```

  ```java Java {7-10} theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          String oneMinuteFromNow = Instant
            .now()
            .plus(1, ChronoUnit.MINUTES)
            .toString();

          CreateEmailOptions params = CreateEmailOptions.builder()
                  .from("Acme <onboarding@resend.dev>")
                  .to("delivered@resend.dev")
                  .subject("hello world")
                  .html("<p>it works!</p>")
                  .scheduledAt(oneMinuteFromNow)
                  .build();

          CreateEmailResponse data = resend.emails().send(params);
      }
  }
  ```

  ```csharp .NET {11} theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.EmailSendAsync( new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "delivered@resend.dev",
      Subject = "hello world",
      HtmlBody = "<p>it works!</p>",
      MomentSchedule = DateTime.UtcNow.AddMinutes( 1 ),
  } );
  Console.WriteLine( "Email Id={0}", resp.Content );
  ```

  ```bash cURL {9} theme={null}
  curl -X POST 'https://api.resend.com/emails' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>",
    "scheduled_at": "2024-08-20T11:52:01.858Z"
  }'
  ```
</CodeGroup>

## View a scheduled email

Once you schedule an email, you can see the scheduled time in the Resend dashboard.

<video autoPlay muted loop playsInline className="w-full" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/schedule-email-api-1.mp4?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d1d16450cb0c95524d5096c79b8eb9bb" data-path="images/schedule-email-api-1.mp4" />

## Reschedule an email

After scheduling an email, you might need to update the scheduled time.

You can do so with the following method:

<CodeGroup>
  ```ts Node.js {3} theme={null}
  resend.emails.update({
    id: '49a3999c-0ce1-4ea6-ab68-afcd6dc2e794',
    scheduledAt: 'in 1 min',
  });
  ```

  ```php PHP {2} theme={null}
  $resend->emails->update('49a3999c-0ce1-4ea6-ab68-afcd6dc2e794', [
    'scheduled_at' => 'in 1 min'
  ]);
  ```

  ```python Python {3} theme={null}
  update_params: resend.Emails.UpdateParams = {
    "id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",
    "scheduled_at": "in 1 min"
  }

  resend.Emails.update(params=update_params)
  ```

  ```rb Ruby {3} theme={null}
  update_params = {
    "email_id": "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",
    "scheduled_at": "in 1 min"
  }

  updated_email = Resend::Emails.update(update_params)
  ```

  ```go Go {3} theme={null}
  updateParams := &resend.UpdateEmailRequest{
    Id:          "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794",
    ScheduledAt: "in 1 min",
  }

  updatedEmail, err := client.Emails.Update(updateParams)

  if err != nil {
    panic(err)
  }
  fmt.Printf("%v\n", updatedEmail)
  ```

  ```rust Rust {2} theme={null}
  let update = UpdateEmailOptions::new()
    .with_scheduled_at("in 1 min");

  let _email = resend
    .emails
    .update("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794", update)
    .await?;
  ```

  ```java Java {2} theme={null}
  UpdateEmailOptions updateParams = UpdateEmailOptions.builder()
    .scheduledAt("in 1 min")
    .build();

  UpdateEmailResponse data = resend.emails().update("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794", updateParams);
  ```

  ```csharp .NET {7} theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  await resend.EmailRescheduleAsync(
    new Guid( "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794" ),
    "in 1 min"
  );
  ```

  ```bash cURL {5} theme={null}
  curl -X PATCH 'https://api.resend.com/emails/49a3999c-0ce1-4ea6-ab68-afcd6dc2e794' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "scheduled_at": "in 1 min"
  }'
  ```
</CodeGroup>

You can also reschedule an email directly in the Resend dashboard.

<video autoPlay muted loop playsInline className="w-full" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/schedule-email-api-2.mp4?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f2daaf3b582de3aaf587952eca403b87" data-path="images/schedule-email-api-2.mp4" />

## Cancel a scheduled email

<Warning>Once an email is canceled, it cannot be rescheduled.</Warning>

If you need to cancel a scheduled email, you can do so with the following code:

<CodeGroup>
  ```ts Node.js theme={null}
  resend.emails.cancel('49a3999c-0ce1-4ea6-ab68-afcd6dc2e794');
  ```

  ```php PHP theme={null}
  $resend->emails->cancel('49a3999c-0ce1-4ea6-ab68-afcd6dc2e794');
  ```

  ```python Python theme={null}
  resend.Emails.cancel(email_id="49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")
  ```

  ```rb Ruby theme={null}
  Resend::Emails.cancel("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")
  ```

  ```go Go theme={null}
  canceled, err := client.Emails.Cancel("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")
  if err != nil {
    panic(err)
  }
  fmt.Println(canceled.Id)
  ```

  ```rust Rust theme={null}
  let _canceled = resend
    .emails
    .cancel("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794")
    .await?;
  ```

  ```java Java theme={null}
  CancelEmailResponse canceled = resend
      .emails()
      .cancel("49a3999c-0ce1-4ea6-ab68-afcd6dc2e794");
  ```

  ```csharp .NET theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  await resend.EmailCancelAsync( new Guid( "49a3999c-0ce1-4ea6-ab68-afcd6dc2e794" ) );
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/emails/49a3999c-0ce1-4ea6-ab68-afcd6dc2e794/cancel' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json'
  ```
</CodeGroup>

You can also cancel a scheduled email in the Resend dashboard.

<video autoPlay muted loop playsInline className="w-full" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/schedule-email-api-3.mp4?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=aecf439970de96a8c7e15489ef81a67b" data-path="images/schedule-email-api-3.mp4" />

## Limitations

* Batch emails cannot be scheduled
* Emails sent via SMTP cannot be scheduled
* Emails with attachments cannot be scheduled


# Send Test Emails
Source: https://resend.com/docs/dashboard/emails/send-test-emails

Simulate different events by sending test emails.

## How to send test emails

During development, it's important to test different deliverability scenarios.

> **Example**: When an email hard bounces or is marked as spam, it's important to stop sending emails to the recipient, as continuing to send emails to those addresses will damage your domain reputation. We recommend [creating a webhook endpoint](/dashboard/webhooks/introduction) to capture these events and remove the addresses from your mailing lists.

When testing, avoid:

* sending to fake email addresess
* setting up a fake SMTP server

We provide the following test email addresses to help you simulate different email events without damaging your domain reputation. These test emails enable the safe use of Resend's Dashboard, Webhooks, and API when developing your application.

All test email addresses support labeling, which enables you to send emails to the same test address in multiple ways. You can add a label after the `+` symbol (e.g., `delivered+label1@resend.dev`) to help track and differentiate between different test scenarios in your application.

## Test delivered emails

To test that your emails are being successfully delivered, you can send an email to:

```
delivered@resend.dev
```

With labeling support, you can also use:

```
delivered+user1@resend.dev
delivered+user2@resend.dev
delivered+user3@resend.dev
```

## Test bounced emails

To test that the recipient's email provider rejected your email, you can send an email to:

```
bounced@resend.dev
```

With labeling support, you can also use:

```
bounced+user1@resend.dev
bounced+user2@resend.dev
bounced+user3@resend.dev
```

This will generate a SMTP 550 5.1.1 ("Unknown User") response code.

## Test "Marked as Spam" emails

To test that your emails are being received but marked as spam, you can send an email to:

```
complained@resend.dev
```

With labeling support, you can also use:

```
complained+user1@resend.dev
complained+user2@resend.dev
complained+user3@resend.dev
```

## Using labels effectively

The labeling feature allows you to use any string as a label after the `+` symbol. This is particularly useful for:

* Testing different email flows (e.g., `delivered+signup@resend.dev`, `delivered+password-reset@resend.dev`)
* Tracking webhook responses for specific test scenarios
* Differentiating between multiple test runs
* Matching responses with the specific email address that triggered the event


# Managing Tags
Source: https://resend.com/docs/dashboard/emails/tags

Add unique identifiers to emails sent.

Tags are unique identifiers you can add to your emails. They help associate emails with your application. They are passed in key/value pairs. After the email is sent, the tag is included in the webhook event. Tags can include ASCII letters, numbers, underscores, or dashes.

Some examples of when to use a tag:

* Associate the email a "customer ID" from your application
* Add a label from your database like "free" or "enterprise"
* Note the category of email sent, like "welcome" or "password reset"

Here's how you can add custom tags to your emails.

## Add tags on the `POST /emails` endpoint

<CodeGroup>
  ```ts Node.js {10-15} theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'hello world',
    html: '<p>it works!</p>',
    tags: [
      {
        name: 'category',
        value: 'confirm_email',
      },
    ],
  });
  ```

  ```php PHP {8-13} theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->emails->send([
    'from' => 'Acme <onboarding@resend.dev>',
    'to' => ['delivered@resend.dev'],
    'subject' => 'hello world',
    'html' => '<p>it works!</p>',
    'tags' => [
      [
        'name' => 'category',
        'value' => 'confirm_email',
      ],
    ]
  ]);
  ```

  ```python Python {10-12} theme={null}
  import resend

  resend.api_key = "re_xxxxxxxxx"

  params: resend.Emails.SendParams = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>",
    "tags": [
      {"name": "category", "value": "confirm_email"},
    ],
  }

  email = resend.Emails.send(params)
  print(email)
  ```

  ```rb Ruby {10-12} theme={null}
  require "resend"

  Resend.api_key = "re_xxxxxxxxx"

  params = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>",
    "tags": [
      {"name": "category", "value": "confirm_email"}
    ]
  }

  sent = Resend::Emails.send(params)
  puts sent
  ```

  ```go Go {16} theme={null}
  import (
  	"fmt"

  	"github.com/resend/resend-go/v2"
  )

  func main() {
    ctx := context.TODO()
    client := resend.NewClient("re_xxxxxxxxx")

    params := &resend.SendEmailRequest{
        From:        "Acme <onboarding@resend.dev>",
        To:          []string{"delivered@resend.dev"},
        Text:        "<p>it works!</p>",
        Subject:     "hello world",
        Tags:        []resend.Tag{{Name: "category", Value: "confirm_email"}},
    }

    sent, err := client.Emails.SendWithContext(ctx, params)

    if err != nil {
      panic(err)
    }
    fmt.Println(sent.Id)
  }
  ```

  ```rust Rust {14} theme={null}
  use resend_rs::types::{CreateEmailBaseOptions, Tag};
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let from = "Acme <onboarding@resend.dev>";
    let to = ["delivered@resend.dev"];
    let subject = "hello world";

    let email = CreateEmailBaseOptions::new(from, to, subject)
      .with_html("<p>it works!</p>")
      .with_tag(Tag::new("category", "confirm_email"));

    let _email = resend.emails.send(email).await?;

    Ok(())
  }
  ```

  ```java Java {17} theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          Tag tag = Tag.builder()
                  .name("category")
                  .value("confirm_email")
                  .build();

          SendEmailRequest sendEmailRequest = SendEmailRequest.builder()
                  .from("Acme <onboarding@resend.dev>")
                  .to("delivered@resend.dev")
                  .subject("hello world")
                  .html("<p>it works!</p>")
                  .tags(tag)
                  .build();

          SendEmailResponse data = resend.emails().send(sendEmailRequest);
      }
  }
  ```

  ```csharp .NET {12} theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var resp = await resend.EmailSendAsync( new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "delivered@resend.dev",
      Subject = "hello world",
      HtmlBody = "<p>it works!</p>",
      ReplyTo = "onboarding@resend.dev",
      Tags = new List<EmailTag> { new EmailTag { Name = "category", Value = "confirm_email" } }
  } );
  Console.WriteLine( "Email Id={0}", resp.Content );
  ```

  ```bash cURL {9-14} theme={null}
  curl -X POST 'https://api.resend.com/emails' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<p>it works!</p>",
    "tags": [
      {
        "name": "category",
        "value": "confirm_email"
      }
    ]
  }'
  ```
</CodeGroup>

## Add tags on the `POST /emails/batch` endpoint

<CodeGroup>
  ```ts Node.js {11-16,23-28} theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.batch.send([
    {
      from: 'Acme <onboarding@resend.dev>',
      to: ['foo@gmail.com'],
      subject: 'hello world',
      html: '<h1>it works!</h1>',
      tags: [
        {
          name: 'category',
          value: 'confirm_email',
        },
      ],
    },
    {
      from: 'Acme <onboarding@resend.dev>',
      to: ['bar@outlook.com'],
      subject: 'world hello',
      html: '<p>it works!</p>',
      tags: [
        {
          name: 'category',
          value: 'confirm_email',
        },
      ],
    },
  ]);
  ```

  ```php PHP {9-13,21-25} theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->batch->send([
    [
      'from' => 'Acme <onboarding@resend.dev>',
      'to' => ['foo@gmail.com'],
      'subject' => 'hello world',
      'html' => '<h1>it works!</h1>',
      'tags' => [
        [
          'name' => 'category',
          'value' => 'confirm_email'
        ]
      ]
    ],
    [
      'from' => 'Acme <onboarding@resend.dev>',
      'to' => ['bar@outlook.com'],
      'subject' => 'world hello',
      'html' => '<p>it works!</p>',
      'tags' => [
        [
          'name' => 'category',
          'value' => 'confirm_email'
        ]
      ]
    ]
  ]);
  ```

  ```py Python {12-17,24-29} theme={null}
  import resend
  from typing import List

  resend.api_key = "re_xxxxxxxxx"

  params: List[resend.Emails.SendParams] = [
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["foo@gmail.com"],
      "subject": "hello world",
      "html": "<h1>it works!</h1>",
      "tags": [
        {
          "name": "category",
          "value": "confirm_email"
        }
      ]
    },
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["bar@outlook.com"],
      "subject": "world hello",
      "html": "<p>it works!</p>",
      "tags": [
        {
          "name": "category",
          "value": "confirm_email"
        }
      ]
    }
  ]

  resend.Batch.send(params)
  ```

  ```rb Ruby {11-16,23-28} theme={null}
  require "resend"

  Resend.api_key = 're_xxxxxxxxx'

  params = [
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["foo@gmail.com"],
      "subject": "hello world",
      "html": "<h1>it works!</h1>",
      "tags": [
        {
          "name": "category",
          "value": "confirm_email"
        }
      ]
    },
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["bar@outlook.com"],
      "subject": "world hello",
      "html": "<p>it works!</p>",
      "tags": [
        {
          "name": "category",
          "value": "confirm_email"
        }
      ]
    }
  ]

  Resend::Batch.send(params)
  ```

  ```go Go {22,29} theme={null}
  package examples

  import (
  	"fmt"
  	"os"

  	"github.com/resend/resend-go/v2"
  )

  func main() {

    ctx := context.TODO()

    client := resend.NewClient("re_xxxxxxxxx")

    var batchEmails = []*resend.SendEmailRequest{
      {
        From:    "Acme <onboarding@resend.dev>",
        To:      []string{"foo@gmail.com"},
        Subject: "hello world",
        Html:    "<h1>it works!</h1>",
        Tags:    []resend.Tag{{Name: "category", Value: "confirm_email"}},
      },
      {
        From:    "Acme <onboarding@resend.dev>",
        To:      []string{"bar@outlook.com"},
        Subject: "world hello",
        Html:    "<p>it works!</p>",
        Tags:    []resend.Tag{{Name: "category", Value: "confirm_email"}},
      },
    }

    sent, err := client.Batch.SendWithContext(ctx, batchEmails)

    if err != nil {
      panic(err)
    }
    fmt.Println(sent.Data)
  }
  ```

  ```rust Rust {15,22} theme={null}
  use resend_rs::types::CreateEmailBaseOptions;
  use resend_rs::{Resend, Result};

  #[tokio::main]
  async fn main() -> Result<()> {
    let resend = Resend::new("re_xxxxxxxxx");

    let emails = vec![
      CreateEmailBaseOptions::new(
        "Acme <onboarding@resend.dev>",
        vec!["foo@gmail.com"],
        "hello world",
      )
      .with_html("<h1>it works!</h1>")
      .with_tag(Tag::new("category", "confirm_email")),
      CreateEmailBaseOptions::new(
        "Acme <onboarding@resend.dev>",
        vec!["bar@outlook.com"],
        "world hello",
      )
      .with_html("<p>it works!</p>")
      .with_tag(Tag::new("category", "confirm_email")),
    ];

    let _emails = resend.batch.send(emails).await?;

    Ok(())
  }
  ```

  ```java Java {12-15,23-26} theme={null}
  import com.resend.*;

  public class Main {
      public static void main(String[] args) {
          Resend resend = new Resend("re_xxxxxxxxx");

          CreateEmailOptions firstEmail = CreateEmailOptions.builder()
              .from("Acme <onboarding@resend.dev>")
              .to("foo@gmail.com")
              .subject("hello world")
              .html("<h1>it works!</h1>")
              .tags(Tag.builder()
                  .name("category")
                  .value("confirm_email")
                  .build())
              .build();

          CreateEmailOptions secondEmail = CreateEmailOptions.builder()
              .from("Acme <onboarding@resend.dev>")
              .to("bar@outlook.com")
              .subject("world hello")
              .html("<p>it works!</p>")
              .tags(Tag.builder()
                  .name("category")
                  .value("confirm_email")
                  .build())
              .build();

          CreateBatchEmailsResponse data = resend.batch().send(
              Arrays.asList(firstEmail, secondEmail)
          );
      }
  }
  ```

  ```csharp .NET {11,20} theme={null}
  using Resend;

  IResend resend = ResendClient.Create( "re_xxxxxxxxx" ); // Or from DI

  var mail1 = new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "foo@gmail.com",
      Subject = "hello world",
      HtmlBody = "<p>it works!</p>",
      Tags = new List<EmailTag> { new EmailTag { Name = "category", Value = "confirm_email" } }
  };

  var mail2 = new EmailMessage()
  {
      From = "Acme <onboarding@resend.dev>",
      To = "bar@outlook.com",
      Subject = "hello world",
      HtmlBody = "<p>it works!</p>",
      Tags = new List<EmailTag> { new EmailTag { Name = "category", Value = "confirm_email" } }
  };

  var resp = await resend.EmailBatchAsync( [ mail1, mail2 ] );
  Console.WriteLine( "Nr Emails={0}", resp.Content.Count );
  ```

  ```bash cURL {10-15,22-27} theme={null}
  curl -X POST 'https://api.resend.com/emails/batch' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'[
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["foo@gmail.com"],
      "subject": "hello world",
      "html": "<h1>it works!</h1>",
      "tags": [
        {
          "name": "category",
          "value": "confirm_email"
        }
      ]
    },
    {
      "from": "Acme <onboarding@resend.dev>",
      "to": ["bar@outlook.com"],
      "subject": "world hello",
      "html": "<p>it works!</p>",
      "tags": [
        {
          "name": "category",
          "value": "confirm_email"
        }
      ]
    }
  ]'
  ```
</CodeGroup>


# Custom receiving domains
Source: https://resend.com/docs/dashboard/receiving/custom-domains

Receive emails using your own domain.

<Warning>
  Receiving emails are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.4.0-canary.0
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-inbound-emails
    ```

    ```python Python theme={null}
    pip install resend==2.18.0a1
    ```

    ```ruby Ruby theme={null}
    gem install resend -v 0.27.0.alpha.1
    ```

    ```go Go theme={null}
    go get github.com/resend/resend-go/v2@v2.28.0-alpha.1
    ```

    ```rust Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Join the waitlist](https://resend.com/inbound) if you're interested in testing
  this feature.
</Warning>

Besides [using Resend-managed domains](/dashboard/receiving/introduction), you can also receive inbound emails using your own custom domain, such as `inbound.yourdomain.tld`.

Here's how to receive emails using a *new* custom domain.

## 1. Add the DNS record

First, [verify your domain](/dashboard/domains/introduction).

Receiving emails requires an extra MX record to work. You'll need to add this record to your DNS provider.

1. Go to the [Domains](https://resend.com/domains) page
2. Copy the MX record
3. Paste the MX record into your domain's DNS service

<img alt="Add DNS records for Receiving Emails" src="https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-custom-domain-dns.jpg?fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=0bb3258dbd1e9fc5efeb9ead53b219a2" data-og-width="2020" width="2020" data-og-height="1252" height="1252" data-path="images/inbound-custom-domain-dns.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-custom-domain-dns.jpg?w=280&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=a882e60e9e04b274a3c4aea87c1b724a 280w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-custom-domain-dns.jpg?w=560&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=fc842eded7a8e998f7c60229274fbb9b 560w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-custom-domain-dns.jpg?w=840&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=092bab71a2d0346a0f33adf203bd2d7a 840w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-custom-domain-dns.jpg?w=1100&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=5ee81468e5e7d2fcd7750de5c56da2d1 1100w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-custom-domain-dns.jpg?w=1650&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=74c4533ed87b3e90cbea2c2f44592e16 1650w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-custom-domain-dns.jpg?w=2500&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=924697ee58c2aeed93bffdedb8d20bd6 2500w" />

<Info>
  If you already have existing MX records for your domain (because you're already
  using it for a real inbox, for example), we recommend that you
  create a subdomain (e.g. `inbound.yourdomain.tld`) and add the MX record
  there. This way, you can use Resend for receiving emails without affecting
  your existing email service. Note that you will *not* receive emails at Resend
  if the required `MX` record is not the lowest priority value for the domain.

  Alternatively, you can configure your email service to forward emails to an address
  that's configured in Resend or forward them directly to the SMTP server address
  that appears in the receiving `MX` record.
</Info>

## 2. Configure webhooks

Next, create a new webhook endpoint to receive email events.

1. Go to the [Webhooks](https://resend.com/webhooks) page
2. Click "Add Webhook"
3. Enter the URL of your webhook endpoint
4. Select the event type `email.received`
5. Click "Add"

<img alt="Add Webhook for Receiving Emails" src="https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-webhook-setup.jpg?fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=55ae3e35788d91065d59ff4ddebff7e6" data-og-width="1110" width="1110" data-og-height="1016" height="1016" data-path="images/inbound-webhook-setup.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-webhook-setup.jpg?w=280&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=c1ab7b7abe91256abe3c6279e6c5fc54 280w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-webhook-setup.jpg?w=560&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=056e826ed3f8973769fbcf95e0a4f865 560w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-webhook-setup.jpg?w=840&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=1525d4904fe88bd251197962d9945180 840w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-webhook-setup.jpg?w=1100&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=bcf3794f7fb2061f779ab89e9ca18a74 1100w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-webhook-setup.jpg?w=1650&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=758330d8589abab096d404aa1dba48d6 1650w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-webhook-setup.jpg?w=2500&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=461272d7946d358ef8d6459576e11f48 2500w" />

## 3. Receive email events

In your application, create a new route that can accept `POST` requests.

For example, here's how you can add an API route in a Next.js application:

```js app/api/events/route.ts theme={null}
import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';

export const POST = async (request: NextRequest) => {
  const event = await request.json();

  if (event.type === 'email.received') {
    return NextResponse.json(event);
  }

  return NextResponse.json({});
};
```

Once you receive the email event, you can process the email body and attachments. We also recommend implementing [webhook request verification](/dashboard/webhooks/verify-webhooks-requests) to secure your webhook endpoint.

```json  theme={null}
{
  "type": "email.received",
  "created_at": "2024-02-22T23:41:12.126Z",
  "data": {
    "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
    "created_at": "2024-02-22T23:41:11.894719+00:00",
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "Sending this example",
    "attachments": [
      {
        "id": "2a0c9ce0-3112-4728-976e-47ddcd16a318",
        "filename": "avatar.png",
        "content_type": "image/png",
        "content_disposition": "inline",
        "content_id": "img001"
      }
    ]
  }
}
```

## Enabling receiving for an existing domain

If you already have a verified domain, you can enable receiving by using the toggle in the receiving section of the domain details page.

<img alt="Enable Receiving Emails for a verified domain" src="https://mintcdn.com/resend/cxinN79qDVOa7Vo6/images/inbound-enable-receiving.jpg?fit=max&auto=format&n=cxinN79qDVOa7Vo6&q=85&s=43ea9fce84b46236ce4d58efc6004a24" data-og-width="1982" width="1982" data-og-height="1232" height="1232" data-path="images/inbound-enable-receiving.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/cxinN79qDVOa7Vo6/images/inbound-enable-receiving.jpg?w=280&fit=max&auto=format&n=cxinN79qDVOa7Vo6&q=85&s=3c76eb84c02f6d0a5a890204bae236a9 280w, https://mintcdn.com/resend/cxinN79qDVOa7Vo6/images/inbound-enable-receiving.jpg?w=560&fit=max&auto=format&n=cxinN79qDVOa7Vo6&q=85&s=b79868ee661c6149b78eb181bc40597a 560w, https://mintcdn.com/resend/cxinN79qDVOa7Vo6/images/inbound-enable-receiving.jpg?w=840&fit=max&auto=format&n=cxinN79qDVOa7Vo6&q=85&s=db77934a0b485d02862fb1098b9f494d 840w, https://mintcdn.com/resend/cxinN79qDVOa7Vo6/images/inbound-enable-receiving.jpg?w=1100&fit=max&auto=format&n=cxinN79qDVOa7Vo6&q=85&s=df953f7ff8d363d4942757a7036f45e3 1100w, https://mintcdn.com/resend/cxinN79qDVOa7Vo6/images/inbound-enable-receiving.jpg?w=1650&fit=max&auto=format&n=cxinN79qDVOa7Vo6&q=85&s=ea0d5b5de643c3265e4ae5c3e6569c1b 1650w, https://mintcdn.com/resend/cxinN79qDVOa7Vo6/images/inbound-enable-receiving.jpg?w=2500&fit=max&auto=format&n=cxinN79qDVOa7Vo6&q=85&s=c6ce33152b38b091ea3e93b1f74495b9 2500w" />

After enabling receiving, you'll see a modal showing the MX record that you need to add to your DNS provider to start receiving emails.

Once you add the MX record, confirm by clicking the "I've added the record" button and wait for the receiving record to show as "verified".

## Creating a custom domain for receiving emails using the API

Besides creating a domain in the dashboard, you can also create a domain using the [Create Domain API](/api-reference/domains/create-domain).

For that, you must include the `capability` parameter, which can take `send`, `receive`, or `send-and-receive` as values.

```js  theme={null}
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

const domain = await resend.domains.create({
  name: 'inbound.yourdomain.tld',
  capability: 'send-and-receive',
});
```

## FAQ

<AccordionGroup>
  <Accordion title="What happens if I already have MX records for my domain?">
    If you already have existing MX records for your domain, we recommend that you
    create a subdomain (e.g. `inbound.yourdomain.tld`) and add the MX record
    there.

    That's because emails will usually only be delivered to the MX record with the lowest
    priority value. Therefore, if you add Resend's MX record to your root domain alongside existing MX records,
    it will either not receive any emails at all (if the existing MX records have a lower priority),
    or it will interfere with your existing email service (if Resend's MX record has a lower priority). If you
    use the same priority, email delivery will be unpredictable and may hit either Resend or your existing email
    service.

    If you still want to use the same domain both in for Resend and your day-to-day
    email service, you can also set up forwarding rules in your existing email service
    to forward emails to an address that's configured in Resend or forward them directly
    to the SMTP server address that appears in the receiving `MX` record.
  </Accordion>

  <Accordion title="I have already verified my domain for sending. Do I need to verify it again for receiving?">
    No, you do not need to verify your entire domain again. If you already have a
    verified domain for sending, you can simply enable receiving for that domain,
    add the required MX record to your DNS provider, and click "I've added the record"
    to start verifying *only* the MX record.
  </Accordion>
</AccordionGroup>


# Introduction
Source: https://resend.com/docs/dashboard/receiving/introduction

Receive emails via webhooks.

<Warning>
  Receiving emails are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.4.0-canary.0
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-inbound-emails
    ```

    ```python Python theme={null}
    pip install resend==2.18.0a1
    ```

    ```ruby Ruby theme={null}
    gem install resend -v 0.27.0.alpha.1
    ```

    ```go Go theme={null}
    go get github.com/resend/resend-go/v2@v2.28.0-alpha.1
    ```

    ```rust Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Join the waitlist](https://resend.com/inbound) if you're interested in testing
  this feature.
</Warning>

Resend supports receiving emails (commonly called inbound) in addition to sending emails. This is useful for:

* Receiving support emails from users
* Processing forwarded attachments
* Replying to emails from customers

## How does it work

Resend processes all incoming emails for a domain, parses the contents and attachments, and then sends a `POST` request to an endpoint that you choose.

To receive emails, you can either use a domain managed by Resend, or [set up a custom domain](/dashboard/receiving/custom-domains).

Here's how to start receiving emails using a domain managed by Resend.

## 1. Get your `.resend.app` domain

Any emails sent to an `<anything>@your-generated-domain.resend.app` address will be received by Resend and forwarded to your webhook.

To see your Resend domain:

1. Go to the emails page,
2. Select the "receiving" tab
3. Click the three dots button and select "Inbound address"

<img alt="Get your Resend domain" src="https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-resend-domain.jpg?fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=01910526f7e6e142094b4ca862f4fdeb" data-og-width="2060" width="2060" data-og-height="520" height="520" data-path="images/inbound-resend-domain.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-resend-domain.jpg?w=280&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=373a92a16c299a2175dee87047bcd242 280w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-resend-domain.jpg?w=560&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=d0fa7d8640ed3bbab3516be30f9cc343 560w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-resend-domain.jpg?w=840&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=e7b88faeab61c4cb8b7549e3d2f1255e 840w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-resend-domain.jpg?w=1100&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=7907f9fdce5f911c758dbe77447c801b 1100w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-resend-domain.jpg?w=1650&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=8fd7e588063b1760030fed80305f1155 1650w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-resend-domain.jpg?w=2500&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=96427a0b5252e90cbe41d5ad992dcbc4 2500w" />

## 2. Configure webhooks

1. Go to the [Webhooks](https://resend.com/webhooks) page
2. Click "Add Webhook"
3. Enter the URL of your webhook endpoint
4. Select the event type `email.received`
5. Click "Add"

<Tip>
  For develoment, you can create a tunnel to your localhost server using a tool like
  [ngrok](https://ngrok.com/download) or [VS Code Port Forwarding](https://code.visualstudio.com/docs/debugtest/port-forwarding). These tools serve your local dev environment at a public URL you can use to test your local webhook endpoint.

  Example: `https://example123.ngrok.io/api/webhook`
</Tip>

<img alt="Add Webhook for Receiving Emails" src="https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-webhook-setup.jpg?fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=55ae3e35788d91065d59ff4ddebff7e6" data-og-width="1110" width="1110" data-og-height="1016" height="1016" data-path="images/inbound-webhook-setup.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-webhook-setup.jpg?w=280&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=c1ab7b7abe91256abe3c6279e6c5fc54 280w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-webhook-setup.jpg?w=560&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=056e826ed3f8973769fbcf95e0a4f865 560w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-webhook-setup.jpg?w=840&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=1525d4904fe88bd251197962d9945180 840w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-webhook-setup.jpg?w=1100&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=bcf3794f7fb2061f779ab89e9ca18a74 1100w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-webhook-setup.jpg?w=1650&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=758330d8589abab096d404aa1dba48d6 1650w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-webhook-setup.jpg?w=2500&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=461272d7946d358ef8d6459576e11f48 2500w" />

## 3. Receive email events

In your application, create a new route that can accept `POST` requests.

For example, here's how you can add an API route in a Next.js application:

```js app/api/events/route.ts theme={null}
import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';

export const POST = async (request: NextRequest) => {
  const event = await request.json();

  if (event.type === 'email.received') {
    return NextResponse.json(event);
  }

  return NextResponse.json({});
};
```

Once you receive the email event, you can process the email body and attachments. We also recommend implementing [webhook request verification](/dashboard/webhooks/verify-webhooks-requests) to secure your webhook endpoint.

```json  theme={null}
{
  "type": "email.received",
  "created_at": "2024-02-22T23:41:12.126Z",
  "data": {
    "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
    "created_at": "2024-02-22T23:41:11.894719+00:00",
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "Sending this example",
    "attachments": [
      {
        "id": "2a0c9ce0-3112-4728-976e-47ddcd16a318",
        "filename": "avatar.png",
        "content_type": "image/png",
        "content_disposition": "inline",
        "content_id": "img001"
      }
    ]
  }
}
```

## View received emails in the dashboard

You can see all received email events in the [emails](https://resend.com/emails?mode=receiving) page in the dashboard. Resend
will store your emails even if you don't configure a webhook or if your webhook endpoint is down.

There, you will be able to filter emails by their `to`, `from`, and `subject` fields. You can also filter
for the date the email was received.

<img alt="Received email list in the Dashboard" src="https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-emails-list.jpg?fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=c08ed1113f95e151d23158cde94ecc36" data-og-width="2166" width="2166" data-og-height="796" height="796" data-path="images/inbound-emails-list.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-emails-list.jpg?w=280&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=f69c2699c6f45b3bb6b6a38223cef767 280w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-emails-list.jpg?w=560&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=f32c18e5a3974d4482b8ff721c98c202 560w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-emails-list.jpg?w=840&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=02ed074d9fa1ead701257dac1a2685cd 840w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-emails-list.jpg?w=1100&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=8ffeb267dfff0aeb4e148ea78cb2ee3f 1100w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-emails-list.jpg?w=1650&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=ecc05948197f06bc52f575fb273000ea 1650w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-emails-list.jpg?w=2500&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=22d7a47fa3669012725cfeea6df31937 2500w" />

Within each email, you can see the full details of the email, including the HTML and Plain Text body, as well as any attachments.

<img alt="Details for a particular received email" src="https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-emails-details.jpg?fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=bde58157b5715fa3fd5be13617a4249f" data-og-width="2074" width="2074" data-og-height="1026" height="1026" data-path="images/inbound-emails-details.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-emails-details.jpg?w=280&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=5fcb721d9f77c0da3564844d37c84bfc 280w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-emails-details.jpg?w=560&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=bb6c095a88a042a6e5c89f24de92a97e 560w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-emails-details.jpg?w=840&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=07cf136270283a8b5e8d34a7c64d4727 840w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-emails-details.jpg?w=1100&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=def123236f11b0667dcdd053ea42fc4c 1100w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-emails-details.jpg?w=1650&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=a4bb4960aeb0bab9ec65c62977f1a320 1650w, https://mintcdn.com/resend/1QlhxulUFE6jxYM_/images/inbound-emails-details.jpg?w=2500&fit=max&auto=format&n=1QlhxulUFE6jxYM_&q=85&s=c90cb34629e309dc1e61fbd088fb5202 2500w" />

<Info>
  You can also list received emails using the API or SDKs. See the [List
  Receiving Emails API](/api-reference/emails/list-received-emails) for more
  information.
</Info>

## How to get the email body and headers

Inbound emails contain the HTML and Plain Text body of the email, as well as the headers.

<Info>
  Webhooks do not include the actual HTML or Plain Text body of the email. You
  must call the [received emails
  API](/api-reference/emails/retrieve-received-email) to retrieve them. This
  design choice supports large payloads in serverless environments that have
  limited request body sizes.
</Info>

After receiving the webhook event, call the [Receiving API](/api-reference/emails/retrieve-received-email), as well as the [Attachments API](/api-reference/attachments/list-received-email-attachments) if you want attachment data. Then send the email using the [Send Email API](/api-reference/emails/send-email).

Here's an example in a Next.js application:

```js app/api/events/route.ts theme={null}
import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

export const POST = async (request: NextRequest) => {
  const event = await request.json();

  if (event.type === 'email.received') {
    const { data: email } = await resend
      .emails
      .receiving
      .get(event.data.email_id);

    console.log(email.html);
    console.log(email.text);
    console.log(email.headers);

    return NextResponse.json(email);
  }

  return NextResponse.json({});
};
```

## How to process attachments

A common use case for inbound emails is to process attachments.

<Info>
  Webhooks do not include the actual content of attachments, only their
  metadata. You must call the [Attachments
  API](/api-reference/attachments/list-received-email-attachments) to retrieve
  the content. This design choice supports large attachments in serverless
  environments that have limited request body sizes.
</Info>

Users can forward airplane tickets, receipts, and expenses to you. Then, you can extract key information from attachments and use that data.

To do this, call the [Attachments API](/api-reference/attachments/list-received-email-attachments) after receiving the webhook event. That API will return a list of attachments with their metadata and a `download_url` that you can use to download the actual content.

Note that the `download_url` is valid for 1 hour. After that, you will need to call the
[Attachments API](/api-reference/attachments/list-received-email-attachments)
again to get a new `download_url`. You can also check the `expires_at` field on
each attachment to see exactly when it will expire.

Here's an example of getting attachment data in a Next.js application:

```js app/api/events/route.ts theme={null}
import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

export const POST = async (request: NextRequest) => {
  const event = await request.json();

  if (event.type === 'email.received') {
    const { data: attachments } = await resend
      .attachments
      .receiving
      .list({ emailId: event.data.email_id });

    for (const attachment of attachments) {
      // use the download_url to download attachments however you want
      const response = await fetch(attachment.download_url);
      if (!response.ok) {
        console.error(`Failed to download ${attachment.filename}`);
        continue;
      }

      // get the file's contents
      const buffer = Buffer.from(await response.arrayBuffer());

      // process the content (e.g., save to storage, analyze, etc.)
    }

    return NextResponse.json({ attachmentsProcessed: attachments.length });
  }

  return NextResponse.json({});
};
```

## How to forward emails

Inbound emails can also be forwarded to another email address.

<Info>
  Webhooks do not include the actual HTML or Plain Text body of the email. You
  must call the [received emails
  API](/api-reference/emails/retrieve-received-email) to retrieve them. This
  design choice supports large payloads in serverless environments that have
  limited request body sizes.
</Info>

To forward an email, use the [Send Email API](/api-reference/emails/send-email).

After receiving the webhook event, call the [Receiving API](/api-reference/emails/retrieve-received-email), as well as the [Attachments API](/api-reference/attachments/list-received-email-attachments) if you want attachment data. Then send the email using the [Send Email API](/api-reference/emails/send-email).

Here's an example of forwarding an email in a Next.js application:

```js app/api/events/route.ts theme={null}
import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

export const POST = async (request: NextRequest) => {
  const event = await request.json();

  if (event.type === 'email.received') {
    const { data: email } = await resend
      .emails
      .receiving
      .get(event.data.email_id);

    const { data: attachments } = await resend
      .attachments
      .receiving
      .list({ emailId: event.data.email_id });

    // download the attachments and encode them in base64
    for (const attachment of attachments.data) {
      const response = await fetch(attachment.download_url);
      const buffer = Buffer.from(await response.arrayBuffer());
      attachment.content = buffer.toString('base64');
    }

    const { data, error } = await resend.emails.send({
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: event.data.subject,
      html: email.html,
      text: email.text,
      attachments
    });

    return NextResponse.json(data);
  }

  return NextResponse.json({});
};
```

## How to reply to emails

The way email clients handle threads is by using something called a `message_id`.

If you want to reply to an email, you should add the `In-Reply-To` header set to the `message_id` of the received email. We also recommend setting the subject to start with `Re:` so that email clients can group the messages together.

By setting that header and a compatible subject, email clients will be able to group the messages together in a thread.

```js app/api/events/route.ts theme={null}
import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

export const POST = async (request: NextRequest) => {
  const event = await request.json();

  if (event.type === 'email.received') {
    const { data, error } = await resend.emails.send({
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: `Re: ${event.data.subject}`,
      html: '<p>Thanks for your email!</p>',
      headers: {
        'In-Reply-To': event.data.message_id,
      },
      attachments
    });

    return NextResponse.json(data);
  }

  return NextResponse.json({});
};
```

<Info>
  If you're replying multiple times within the same thread, make sure to also append
  the previous `message_id`s to the `References` header, separated by spaces.
  This helps email clients maintain the correct threading structure.

  ```js  theme={null}
  const previousReferences = ['<msg_id1@domain.com>', '<msg_id2@domain.com>'];

  const { data, error } = await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: `Re: ${event.data.subject}`,
    html: '<p>Thanks for your email!</p>',
    headers: {
      'In-Reply-To': event.data.message_id,
      'References': [...previousReferences, event.data.message_id].join(' '),
    },
    attachments,
  });
  ```
</Info>

## FAQ

<AccordionGroup>
  <Accordion title="Will I receive emails for any address at my domain?">
    Yes. Once you add the MX record to your domain, you will receive emails for
    any address at that domain.

    For example, if your domain is `cool-hedgehog.resend.app`, you will receive
    emails sent to `anything@cool-hedgehog.resend.app`. You can then filter or
    route based on the `to` field in the webhook event.

    The same applies to [custom domains](/dashboard/receiving/custom-domains). If
    your domain is `inbound.yourdomain.tld`, you will receive emails sent to
    `anything@inbound.yourdomain.tld`.
  </Accordion>

  <Accordion title="Can I receive emails on a subdomain?">
    Yes. You can add the MX record to any subdomain (e.g.
    `inbound.yourdomain.tld`) and receive emails there.
  </Accordion>

  <Accordion title="Should I add the `MX` records for my root domain or a subdomain?">
    If you already have existing MX records for your root domain, we recommend
    that you create a subdomain (e.g. `inbound.yourdomain.tld`) and add the MX
    record there. This way, you can use Resend for receiving emails without
    affecting your existing email service.

    If you still want to use the same domain both in for Resend and your day-to-day
    email service, you can also set up forwarding rules in your existing email service
    to forward emails to an address that's configured in Resend or forward them directly
    to the SMTP server address that appears in the receiving `MX` record.
  </Accordion>

  <Accordion title="Will I lose my emails if my webhook endpoint is down?">
    No, you will not lose your emails. Resend stores emails as soon as they come
    in.

    Even if your webhook endpoint is down, you can still see your emails in
    the dashboard and retrieve them using the [Receiving
    API](/api-reference/emails/retrieve-received-email).

    Additionally, we will retry delivering the webhook event on the schedule
    described in our [webhooks documentation](/dashboard/webhooks/introduction#faq)
    and you can also replay individual webhook events from the
    [webhooks](/dashboard/webhooks/introduction) page in the dashboard.
  </Accordion>

  <Accordion title="How can I make sure that it's Resend who's sending me webhooks?">
    All of Resend's webhooks include a secret and headers that you can use to verify
    the authenticity of the request.

    If you're using the alpha version of our SDKs, you can verify webhooks using
    `resend.webhooks.verify()`, as shown below.

    ```js  theme={null}
    // throws an error if the webhook is invalid
    // otherwise, returns the parsed payload object
    const result = resend.webhooks.verify({
      payload: JSON.stringify(req.body),
      headers: {
        id: req.headers['svix-id'],
        timestamp: req.headers['svix-timestamp'],
        signature: req.headers['svix-signature'],
      },
      webhookSecret: process.env.RESEND_WEBHOOK_SECRET,
    })
    ```

    You can find more code samples and instructions on how to verify webhooks in the
    [webhook verification documentation](/dashboard/webhooks/verify-webhooks-requests).
  </Accordion>
</AccordionGroup>


# Managing Billing
Source: https://resend.com/docs/dashboard/settings/billing

Manage your account subscription and billing information

The [Billing](https://resend.com/settings/billing) page in the Settings section provides a clear view of your subscription details, billing email, payment method, and account invoices. From here, you can:

* View and manage your subscription - Upgrade, downgrade, or modify your current plan.
* Manage billing contacts - Ensure the right people receive billing-related notifications.
* Update payment information - Add or change your credit card or billing details.
* Access invoices - Download past invoices for your records.

For any other billing inquiries, please [contact support](https://resend.com/help).

## How to cancel your subscription

1. Go to the [Billing](https://resend.com/settings/billing) page.
2. Click on the three dots <span className="inline-block align-middle"><Icon icon="ellipsis" iconType="solid" /></span> next to your plan.
3. Select **Cancel Subscription** from the dropdown menu.

<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-billing.jpg?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3331d4b449ffd37fc0fe24f89e6f7dde" alt="Cancel subscription" data-og-width="2314" width="2314" data-og-height="724" height="724" data-path="images/dashboard-billing.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-billing.jpg?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1a9d4807eddeb11ee55d31914af6b363 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-billing.jpg?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=93559b85cae5f42352a091f41621321c 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-billing.jpg?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d865eeef146bb02417981f57ce9bf405 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-billing.jpg?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=397ffe3fa7605fbc7fd721c8868e2c95 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-billing.jpg?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5e9a367b473632558aac454ef346ca0c 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-billing.jpg?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=073b6617f1e86dab5cc6d8c096241869 2500w" />


# Managing Teams
Source: https://resend.com/docs/dashboard/settings/team

Manage your account across multiple teams

Resend allows multiple teams to be managed under a single email address. Each team is distinct, with its own API keys, billing, and usage.

## Inviting new members to a team

1. Navigate to your [**Team Settings**](https://resend.com/settings/team).
2. Click **Invite**. Input an email address and select a role (**Admin** or **Member**).
   * **Members** have access to manage emails, domains and webhooks.
   * **Admins** have all Member permissions plus the ability to invite users, update payments, and delete the team.
3. The new member will receive an email invitation to join the team.

## Add a team avatar

1. Navigate to your [**Team Settings**](https://resend.com/settings/team).
2. Click **Upload Image** next to the avatar placeholders.
3. Upload an image file to use as the team avatar.

<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/team-avatars.mp4?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=65055e2c2d2652e8791f2aa997f4cb1e" data-path="images/team-avatars.mp4" />

## Switching between teams

After accepting an invite from the account owner, users can switch between teams:

1. Click on the **team name** in the top left corner of any Resend page.
2. A dropdown menu will appear, listing all the teams you belong to.
3. Select a team to switch between them.

<img src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/teams-toggle.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d873d8c43f65af895d4fb025648f59d9" alt="image" data-og-width="1366" width="1366" data-og-height="852" height="852" data-path="images/teams-toggle.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/teams-toggle.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=a09af3c924b6625b8b6568152a83bc8e 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/teams-toggle.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=06d4cd9dd1875f29571a6ea018718168 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/teams-toggle.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8d441a296118cb26f134a5516b972be5 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/teams-toggle.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=208dc74b8b568d1dec588e9c56d503ef 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/teams-toggle.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=a387c0b7a8552245e204b302907d0f2b 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/teams-toggle.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=183de952658ae3acf41c53d1f9e9acc2 2500w" />

## Change the team member roles

As an admin of your team, you can change the role of members in your team.

1. Navigate to your [**Team Settings**](https://resend.com/settings/team).
2. Find the user you want to change.
3. Select the more options button <span className="inline-block align-middle"><Icon icon="ellipsis" iconType="solid" /></span> and choose **Change role**.

<img alt="Change role popover visible for team member" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/how-can-i-change-team-roles-1.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=656430ad540c2b6143998583b2a71c97" data-og-width="3360" width="3360" data-og-height="2100" height="2100" data-path="images/how-can-i-change-team-roles-1.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/how-can-i-change-team-roles-1.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b18c75884be5341d88edc800a15d415b 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/how-can-i-change-team-roles-1.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=cfaaf8f4c8fb0526d4b65bd34280bd88 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/how-can-i-change-team-roles-1.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5b0c76ef8046037d021a503a3deb42d6 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/how-can-i-change-team-roles-1.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c7637dab7cced018239d356da5567f58 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/how-can-i-change-team-roles-1.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=a9ebec726b960e33d32d91f80b94b298 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/how-can-i-change-team-roles-1.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=75782d379db26dbb425d32334ea5c25b 2500w" />

Upon confirmation, your team member will be given the new role.

## Leave your Resend team

If your team has another admin, you can leave your team by following these steps:

1. Navigate to your [**Team Settings**](https://resend.com/settings/team).
2. Under members, click on <span className="inline-block align-middle"><Icon icon="ellipsis" iconType="solid" /></span> next to your name for more options.
3. Select the **Leave Team** button.

Upon confirmation, you will leave your team.


# Custom Unsubscribe Page
Source: https://resend.com/docs/dashboard/settings/unsubscribe-page

Customize your unsubscribe page

When sending to Resend Audiences, Resend can [automatically handle the unsubscribe flow for you](/dashboard/audiences/introduction#automatic-unsubscribes).

You can customize your unsubscribe page to match your brand. Your unsubscribe page is used for every domain on your team.

1. Navigate to your [**Unsubscribe Page**](https://resend.com/settings/unsubscribe-page).
2. Click **Edit**.

You can customize the following:

* **Title**: The title of the unsubscribe page.
* **Description**: The description of the unsubscribe page.
* **Logo**: The logo of the unsubscribe page.
* **Background Color**: The background color of the unsubscribe page.
* **Text Color**: The text color of the unsubscribe page.
* **Accent Color**: The accent color of the unsubscribe page.

<video autoPlay muted loop playsinline className="w-full aspect-video" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/unsubscribe-page.mp4?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=266f1b0fcd095ad8bb79cfb70ce6fb52" data-path="images/unsubscribe-page.mp4" />

<Note>
  Pro plan users or higher can also remove the “Powered by Resend” footer.
</Note>


# Using Templates
Source: https://resend.com/docs/dashboard/templates/introduction

Learn how to use templates to send emails.

<Warning>
  Templates are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-templates
    ```

    ```python Python theme={null}
    # Python SDK is not available yet
    ```

    ```ruby Ruby theme={null}
    # Ruby SDK is not available yet
    ```

    ```go Go theme={null}
    // Go SDK is not available yet
    ```

    ```bash Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

Using email templates, you can define the structure and layout of a message. You can include custom variables that will be replaced with the actual values when sending the email.

Templates can be used in a variety of email types:

* Login/Auth
* Onboarding
* Ecommerce
* Notifications
* Newsletters

## Add a template

There are two ways to add a template:

1. [Add a template in the dashboard](#add-a-template-in-the-dashboard)
2. [Import an HTML or React Email file](#import-an-html-or-react-email-file)
3. [Create a template by using the API](#create-a-template-by-using-the-api)

### Add a template in the dashboard

The [Templates dashboard](https://resend.com/templates) shows all existing templates.

<img alt="Add a template" src="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-dashboard.png?fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=122936f4340769f15725612945c38ee2" data-og-width="3736" width="3736" data-og-height="1916" height="1916" data-path="images/templates-introduction-dashboard.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-dashboard.png?w=280&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=154527a0c98dbeeea164d7bcb4836ea7 280w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-dashboard.png?w=560&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=d089a6e8952ccedf77c1fa3108e309bd 560w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-dashboard.png?w=840&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=09daeb6e752e467730e5766b3c47da34 840w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-dashboard.png?w=1100&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=1b7d95e71747b738afe7e95820714a25 1100w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-dashboard.png?w=1650&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=c81c025ec8d6fc185dd1bef42471924d 1650w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-dashboard.png?w=2500&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=7d6a74f2777a7e11c4c0e964042855d8 2500w" />

Click **Create template** to start a new template.

<img alt="Create or import a template" src="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-create-import.png?fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=95ed9013f54b2b6b8d00c2431ee14291" data-og-width="3736" width="3736" data-og-height="1916" height="1916" data-path="images/templates-introduction-create-import.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-create-import.png?w=280&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=52eeb5f02e47ab0d0a65f06d5a8a6009 280w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-create-import.png?w=560&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=f0dad9ff04cf70eff2d55d746c0192b7 560w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-create-import.png?w=840&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=e9a268ed1a30c170f57a2ecc47287908 840w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-create-import.png?w=1100&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=c976cbedd84baf9028d888f25f7f8343 1100w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-create-import.png?w=1650&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=a22e8db305eb008d0132ba8a18363439 1650w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-create-import.png?w=2500&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=d8edb28d29ebc4384c269542d1543295 2500w" />

The no-code editor allows you to create an email template using a visual editor. To add a variable, select **Variable** in the commands palette or type `{{` in the editor.

<img alt="variable dropdown" src="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables.png?fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=5ed606e1eb2c76a04b36c72bbbed2e80" data-og-width="3736" width="3736" data-og-height="1916" height="1916" data-path="images/templates-introduction-variables.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables.png?w=280&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=ceb5600e57450da3783b102385346ba8 280w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables.png?w=560&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=19bc48844e59daa314f6d4d6d8d73d77 560w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables.png?w=840&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=adc79f851c7779d12c5aa1416ff58212 840w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables.png?w=1100&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=7d82fd7bc83a487056672b49ac077e3b 1100w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables.png?w=1650&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=9794117d9d29ffcdc8abbf1296eee10e 1650w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables.png?w=2500&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=11218b397da088db99d6c2173f32e876 2500w" />

### Import an HTML or React Email file

You can also import an HTML or [React Email](https://react.email) file to create a template from your existing code. After importing, you can edit the template in the no-code editor and add variables as needed.

<img alt="import html" src="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-import.png?fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=917821b107b8c7fd56c3484098aeffa7" data-og-width="3736" width="3736" data-og-height="1916" height="1916" data-path="images/templates-introduction-import.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-import.png?w=280&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=8f2b02d98f976cdbc7729ad518007ffd 280w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-import.png?w=560&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=b6ea9fa195fd27eb36bb00ca4611b7b0 560w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-import.png?w=840&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=6d7f7063459824f62e6a9dbef6c26a17 840w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-import.png?w=1100&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=e2bcb59fbda4de20264ca52977a93e84 1100w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-import.png?w=1650&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=1ab393db8918528d1c8db0e22a357f75 1650w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-import.png?w=2500&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=052b3248493f06c32617faca487f9e19 2500w" />

### Create a template by using the API

Finally, programmatically create a template by using the API. The payload can optionally include variables to be used in the template.

<CodeGroup>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  await resend.templates.create({
    name: 'welcome-email',
    html: '<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>',
    variables: [
      {
        key: 'NAME',
        type: 'string',
        fallbackValue: 'user',
      },
      {
        key: 'AGE',
        type: 'number',
        fallbackValue: 25,
      },
      {
        key: 'OPTIONAL_VARIABLE',
        type: 'string',
      },
    ],
  });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->templates->create([
    'name' => 'welcome-email',
    'html' => '<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>',
    'variables' => [
      [
        'key' => 'NAME',
        'type' => 'string',
        'fallback_value' => 'user',
      ],
      [
        'key' => 'AGE',
        'type' => 'number',
        'fallback_value' => 25,
      ],
      [
        'key' => 'OPTIONAL_VARIABLE',
        'type' => 'string',
      ],
    ],
  ]);
  ```

  ```python Python theme={null}
  # Python SDK is not available yet
  ```

  ```ruby Ruby theme={null}
  # Ruby SDK is not available yet
  ```

  ```go Go theme={null}
  // Go SDK is not available yet
  ```

  ```rust Rust theme={null}
  // Rust SDK is not available yet
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/templates' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "name": "welcome-email",
    "html": "<strong>Hey, {{{NAME}}}, you are {{{AGE}}} years old.</strong>",
    "variables": [
      {
        "key": "NAME",
        "type": "string",
        "fallback_value": "user"
      },
      {
        "key": "AGE",
        "type": "number",
        "fallback_value": 25
      },
      {
        "key": "OPTIONAL_VARIABLE",
        "type": "string"
      }
    ]
  }'
  ```
</CodeGroup>

View the [API reference](/api-reference/templates/create-template) for more details.

## Duplicate a template

You can also duplicate an existing template in the dashboard or [via the API](/api-reference/templates/duplicate-template).

<img alt="Duplicate a template" src="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-duplicate.png?fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=7ab6540e299e1581dc67a66a2a5cba5a" data-og-width="3736" width="3736" data-og-height="1916" height="1916" data-path="images/templates-introduction-duplicate.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-duplicate.png?w=280&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=35eee0c8da4c1dbb4c0cba5363a72e59 280w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-duplicate.png?w=560&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=efaacdd49801eeebf45ec894f54e1801 560w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-duplicate.png?w=840&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=6c1162b2dc30d992552d23babe221c55 840w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-duplicate.png?w=1100&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=e933241481cf2604008ac2ee9bb2774c 1100w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-duplicate.png?w=1650&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=88314737f1c5166e9669ef9ef6a9e90b 1650w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-duplicate.png?w=2500&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=f102cd1021a8174642493d2fb3123672 2500w" />

## Publish a template

By default, templates are in a **draft** state. To use a template to send emails, you must first **publish** it via the dashboard or [via the API](/api-reference/templates/publish-template).

<img alt="Publish a template" src="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-publish.png?fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=24edc7cc47febd4802a750209062a64c" data-og-width="3736" width="3736" data-og-height="1916" height="1916" data-path="images/templates-introduction-publish.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-publish.png?w=280&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=dc371328e63c8985f1f96cc01a451c6a 280w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-publish.png?w=560&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=ee48c685e74f22986d5653ae4bc3d60d 560w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-publish.png?w=840&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=09d6a2f1c48bef0153ddef0d21e101d0 840w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-publish.png?w=1100&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=53c1d9be5c503cdb36334fedd450cebe 1100w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-publish.png?w=1650&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=20359d83e50c180a0e926bcd66a814e6 1650w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-publish.png?w=2500&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=b72f7684bacecd051956fb8feab65ff9 2500w" />

Once a template is published, you can continue to edit it without impacting existing emails sent using the template. Only after publishing again will the changes be reflected in emails using the template.

## Adding variables

Resend supports both contact and custom variables. Each template may contain up to 20 variables.

<img alt="variable dropdown" src="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables.png?fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=5ed606e1eb2c76a04b36c72bbbed2e80" data-og-width="3736" width="3736" data-og-height="1916" height="1916" data-path="images/templates-introduction-variables.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables.png?w=280&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=ceb5600e57450da3783b102385346ba8 280w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables.png?w=560&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=19bc48844e59daa314f6d4d6d8d73d77 560w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables.png?w=840&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=adc79f851c7779d12c5aa1416ff58212 840w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables.png?w=1100&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=7d82fd7bc83a487056672b49ac077e3b 1100w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables.png?w=1650&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=9794117d9d29ffcdc8abbf1296eee10e 1650w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables.png?w=2500&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=11218b397da088db99d6c2173f32e876 2500w" />

Contact variables are automatically available in all templates and include:

* `{{{FIRST_NAME|fallback}}}`
* `{{{LAST_NAME|fallback}}}`
* `{{{EMAIL}}}`

Custom variables are defined when creating a template.

To add a custom variable, select **Variable** in the commands palette or type `{{` in the editor. Define the `name`, `type`, and `fallback_value` (optional).

<img alt="variable dropdown" src="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables-custom.png?fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=88a202c3830e629559bc01785a33a138" data-og-width="3736" width="3736" data-og-height="1916" height="1916" data-path="images/templates-introduction-variables-custom.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables-custom.png?w=280&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=a5285e2e208c558f5b87bf9c49ebc7c0 280w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables-custom.png?w=560&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=bdc3b34c446ab809b9fbfa55ada2c618 560w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables-custom.png?w=840&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=c3ad7c3d10f81af5eb1e8d8cae87e615 840w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables-custom.png?w=1100&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=9dc87687f6c3ff496a9983180c18c69b 1100w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables-custom.png?w=1650&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=846d0d2e07a5da37058c0460549e6bca 1650w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-variables-custom.png?w=2500&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=f8ffb3bb7a9856cc06308573ad81c2ca 2500w" />

You can also define custom variables via the API. The payload can optionally include variables to be used in the template.

Each variable is an object with the following properties:

* `key`: The key of the variable. We recommend capitalizing the key. (e.g. `FIRST_NAME`).
* `type`: The type of the variable. Possible values: `'string'`, `'number'`, `'boolean'`, `'object'`, and `'list'`.
* `fallback_value`: The fallback value of the variable. If no fallback value is provided, you must provide a value for the variable when sending an email using the template. `object` and `list` types must include a `fallback_value`.

[See the API reference for more details](/api-reference/templates/create-template).

## Delete a template

You can delete a template via the dashboard by clicking on the **Delete** button or [via the API](/api-reference/templates/delete-template).

<img alt="Delete a template" src="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-delete.png?fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=04278d60d1bbac949ce1b75821faa7af" data-og-width="3736" width="3736" data-og-height="1916" height="1916" data-path="images/templates-introduction-delete.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-delete.png?w=280&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=2c16442c49d254328369f6f9127d9aa7 280w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-delete.png?w=560&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=8b8e1c3d718093e0cad55b47375103ed 560w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-delete.png?w=840&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=6fbd79429988d2b51a1f4864434e2f45 840w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-delete.png?w=1100&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=2649c52e99aff2f419706461e350a355 1100w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-delete.png?w=1650&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=0eaf839f86dad0b968aeb6bb78acf8bd 1650w, https://mintcdn.com/resend/j2QOddewHJcRH5o-/images/templates-introduction-delete.png?w=2500&fit=max&auto=format&n=j2QOddewHJcRH5o-&q=85&s=132ed708e57e691e376e38ca23c480e9 2500w" />

## Using templates in transactional emails

When sending an email using a template, the template variables will be replaced with the actual values. Both the `/emails` and `/emails/batch` endpoints support templates.

<CodeGroup>
  ```ts Node.js theme={null}
  import { Resend } from 'resend';

  const resend = new Resend('re_xxxxxxxxx');

  const { data, error } = await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>,
    to: ['delivered@resend.dev'],
    subject: 'hello world',
    template: {
      id: 'f3b9756c-f4f4-44da-bc00-9f7903c8a83f',
      variables: {
        'NAME': 'John'
      }
    }
  });
  ```

  ```php PHP theme={null}
  $resend = Resend::client('re_xxxxxxxxx');

  $resend->emails->send([
    'from' => 'Acme <onboarding@resend.dev>',
    'to' => ['delivered@resend.dev'],
    'subject' => 'hello world',
    'template'=> [
      'id' => 'f3b9756c-f4f4-44da-bc00-9f7903c8a83f',
      'variables' => [
        'NAME' => 'John'
      ]
    ]
  ]);
  ```

  ```python Python theme={null}
  # Python SDK is not available yet
  ```

  ```ruby Ruby theme={null}
  # Ruby SDK is not available yet
  ```

  ```go Go theme={null}
  // Go SDK is not available yet
  ```

  ```rust Rust theme={null}
  // Rust SDK is not available yet
  ```

  ```java Java theme={null}
  // Java SDK is not available yet
  ```

  ```csharp .NET theme={null}
  // C# SDK is not available yet
  ```

  ```bash cURL theme={null}
  curl -X POST 'https://api.resend.com/emails' \
       -H 'Authorization: Bearer re_xxxxxxxxx' \
       -H 'Content-Type: application/json' \
       -d $'{
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "template": {
      "id": "f3b9756c-f4f4-44da-bc00-9f7903c8a83f",
      "variables": {
        "NAME": "John"
      }
    }
  }'
  ```
</CodeGroup>

Learn more about [sending emails](/api-reference/emails/send-email) or sending [batch emails](/api-reference/emails/send-batch-emails) with templates via the API.

## Validation errors

When sending an email using a template, the template variables will be replaced with the actual values. If a variable is not provided, the fallback value will be used.

If no fallback value is provided, the email will not be sent and a validation error will be returned.

[See the API reference for more details](/api-reference/templates/create-template) or the [errors reference](/api-reference/errors).


# Topics
Source: https://resend.com/docs/dashboard/topics/introduction

Give your users more control over their subscription preferences.

<Warning>
  Topics are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.3.0-canary.4
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-topics
    ```

    ```python Python theme={null}
    pip install resend==2.18.0a1
    ```

    ```ruby Ruby theme={null}
    gem install resend -v 0.27.0.alpha.1
    ```

    ```go Go theme={null}
    go get github.com/resend/resend-go/v2@v2.28.0-alpha.1
    ```

    ```bash Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Get in touch](https://resend.com/contact) if you're interested in testing
  this feature.
</Warning>

Managing subscribers and unsubscribers is a critical part of any email implementation. Topics are used by your contacts to manage their email preferences.

When you send [Broadcasts](/dashboard/broadcasts/introduction), you can optionally scope sending to a particular Topic. Not only does scoping your sending help you send more precisely, but it also allows your users to manage their preferences with more control.

<Note>
  Learn more about [customizing your team's unsubscribe
  page](/dashboard/settings/unsubscribe-page)
</Note>

## Add a Topic

You can create a new Topic from the [dashboard](https://resend.com/audience/topics) or [via the API](/api-reference/topics/create-topic).

1. Click **Create Topic**.
2. Give your Topic a name.
3. Give your Topic a description (optional).
4. Select **Opt-in** or **Opt-out** as the default subscription. This value **cannot** be changed later.
   * **Opt-in**: all Contacts will receive the email unless they have explicitly unsubscribed from that Topic.
   * **Opt-out**: subscribers will not receive the email unless they have explicitly subscribed to that Topic.

<img alt="Add Topic" src="https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-add.png?fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=fac13e0a761527fe345dcd9ca96a7947" height={450} width={720} data-og-width="3024" data-og-height="1896" data-path="images/dashboard-topics-add.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-add.png?w=280&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=495f893460153d638dac1f15e007a7b6 280w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-add.png?w=560&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=a4cc184822feb8234ec2f4b1b38079de 560w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-add.png?w=840&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=988dac90dccb320f58be601b5873d219 840w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-add.png?w=1100&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=f9b15657332ad72e8f92a3a9ec576620 1100w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-add.png?w=1650&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=c3730297b6a7959d50073660cc5f6e08 1650w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-add.png?w=2500&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=25582bd6bc01afaaa26f2531afe05bf9 2500w" />

## View all Topics

The [dashboard](https://resend.com/audience/topics) shows you all the Topics you have created along with their details.

<img alt="View All Topics" src="https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-view-all.png?fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=77018c532447e1135a8193537d5d11ed" data-og-width="3024" width="3024" data-og-height="1896" height="1896" data-path="images/dashboard-topics-view-all.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-view-all.png?w=280&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=d8a1760b666fd2b620bb1741ed63301d 280w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-view-all.png?w=560&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=3b23399da1f9bb8a6300d4229cc32a9b 560w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-view-all.png?w=840&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=5382def14d8e82095a178c06fb5e24ef 840w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-view-all.png?w=1100&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=285e4f1f861d506569e2329f36742c45 1100w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-view-all.png?w=1650&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=55bf28675162a88f24e3853a49466a63 1650w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-view-all.png?w=2500&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=c03513bd9e9696da9fac57d5b0bbb877 2500w" />

You can also [retrieve a single Topic](/api-reference/topics/get-topic) or [list all your Topics](/api-reference/topics/list-topics) via the API.

## Edit Topic details

After creating a Topic, you can edit the following details:

* Name
* Description

To edit a Topic, click the **More options** <Icon icon="ellipsis" iconType="solid" /> button and then **Edit Topic**.

<img alt="View edit topic" src="https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-edit.png?fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=2da03bed0821cc2b319df635269058a4" data-og-width="3024" width="3024" data-og-height="1896" height="1896" data-path="images/dashboard-topics-edit.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-edit.png?w=280&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=4af269d381ba4747e926b7165822a7ea 280w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-edit.png?w=560&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=d814e26afd8cb678bb7a9187c361a258 560w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-edit.png?w=840&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=66cb40713a1ddc6c4251ed85c6140382 840w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-edit.png?w=1100&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=1113e0762b74f9f48d22ccdfae615ab6 1100w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-edit.png?w=1650&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=f4d0bec5b5d746eb9f0ccc047659c07a 1650w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-edit.png?w=2500&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=7d761e3d0b52a3fc4869b98756f5c03e 2500w" />

You can also [update a Topic](/api-reference/topics/update-topic) via the API.

<Info>
  You cannot edit the default subscription value after it has been created.
</Info>

## Delete a Topic

You can delete a Topic by clicking the **More options** <Icon icon="ellipsis" iconType="solid" /> button and then **Remove Topic**.

<img alt="Delete Topic" src="https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-remove.png?fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=559cb8dc1bfa864cce3d3cfc3d76d2c0" data-og-width="3024" width="3024" data-og-height="1896" height="1896" data-path="images/dashboard-topics-remove.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-remove.png?w=280&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=77229aa09c83352b2de10d89e1adafb0 280w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-remove.png?w=560&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=0bb2f9ef3640dbcaec0a42f94bf4cce9 560w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-remove.png?w=840&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=cb4ec31d91fc400cf51886303acdd7ba 840w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-remove.png?w=1100&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=242cf2bd15f3b995533db4095c5b9506 1100w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-remove.png?w=1650&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=db7ece2a9a7a48b7f3c0f124726ecc1f 1650w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-topics-remove.png?w=2500&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=a5a531d0a9f8b0b99b7411fead71e10c 2500w" />

You can also [delete a Topic](/api-reference/topics/delete-topic) via the API.

## Editing Topics for a Contact

As you receive [proper consent to email Contacts](/knowledge-base/what-counts-as-email-consent), add the Contact to a given Topic. A Contact can belong to multiple Topics.

You can add a Contact to a Topic via the dashboard by expanding the **More options** <Icon icon="ellipsis" iconType="solid" /> and then **Edit Contact**.

<img alt="Add Contact to Topic" src="https://mintcdn.com/resend/iUm-XsewfO8nTQ4j/images/dashboard-edit-contact-topic.png?fit=max&auto=format&n=iUm-XsewfO8nTQ4j&q=85&s=88e2fc1198bdf81b6b4ca45ef8c8c908" data-og-width="3024" width="3024" data-og-height="1896" height="1896" data-path="images/dashboard-edit-contact-topic.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/iUm-XsewfO8nTQ4j/images/dashboard-edit-contact-topic.png?w=280&fit=max&auto=format&n=iUm-XsewfO8nTQ4j&q=85&s=70797b65790df80c59919f42094c3fbf 280w, https://mintcdn.com/resend/iUm-XsewfO8nTQ4j/images/dashboard-edit-contact-topic.png?w=560&fit=max&auto=format&n=iUm-XsewfO8nTQ4j&q=85&s=579f29b1ae9c96819a6b93d9deed9f4b 560w, https://mintcdn.com/resend/iUm-XsewfO8nTQ4j/images/dashboard-edit-contact-topic.png?w=840&fit=max&auto=format&n=iUm-XsewfO8nTQ4j&q=85&s=6f4b363ad1f02bc7952102e73f72182d 840w, https://mintcdn.com/resend/iUm-XsewfO8nTQ4j/images/dashboard-edit-contact-topic.png?w=1100&fit=max&auto=format&n=iUm-XsewfO8nTQ4j&q=85&s=291fbbafc596e82b06d22bc2f2266f52 1100w, https://mintcdn.com/resend/iUm-XsewfO8nTQ4j/images/dashboard-edit-contact-topic.png?w=1650&fit=max&auto=format&n=iUm-XsewfO8nTQ4j&q=85&s=72ae5a5322f18f3691dd3d43746af78b 1650w, https://mintcdn.com/resend/iUm-XsewfO8nTQ4j/images/dashboard-edit-contact-topic.png?w=2500&fit=max&auto=format&n=iUm-XsewfO8nTQ4j&q=85&s=66f423452335697dfb415ee8ca56715f 2500w" />

Add or remove Topics for a given Contact.

<img alt="Add Contact to Topic" src="https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-save-contact-topic.png?fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=9e58eff887e5a7f0c778aa7631834203" data-og-width="3024" width="3024" data-og-height="1896" height="1896" data-path="images/dashboard-save-contact-topic.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-save-contact-topic.png?w=280&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=67a5c76e5c3db268550b6f251dc6d6c9 280w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-save-contact-topic.png?w=560&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=3d2d2420e56976063fcb8706af184ce2 560w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-save-contact-topic.png?w=840&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=6344b8f6c1704dabd1d8a2ac4b4f0359 840w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-save-contact-topic.png?w=1100&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=2166bca26b09d50dd6f617580dc0a753 1100w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-save-contact-topic.png?w=1650&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=dc4f843ad0d2d25cf36e68ade1aeaf61 1650w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-save-contact-topic.png?w=2500&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=555c7cfc27b73f9ab3f2285a768b86f1 2500w" />

<Note>
  The **Subscribed** status is a global setting that enables or disables sending to a Contact for Broadcasts.

  * If a Contact's **Subscribed** status is
    **false**, they will not receive emails from your account, even if they have
    opted-in to a specific Topic.

  * If the **Subscribed** status is **true**, they
    can receive emails from your account.
</Note>

## Sending Broadcast with a Topic

You can send with a Topic in the Broadcast editor from the Topics dropdown menu.

<img src="https://mintcdn.com/resend/rJP-96WGkxczjL2E/images/dashboard-broadcast-topics.png?fit=max&auto=format&n=rJP-96WGkxczjL2E&q=85&s=a155d4cdb05427f3780201cc6c18f529" alt="Send emails with a Topic" data-og-width="1794" width="1794" data-og-height="630" height="630" data-path="images/dashboard-broadcast-topics.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/rJP-96WGkxczjL2E/images/dashboard-broadcast-topics.png?w=280&fit=max&auto=format&n=rJP-96WGkxczjL2E&q=85&s=05aff5c50a2d3ad6d1bf755aebb67de0 280w, https://mintcdn.com/resend/rJP-96WGkxczjL2E/images/dashboard-broadcast-topics.png?w=560&fit=max&auto=format&n=rJP-96WGkxczjL2E&q=85&s=58eba35fa0fa8625cc13e6e9696bbb06 560w, https://mintcdn.com/resend/rJP-96WGkxczjL2E/images/dashboard-broadcast-topics.png?w=840&fit=max&auto=format&n=rJP-96WGkxczjL2E&q=85&s=3feb85343ff31d5d910438b3fb1c2b22 840w, https://mintcdn.com/resend/rJP-96WGkxczjL2E/images/dashboard-broadcast-topics.png?w=1100&fit=max&auto=format&n=rJP-96WGkxczjL2E&q=85&s=418ba45293e56775fba494e674e13d9e 1100w, https://mintcdn.com/resend/rJP-96WGkxczjL2E/images/dashboard-broadcast-topics.png?w=1650&fit=max&auto=format&n=rJP-96WGkxczjL2E&q=85&s=fc33b51fbbdb56d15f7b770f5f2b151b 1650w, https://mintcdn.com/resend/rJP-96WGkxczjL2E/images/dashboard-broadcast-topics.png?w=2500&fit=max&auto=format&n=rJP-96WGkxczjL2E&q=85&s=2aaf717d8ba00fa4e96f57eb1290105a 2500w" />

You can also send with a Topic via the [Broadcast API](/api-reference/broadcasts/create-broadcast).

## Unsubscribing from a Topic

If a Contact clicks a Broadcast unsubscribe link, they will see a preference page where they can:

* Unsubscribe from certain **Topics** (types of email)
* Or unsubscribe from **everything** you send

If they unsubscribe from a Topic or several Topics, they will no longer receive emails for those Topics. If they unsubscribe from all emails from your account, Broadcasts will no longer send to them.

You can [customize your unsubscribe page with your branding](/dashboard/settings/unsubscribe-page) from your team settings.

<img src="https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-unsubscribe-page-topics.png?fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=fab72296b9ca0bb2b1fd87a786b1fe0c" alt="See Topics on the Unsubscribe Page" data-og-width="3024" width="3024" data-og-height="1896" height="1896" data-path="images/dashboard-unsubscribe-page-topics.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-unsubscribe-page-topics.png?w=280&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=604909e65eb5e2a6a5bfe5517a9913be 280w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-unsubscribe-page-topics.png?w=560&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=cf50e0a7cf5eb2acc23d1268901264ca 560w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-unsubscribe-page-topics.png?w=840&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=4385d0d4fd11cd987787955e94eef554 840w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-unsubscribe-page-topics.png?w=1100&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=7bbe2a0fb893ed7234193dccf35fd48d 1100w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-unsubscribe-page-topics.png?w=1650&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=9b453cf6d021fae5ac782e433083f54b 1650w, https://mintcdn.com/resend/m13iIgAnEbjRpLeu/images/dashboard-unsubscribe-page-topics.png?w=2500&fit=max&auto=format&n=m13iIgAnEbjRpLeu&q=85&s=363d890ffd70d1759b617a32b18b37fe 2500w" />


# Event Types
Source: https://resend.com/docs/dashboard/webhooks/event-types

List of supported event types and their payload.

### `email.sent`

Occurs whenever the **API request was successful**. Resend will attempt to deliver the message to the recipient's mail server.

<Accordion title="Sample Request Body">
  ```json  theme={null}
  {
    "type": "email.sent",
    "created_at": "2024-02-22T23:41:12.126Z",
    "data": {
      "broadcast_id": "8b146471-e88e-4322-86af-016cd36fd216",
      "created_at": "2024-02-22T23:41:11.894719+00:00",
      "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
      "from": "Acme <onboarding@resend.dev>",
      "to": ["delivered@resend.dev"],
      "subject": "Sending this example",
      "tags": {
        "category": "confirm_email"
      }
    }
  }
  ```
</Accordion>

### `email.delivered`

Occurs whenever Resend **successfully delivered the email** to the recipient's mail server.

<Accordion title="Sample Request Body">
  ```json  theme={null}
  {
    "type": "email.delivered",
    "created_at": "2024-02-22T23:41:12.126Z",
    "data": {
      "broadcast_id": "8b146471-e88e-4322-86af-016cd36fd216",
      "created_at": "2024-02-22T23:41:11.894719+00:00",
      "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
      "from": "Acme <onboarding@resend.dev>",
      "to": ["delivered@resend.dev"],
      "subject": "Sending this example",
      "tags": {
        "category": "confirm_email"
      }
    }
  }
  ```
</Accordion>

### `email.delivery_delayed`

Occurs whenever the **email couldn't be delivered due to a temporary issue**.

Delivery delays can occur, for example, when the recipient's inbox is full, or when the receiving email server experiences a transient issue.

<Accordion title="Sample Request Body">
  ```json  theme={null}
  {
    "type": "email.delivery_delayed",
    "created_at": "2024-02-22T23:41:12.126Z",
    "data": {
      "broadcast_id": "8b146471-e88e-4322-86af-016cd36fd216",
      "created_at": "2024-02-22T23:41:11.894719+00:00",
      "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
      "from": "Acme <onboarding@resend.dev>",
      "to": ["delivered@resend.dev"],
      "subject": "Sending this example",
      "tags": {
        "category": "confirm_email"
      }
    }
  }
  ```
</Accordion>

### `email.complained`

Occurs whenever the email was successfully **delivered, but the recipient marked it as spam**.

<Accordion title="Sample Request Body">
  ```json  theme={null}
  {
    "type": "email.complained",
    "created_at": "2024-02-22T23:41:12.126Z",
    "data": {
      "broadcast_id": "8b146471-e88e-4322-86af-016cd36fd216",
      "created_at": "2024-02-22T23:41:11.894719+00:00",
      "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
      "from": "Acme <onboarding@resend.dev>",
      "to": ["delivered@resend.dev"],
      "subject": "Sending this example",
      "tags": {
        "category": "confirm_email"
      }
    }
  }
  ```
</Accordion>

### `email.bounced`

Occurs whenever the recipient's mail server **permanently rejected the email**.

<Accordion title="Sample Request Body">
  ```json  theme={null}
  {
    "type": "email.bounced",
    "created_at": "2024-11-22T23:41:12.126Z",
    "data": {
      "broadcast_id": "8b146471-e88e-4322-86af-016cd36fd216",
      "created_at": "2024-11-22T23:41:11.894719+00:00",
      "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
      "from": "Acme <onboarding@resend.dev>",
      "to": ["delivered@resend.dev"],
      "subject": "Sending this example",
      "bounce": {
        "message": "The recipient's email address is on the suppression list because it has a recent history of producing hard bounces.",
        "subType": "Suppressed",
        "type": "Permanent"
      },
      "tags": {
        "category": "confirm_email"
      }
    }
  }
  ```
</Accordion>

### `email.opened`

Occurs whenever the **recipient opened the email**.

<Accordion title="Sample Request Body">
  ```json  theme={null}
  {
    "type": "email.opened",
    "created_at": "2024-02-22T23:41:12.126Z",
    "data": {
      "broadcast_id": "8b146471-e88e-4322-86af-016cd36fd216",
      "created_at": "2024-02-22T23:41:11.894719+00:00",
      "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
      "from": "Acme <onboarding@resend.dev>",
      "to": ["delivered@resend.dev"],
      "subject": "Sending this example",
      "tags": {
        "category": "confirm_email"
      }
    }
  }
  ```
</Accordion>

### `email.clicked`

Occurs whenever the **recipient clicks on an email link**.

<Accordion title="Sample Request Body">
  ```json  theme={null}
  {
    "type": "email.clicked",
    "created_at": "2024-11-22T23:41:12.126Z",
    "data": {
      "broadcast_id": "8b146471-e88e-4322-86af-016cd36fd216",
      "created_at": "2024-11-22T23:41:11.894719+00:00",
      "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
      "from": "Acme <onboarding@resend.dev>",
      "to": ["delivered@resend.dev"],
      "click": {
        "ipAddress": "122.115.53.11",
        "link": "https://resend.com",
        "timestamp": "2024-11-24T05:00:57.163Z",
        "userAgent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Safari/605.1.15"
      },
      "subject": "Sending this example",
      "tags": {
        "category": "confirm_email"
      }
    }
  }
  ```
</Accordion>

### `email.received`

<Warning>
  Receiving emails are currently in private beta and only available to a limited
  number of users. APIs might change before GA.

  <span />

  To use the methods on this page, you must upgrade your Resend SDK:

  <CodeGroup>
    ```bash Node.js theme={null}
    npm install resend@6.4.0-canary.0
    ```

    ```bash PHP theme={null}
    composer require resend/resend-php:dev-inbound-emails
    ```

    ```python Python theme={null}
    pip install resend==2.18.0a1
    ```

    ```ruby Ruby theme={null}
    gem install resend -v 0.27.0.alpha.1
    ```

    ```go Go theme={null}
    go get github.com/resend/resend-go/v2@v2.28.0-alpha.1
    ```

    ```rust Rust theme={null}
    cargo add resend-rs@0.19.0-beta
    ```

    ```java Java theme={null}
    // Java SDK is not available yet
    ```

    ```csharp .NET theme={null}
    // C# SDK is not available yet
    ```
  </CodeGroup>

  <span />

  [Join the waitlist](https://resend.com/inbound) if you're interested in testing
  this feature.
</Warning>

Occurs whenever Resend **successfully receives an email**.

<Accordion title="Sample Request Body">
  ```json  theme={null}
  {
    "type": "email.received",
    "created_at": "2024-02-22T23:41:12.126Z",
    "data": {
      "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
      "created_at": "2024-02-22T23:41:11.894719+00:00",
      "from": "Acme <onboarding@resend.dev>",
      "to": ["delivered@resend.dev"],
      "subject": "Sending this example",
      "attachments": [
        {
          "id": "2a0c9ce0-3112-4728-976e-47ddcd16a318",
          "filename": "avatar.png",
          "content_type": "image/png",
          "content_disposition": "inline",
          "content_id": "img001"
        }
      ]
    }
  }
  ```
</Accordion>

### `email.failed`

Occurs whenever the **email failed to send due to an error**.

This event is triggered when there are issues such as invalid recipients, API key problems, domain verification issues, quota limits, or other sending failures.

<Accordion title="Sample Request Body">
  ```json  theme={null}
  {
    "type": "email.failed",
    "created_at": "2024-11-22T23:41:12.126Z",
    "data": {
      "broadcast_id": "8b146471-e88e-4322-86af-016cd36fd216",
      "created_at": "2024-11-22T23:41:11.894719+00:00",
      "email_id": "56761188-7520-42d8-8898-ff6fc54ce618",
      "from": "Acme <onboarding@resend.dev>",
      "to": ["delivered@resend.dev"],
      "subject": "Sending this example",
      "failed": {
        "reason": "reached_daily_quota"
      },
      "tags": {
        "category": "confirm_email"
      }
    }
  }
  ```
</Accordion>

### `contact.created`

Occurs whenever a **contact was successfully created**.

*Note: When importing multiple contacts using CSV, these events won't be triggered. [Contact support](https://resend.com/contact) if you have any questions.*

<Accordion title="Sample Request Body">
  ```json  theme={null}
  {
    "type": "contact.created",
    "created_at": "2024-11-17T19:32:22.980Z",
    "data": {
      "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",
      "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
      "created_at": "2024-11-17T19:32:22.980Z",
      "updated_at": "2024-11-17T19:32:22.980Z",
      "email": "steve.wozniak@gmail.com",
      "first_name": "Steve",
      "last_name": "Wozniak",
      "unsubscribed": false
    }
  }
  ```
</Accordion>

### `contact.updated`

Occurs whenever a **contact was successfully updated**.

<Accordion title="Sample Request Body">
  ```json  theme={null}
  {
    "type": "contact.updated",
    "created_at": "2024-10-11T23:47:56.678Z",
    "data": {
      "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",
      "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
      "created_at": "2024-10-10T15:11:94.110Z",
      "updated_at": "2024-10-11T23:47:56.678Z",
      "email": "steve.wozniak@gmail.com",
      "first_name": "Steve",
      "last_name": "Wozniak",
      "unsubscribed": false
    }
  }
  ```
</Accordion>

### `contact.deleted`

Occurs whenever a **contact was successfully deleted**.

<Accordion title="Sample Request Body">
  ```json  theme={null}
  {
    "type": "contact.deleted",
    "created_at": "2024-11-17T19:32:22.980Z",
    "data": {
      "id": "e169aa45-1ecf-4183-9955-b1499d5701d3",
      "audience_id": "78261eea-8f8b-4381-83c6-79fa7120f1cf",
      "created_at": "2024-11-10T15:11:94.110Z",
      "updated_at": "2024-11-17T19:32:22.980Z",
      "email": "steve.wozniak@gmail.com",
      "first_name": "Steve",
      "last_name": "Wozniak",
      "unsubscribed": false
    }
  }
  ```
</Accordion>

### `domain.created`

Occurs when a **domain was successfully created**.

<Accordion title="Sample Request Body">
  ```json  theme={null}
  {
    "type": "domain.created",
    "created_at": "2024-11-17T19:32:22.980Z",
    "data": {
      "id": "d91cd9bd-1176-453e-8fc1-35364d380206",
      "name": "example.com",
      "status": "not_started",
      "created_at": "2024-04-26T20:21:26.347412+00:00",
      "region": "us-east-1",
      "records": [
        {
          "record": "SPF",
          "name": "send",
          "type": "MX",
          "ttl": "Auto",
          "status": "not_started",
          "value": "feedback-smtp.us-east-1.amazonses.com",
          "priority": 10
        },
        {
          "record": "SPF",
          "name": "send",
          "value": "\"v=spf1 include:amazonses.com ~all\"",
          "type": "TXT",
          "ttl": "Auto",
          "status": "not_started"
        },
        {
          "record": "DKIM",
          "name": "resend._domainkey",
          "value": "p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDsc4Lh8xilsngyKEgN2S84+21gn+x6SEXtjWvPiAAmnmggr5FWG42WnqczpzQ/mNblqHz4CDwUum6LtY6SdoOlDmrhvp5khA3cd661W9FlK3yp7+jVACQElS7d9O6jv8VsBbVg4COess3gyLE5RyxqF1vYsrEXqyM8TBz1n5AGkQIDAQA2",
          "type": "TXT",
          "status": "not_started",
          "ttl": "Auto"
        }
      ]
    }
  }
  ```
</Accordion>

### `domain.updated`

Occurs when a **domain was successfully updated**.

<Accordion title="Sample Request Body">
  ```json  theme={null}
  {
    "type": "domain.updated",
    "created_at": "2024-11-17T19:32:22.980Z",
    "data": {
      "id": "d91cd9bd-1176-453e-8fc1-35364d380206",
      "name": "example.com",
      "status": "not_started",
      "created_at": "2024-04-26T20:21:26.347412+00:00",
      "region": "us-east-1",
      "records": [
        {
          "record": "SPF",
          "name": "send",
          "type": "MX",
          "ttl": "Auto",
          "status": "not_started",
          "value": "feedback-smtp.us-east-1.amazonses.com",
          "priority": 10
        },
        {
          "record": "SPF",
          "name": "send",
          "value": "\"v=spf1 include:amazonses.com ~all\"",
          "type": "TXT",
          "ttl": "Auto",
          "status": "not_started"
        },
        {
          "record": "DKIM",
          "name": "resend._domainkey",
          "value": "p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDsc4Lh8xilsngyKEgN2S84+21gn+x6SEXtjWvPiAAmnmggr5FWG42WnqczpzQ/mNblqHz4CDwUum6LtY6SdoOlDmrhvp5khA3cd661W9FlK3yp7+jVACQElS7d9O6jv8VsBbVg4COess3gyLE5RyxqF1vYsrEXqyM8TBz1n5AGkQIDAQA2",
          "type": "TXT",
          "status": "not_started",
          "ttl": "Auto"
        }
      ]
    }
  }
  ```
</Accordion>

### `domain.deleted`

Occurs when a **domain was successfully deleted**.

<Accordion title="Sample Request Body">
  ```json  theme={null}
  {
    "type": "domain.deleted",
    "created_at": "2024-11-17T19:32:22.980Z",
    "data": {
      "id": "d91cd9bd-1176-453e-8fc1-35364d380206",
      "name": "example.com",
      "status": "not_started",
      "created_at": "2024-04-26T20:21:26.347412+00:00",
      "region": "us-east-1",
      "records": [
        {
          "record": "SPF",
          "name": "send",
          "type": "MX",
          "ttl": "Auto",
          "status": "not_started",
          "value": "feedback-smtp.us-east-1.amazonses.com",
          "priority": 10
        },
        {
          "record": "SPF",
          "name": "send",
          "value": "\"v=spf1 include:amazonses.com ~all\"",
          "type": "TXT",
          "ttl": "Auto",
          "status": "not_started"
        },
        {
          "record": "DKIM",
          "name": "resend._domainkey",
          "value": "p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDsc4Lh8xilsngyKEgN2S84+21gn+x6SEXtjWvPiAAmnmggr5FWG42WnqczpzQ/mNblqHz4CDwUum6LtY6SdoOlDmrhvp5khA3cd661W9FlK3yp7+jVACQElS7d9O6jv8VsBbVg4COess3gyLE5RyxqF1vYsrEXqyM8TBz1n5AGkQIDAQA2",
          "type": "TXT",
          "status": "not_started",
          "ttl": "Auto"
        }
      ]
    }
  }
  ```
</Accordion>


# Managing Webhooks
Source: https://resend.com/docs/dashboard/webhooks/introduction

Use webhooks to notify your application about email events.

## What is a webhook?

Resend uses webhooks to push real-time notifications to you about your email sending. All webhooks use HTTPS and deliver a JSON payload that can be used by your application. You can use webhook feeds to do things like:

* Automatically remove bounced email addresses from mailing lists
* Create alerts in your messaging or incident tools based on event types
* Store all send events in your own database for custom reporting/retention

## Steps to receive webhooks

You can start receiving real-time events in your app using the steps:

1. Create a local endpoint to receive requests
2. Register your development webhook endpoint
3. Test that your webhook endpoint is working properly
4. Deploy your webhook endpoint to production
5. Register your production webhook endpoint

## 1. Create a local endpoint to receive requests

In your local application, create a new route that can accept POST requests.

For example, you can add an API route on Next.js:

```js pages/api/webhooks.ts theme={null}
import type { NextApiRequest, NextApiResponse } from 'next';

export default (req: NextApiRequest, res: NextApiResponse) => {
  if (req.method === 'POST') {
    const payload = req.body;
    console.log(payload);
    res.status(200);
  }
};
```

On receiving an event, you should respond with an `HTTP 200 OK` to signal to Resend that the event was successfully delivered.

## 2. Register your development webhook endpoint

Register your publicly accessible HTTPS URL in the Resend dashboard.

<Tip>
  For develoment, you can create a tunnel to your localhost server using a tool like
  [ngrok](https://ngrok.com/download) or [VS Code Port Forwarding](https://code.visualstudio.com/docs/debugtest/port-forwarding). These tools serve your local dev environment at a public URL you can use to test your local webhook endpoint.

  Example: `https://example123.ngrok.io/api/webhook`
</Tip>

<img alt="Add Webhook" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhooks-add.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=be7984a828fbb7aadc9cc569c93d870a" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-webhooks-add.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhooks-add.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d631dc2c58be10985c4894248a7012a1 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhooks-add.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=bacfc1672f42b4a2d12bc77b43efec55 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhooks-add.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=6c056d838016ab6c56892e0a4325ffbc 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhooks-add.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f579cb16562ecfe95f9cb507151c3314 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhooks-add.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=97291fae3000588d1268732eb6347384 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhooks-add.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=182556bb387968b12492459fbeabd049 2500w" />

## 3. Test that your webhook endpoint is working properly

Send a few test emails to check that your webhook endpoint is receiving the events.

<img alt="Webhook Events List" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhook-events-list.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=6da567f951a367bd93d5512fefa89a36" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-webhook-events-list.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhook-events-list.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9b7746385929930776e0c203912daeed 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhook-events-list.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=84b775511cde83fe54e20428aea2318f 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhook-events-list.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5dc887d9ff12babe568831bcabb481a4 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhook-events-list.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=65eb39d64c7dc0f4f268d5cbfe69fc8d 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhook-events-list.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f365c05c4f7749d8fc68609067e5abbf 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/dashboard-webhook-events-list.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=dd782f49b6f6541d8dd6f23dd78b2dc9 2500w" />

## 4. Deploy your webhook endpoint

After you're done testing, deploy your webhook endpoint to production.

## 5. Register your production webhook endpoint

Once your webhook endpoint is deployed to production, you can register it in the Resend dashboard.

## FAQ

<AccordionGroup>
  <Accordion title="What is the retry schedule?">
    If Resend does not receive a 200 response from a webhook server, we will retry the webhooks.

    Each message is attempted based on the following schedule, where each period is started following the failure of the preceding attempt:

    * 5 seconds
    * 5 minutes
    * 30 minutes
    * 2 hours
    * 5 hours
    * 10 hours
  </Accordion>

  <Accordion title="What happens after all the retries fail?">
    After the conclusion of the above attempts the message will be marked as failed, and you will get a webhook of type `message.attempt.exhausted` notifying you of this error.
  </Accordion>

  <Accordion title="What IPs do webhooks POST from?">
    If your server requires an allowlist, our webhooks come from the following IP addresses:

    * `44.228.126.217`
    * `50.112.21.217`
    * `52.24.126.164`
    * `54.148.139.208`
    * `2600:1f24:64:8000::/52`
  </Accordion>

  <Accordion title="Can I retry webhook events manually?">
    Yes. You can retry webhook events manually from the dashboard.

    To retry a webhook event, click to see your webhook details
    and then click the link to the event you want to retry.

    On that page, you will see both the payload for the event
    and a button to replay the webhook event and get it sent to
    the configured webhook endpoint.
  </Accordion>
</AccordionGroup>

## Try it yourself

<Card title="Webhook Code Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-webhooks">
  See an example of how to receive webhooks events for Resend emails.
</Card>


# Retries and Replays
Source: https://resend.com/docs/dashboard/webhooks/retries-and-replays

Learn how to use the retries and replays to handle webhook failures.

## Automatic Retries

We attempt to deliver each webhook message based on a schedule with exponential backoff.

Each message is attempted based on the following schedule, where each period is started following the failure of the preceding attempt:

* Immediately
* 5 seconds
* 5 minutes
* 30 minutes
* 2 hours
* 5 hours
* 10 hours
* 10 hours (in addition to the previous)

If an endpoint is removed or disabled delivery attempts to the endpoint will be disabled as well.

For example, an attempt that fails three times before eventually succeeding will be delivered roughly 35 minutes and 5 seconds following the first attempt.

## Manual Replays

If a webhook message fails, you can manually replay it.

You can replay not only `failed` webhook messages, but also `succeeded` ones.

<img alt="Replay Webhook" src="https://mintcdn.com/resend/Ghhyjny0_6fDISyo/images/webhooks-replay-1.jpg?fit=max&auto=format&n=Ghhyjny0_6fDISyo&q=85&s=b668419790b9bba3bd1fc3616781a04a" data-og-width="1390" width="1390" data-og-height="332" height="332" data-path="images/webhooks-replay-1.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/Ghhyjny0_6fDISyo/images/webhooks-replay-1.jpg?w=280&fit=max&auto=format&n=Ghhyjny0_6fDISyo&q=85&s=b64c2a8d23479cafa9ed4f0d19a14fa3 280w, https://mintcdn.com/resend/Ghhyjny0_6fDISyo/images/webhooks-replay-1.jpg?w=560&fit=max&auto=format&n=Ghhyjny0_6fDISyo&q=85&s=d216694db69c6b1167ae741bb8ed8a21 560w, https://mintcdn.com/resend/Ghhyjny0_6fDISyo/images/webhooks-replay-1.jpg?w=840&fit=max&auto=format&n=Ghhyjny0_6fDISyo&q=85&s=e082a8c15cc95e209c172939b374ee3f 840w, https://mintcdn.com/resend/Ghhyjny0_6fDISyo/images/webhooks-replay-1.jpg?w=1100&fit=max&auto=format&n=Ghhyjny0_6fDISyo&q=85&s=5ba2402431aa2d9c5ff7b43571a28302 1100w, https://mintcdn.com/resend/Ghhyjny0_6fDISyo/images/webhooks-replay-1.jpg?w=1650&fit=max&auto=format&n=Ghhyjny0_6fDISyo&q=85&s=9c2893e9666a27211c9e8a966f57e21a 1650w, https://mintcdn.com/resend/Ghhyjny0_6fDISyo/images/webhooks-replay-1.jpg?w=2500&fit=max&auto=format&n=Ghhyjny0_6fDISyo&q=85&s=2de0b20263091712ce36f470bbac9bda 2500w" />

Here's how to replay a webhook message:

1. Go to the [Webhooks](https://resend.com/webhooks) page
2. Navigate to the Webhook Endpoint you are using
3. Go to the Webhook Message you want to replay
4. Click on the "Replay" button


# Verify Webhooks Requests
Source: https://resend.com/docs/dashboard/webhooks/verify-webhooks-requests

Learn how to use the signing secret to verify your webhooks.

Webhook signing secrets are used to validate the payload data sent to your application from Resend. You can find the signing secret in the webhook detail page.

<img alt="Signing Secret" src="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/webhooks-secret-1.png?fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=bfc50b2ce64af09a84db72c2ddc0580d" data-og-width="1485" width="1485" data-og-height="926" height="926" data-path="images/webhooks-secret-1.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/webhooks-secret-1.png?w=280&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=143cce693957ffff33fe2283b786492d 280w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/webhooks-secret-1.png?w=560&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=4a0a4c627d603e3da164655e564d08fb 560w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/webhooks-secret-1.png?w=840&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=edc009fa67f24b46cc0b63145f1ae8af 840w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/webhooks-secret-1.png?w=1100&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=9fecdecd03ec655ec5dfa833c63b8736 1100w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/webhooks-secret-1.png?w=1650&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=9d0f9753313182fb1c1e5f99e9036b50 1650w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/webhooks-secret-1.png?w=2500&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=5318293dbfa5b892757e0546c76de5b6 2500w" />

To verify the webhook request, you can use the Resend SDK, as in the example below.

<Tip>
  Make sure that you're using the raw request body when verifying webhooks,
  since the cryptographic signature is sensitive to even the slightest change.
  Watch out for frameworks that parse the request as JSON and then stringify it,
  since this too will break the signature verification.
</Tip>

```js  theme={null}
export async function POST(req: NextRequest) {
  try {
    const payload = await req.text();

    // Throws an error if the webhook is invalid
    // Otherwise, returns the parsed payload object
    const result = resend.webhooks.verify({
      payload,
      headers: {
        id: req.headers['svix-id'],
        timestamp: req.headers['svix-timestamp'],
        signature: req.headers['svix-signature'],
      },
      webhookSecret: process.env.RESEND_WEBHOOK_SECRET,
    });

    // Handle the result after validating it
  } catch {
    return new NextResponse('Invalid webhook', { status: 400 });
  }
}
```

Alternatively, you can manually use the Svix libraries and manually pass it the headers, body, and webhook secret. [Learn more and view all supported languages here.](https://docs.svix.com/receiving/verifying-payloads/how)

To verify manually, start by installing the Svix libaries.

<CodeGroup>
  ```sh npm theme={null}
  npm install svix
  ```

  ```sh yarn theme={null}
  yarn add svix
  ```
</CodeGroup>

Then, verify the webhooks using the code below. The payload is the raw (string) body of the request, and the headers are the headers passed in the request.

```js  theme={null}
import { Webhook } from 'svix';

const secret = process.env.WEBHOOK_SECRET;

// These were all sent from the server
const headers = {
  'svix-id': 'msg_p5jXN8AQM9LWM0D4loKWxJek',
  'svix-timestamp': '1614265330',
  'svix-signature': 'v1,g0hM9SsE+OTPJTGt/tmIKtSyZlE3uFJELVlNIOLJ1OE=',
};
const payload = '{"test": 2432232314}';

const wh = new Webhook(secret);
// Throws on error, returns the verified content on success
wh.verify(payload, headers);
```

If you prefer, you can also [manually verify the headers as well.](https://docs.svix.com/receiving/verifying-payloads/how-manual)

## Why should I verify webhooks?

Webhooks are vulnerable because attackers can send fake HTTP POST requests to endpoints, pretending to be legitimate services. This can lead to security risks or operational issues.

To mitigate this, each webhook and its metadata are signed with a unique key specific to the endpoint. This signature helps verify the source of the webhook, allowing only authenticated webhooks to be processed.

Another security concern is replay attacks, where intercepted valid payloads, complete with their signatures, are resent to endpoints. These payloads would pass the signature verification and be executed, posing a potential security threat.


# Examples
Source: https://resend.com/docs/examples

Explore sample apps for different use cases.

<CardGroup>
  <Card title="Attachments" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-attachments">
    Send emails with attachments
  </Card>

  <Card title="NextAuth" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-nextauth">
    Send emails with NextAuth
  </Card>

  <Card title="React Email" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-react-email">
    Send emails with React Email
  </Card>

  <Card title="Webhooks" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-webhooks">
    A Slack app using Resend webhooks
  </Card>

  <Card title="Prevent thread on Gmail" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-prevent-thread-on-gmail">
    Prevent threading on Gmail
  </Card>

  <Card title="Unsubscribe url header" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-examples/tree/main/with-unsubscribe-url-header">
    Add a shortcut for users to unsubscribe
  </Card>
</CardGroup>


# Integrations
Source: https://resend.com/docs/integrations

Integrate Resend with the tools you already use.

## AI

<CardGroup>
  <Card
    title="Lovable"
    href="https://docs.lovable.dev/integrations/resend"
    icon={
    <svg
      className="h-6 w-6"
      viewBox="0 0 78 69"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M38.768 69C37.9927 69 37.2119 68.8597 36.4255 68.5791C35.6398 68.2993 34.9562 67.8684 34.3747 67.2869L28.7204 62.0831C21.096 55.0378 14.4033 48.2348 8.64237 41.6741C2.88079 35.1136 0 28.1383 0 20.7484C0 14.8451 1.98137 9.91108 5.94412 5.94627C9.90752 1.98209 14.8181 0 20.676 0C24.0146 0 27.2669 0.770147 30.4329 2.31044C33.599 3.85139 36.3774 6.24845 38.768 9.50161C41.3739 6.24845 44.1953 3.85139 47.232 2.31044C50.2688 0.770147 53.4785 0 56.8602 0C62.7179 0 67.6288 1.98209 71.5921 5.94627C75.555 9.91108 77.5361 14.8451 77.5361 20.7484C77.5361 28.1383 74.6611 35.119 68.9103 41.6906C63.1595 48.2624 56.4504 55.0708 48.783 62.1161L43.1614 67.2869C42.5799 67.8684 41.8964 68.2993 41.1106 68.5791C40.3244 68.8597 39.5435 69 38.768 69Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Tell the Lovable AI to send emails
  </Card>

  <Card
    title="Anything"
    href="https://www.createanything.com/docs/integrations/resend"
    icon={
    <svg
      className="h-6 w-6"
      width="97"
      height="100"
      viewBox="0 0 97 100"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M84.2829 96.286C89.269 75.7132 93.7568 55.6139 93.9185 35.9376C94.0751 16.4376 89.7641 10.1999 86.5099 7.20085C85.8404 6.58277 85.1171 6.0387 84.3605 5.57696C81.7207 3.96559 78.5784 3.28239 74.752 3.48907C66.1585 3.95218 53.56 9.57643 38.3173 19.7567C22.4623 30.3451 9.05946 42.2082 5.33074 45.5938C5.22428 45.6911 5.05302 45.8388 4.84081 46.0254C4.19915 46.5866 3.64115 47.0877 3.18632 47.5108C3.05153 47.6337 3.04057 47.8407 3.16012 47.9948C3.1942 48.037 3.23208 48.0729 3.27877 48.1014C3.39396 48.1717 3.53522 48.1853 3.6595 48.1287C4.5571 47.7153 5.49911 47.222 6.41155 46.7492C7.44585 46.2097 8.50903 45.658 9.46801 45.235C17.3073 41.7862 27.6006 37.6006 37.6684 35.807C48.85 33.813 56.5565 34.586 62.6643 38.3142C67.8972 41.5084 71.49 45.0517 74.3123 49.8082C77.3625 54.9474 79.5651 61.6501 81.2392 70.9058C82.7572 79.2971 83.1466 87.8714 83.5238 96.1646C83.5291 96.296 83.6088 96.4172 83.7241 96.4875C83.7707 96.5161 83.8231 96.5352 83.8781 96.5432C84.0718 96.5759 84.2484 96.4615 84.2929 96.2836L84.2829 96.286Z"
        fill="currentColor"
      />
      <path
        d="M70.3756 85.1586C70.2252 76.2348 69.8684 55.336 58.319 48.2863C58.0762 48.1381 57.8234 47.9923 57.571 47.8597C52.0261 44.8895 44.5351 44.8206 35.2986 47.6601C27.9612 49.9154 21.6293 53.3656 18.9266 54.8394C18.4392 55.1058 18.0824 55.2983 17.8739 55.4018C17.71 55.4812 17.6417 55.6703 17.7104 55.8446C17.7442 55.9294 17.8069 56.0017 17.8815 56.0473C17.9562 56.093 18.0555 56.1193 18.1532 56.1063C18.264 56.0928 18.3791 56.0862 18.4993 56.0783C18.7083 56.0649 18.9205 56.0534 19.136 56.0012C36.5276 51.8627 45.3418 55.1962 51.0756 58.5638C51.1535 58.6113 51.2313 58.6588 51.3091 58.7062C60.6202 64.3898 67.0919 80.8639 69.2168 86.28C69.4137 86.7763 69.5671 87.1691 69.6771 87.437C69.7127 87.5186 69.7722 87.5891 69.8438 87.6328C69.9247 87.6822 70.0209 87.7067 70.1155 87.6918C70.2977 87.6663 70.4264 87.5184 70.4222 87.3363C70.4016 86.747 70.3885 86.0125 70.3736 85.1617L70.3756 85.1586Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Add email to your Anything projects
  </Card>

  <Card
    title="Wildcard"
    href="https://github.com/wild-card-ai/agents-json/blob/master/examples/resend.ipynb"
    icon={
    <svg
      className="h-6 w-6"
      width="64"
      height="64"
      viewBox="0 0 64 64"
      xmlns="http://www.w3.org/2000/svg"
    >
      <defs fill="currentColor" id="defs1" />
      <path
        d="m44,32l11.78,6.8-6,10.39-11.78-6.8v13.61h-12v-13.61l-11.78,6.8-6-10.39,11.78-6.8-11.78-6.8,6-10.39,11.78,6.8v-13.61h12v13.61l11.78-6.8,6,10.39-11.78,6.8Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Send natural language emails using Wildcard
  </Card>

  <Card
    title="mcp.run"
    href="https://www.mcp.run/nilslice/resend"
    icon={
    <svg
      className="h-6 w-6"
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 570 126"
    >
      <g>
        <g>
          <g>
            <rect class="cls-2" x="0" y="0" width="18" height="18" />
            <rect class="cls-2" y="18" width="18" height="18" />
            <rect class="cls-2" x="0" y="36" width="18" height="18" />
            <rect class="cls-2" x="0" y="54" width="18" height="18" />
            <rect class="cls-2" y="72" width="18" height="18" />
            <rect class="cls-2" x="36" y="0" width="18" height="18" />
            <rect class="cls-2" x="36" y="18" width="18" height="18" />
            <rect class="cls-2" x="36" y="36" width="18" height="18" />
            <rect class="cls-2" x="36" y="54" width="18" height="18" />
            <rect class="cls-2" x="36" y="72" width="18" height="18" />
            <rect class="cls-2" x="72" y="0" width="18" height="18" />
            <rect class="cls-2" x="72" y="18" width="18" height="18" />
            <rect class="cls-2" x="72" y="36" width="18" height="18" />
            <rect class="cls-2" x="72" y="54" width="18" height="18" />
            <rect class="cls-2" x="72" y="72" width="18" height="18" />
            <polygon class="cls-2" points="11.12 18 36 18 36 0 11.12 18" />
            <polygon class="cls-2" points="47.12 18 72 18 72 0 47.12 18" />
          </g>
          <g>
            <rect
              class="cls-2"
              x="126"
              y="0"
              width="18"
              height="18"
              transform="translate(126 144) rotate(-90)"
            />
            <rect
              class="cls-2"
              x="126"
              y="72"
              width="18"
              height="18"
              transform="translate(54 216) rotate(-90)"
            />
            <rect
              class="cls-2"
              x="144"
              y="0"
              width="18"
              height="18"
              transform="translate(144 162) rotate(-90)"
            />
            <rect
              class="cls-2"
              x="144"
              y="72"
              width="18"
              height="18"
              transform="translate(72 234) rotate(-90)"
            />
            <rect
              class="cls-2"
              x="162"
              y="0"
              width="18"
              height="18"
              transform="translate(162 180) rotate(-90)"
            />
            <rect
              class="cls-2"
              x="162"
              y="72"
              width="18"
              height="18"
              transform="translate(90 252) rotate(-90)"
            />
            <rect class="cls-2" x="99" y="18" width="18" height="18" />
            <rect class="cls-2" x="99" y="36" width="18" height="18" />
            <rect class="cls-2" x="99" y="54" width="18" height="18" />
            <polygon class="cls-2" points="99 18 126 18 126 0 99 18" />
            <polygon class="cls-2" points="99 72 126 72 126 90 99 72" />
          </g>
          <g>
            <rect
              class="cls-2"
              x="189"
              y="0"
              width="18"
              height="18"
              transform="translate(189 207) rotate(-90)"
            />
            <rect
              class="cls-2"
              x="207"
              y="0"
              width="18"
              height="18"
              transform="translate(207 225) rotate(-90)"
            />
            <rect
              class="cls-2"
              x="225"
              y="0"
              width="18"
              height="18"
              transform="translate(225 243) rotate(-90)"
            />
            <rect
              class="cls-2"
              x="189"
              y="72"
              width="18"
              height="18"
              transform="translate(117 279) rotate(-90)"
            />
            <rect
              class="cls-2"
              x="207"
              y="72"
              width="18"
              height="18"
              transform="translate(135 297) rotate(-90)"
            />
            <rect
              class="cls-2"
              x="225"
              y="72"
              width="18"
              height="18"
              transform="translate(153 315) rotate(-90)"
            />
            <rect class="cls-2" x="189" y="18" width="18" height="18" />
            <rect class="cls-2" x="189" y="36" width="18" height="18" />
            <rect class="cls-2" x="189" y="54" width="18" height="18" />
            <rect class="cls-2" x="189" y="90" width="18" height="18" />
            <rect class="cls-2" x="189" y="108" width="18" height="18" />
            <rect class="cls-2" x="252" y="18" width="18" height="18" />
            <rect class="cls-2" x="252" y="36" width="18" height="18" />
            <rect class="cls-2" x="252" y="54" width="18" height="18" />
            <polygon class="cls-2" points="270 18 243 18 243 0 270 18" />
            <polygon class="cls-2" points="270 72 243 72 243 90 270 72" />
          </g>
          <g>
            <rect class="cls-2" x="552" y="18" width="18" height="18" />
            <rect class="cls-2" x="552" y="36" width="18" height="18" />
            <rect class="cls-2" x="489" y="18" width="18" height="18" />
            <rect class="cls-2" x="489" y="36" width="18" height="18" />
            <rect
              class="cls-2"
              x="552"
              y="0"
              width="18"
              height="18"
              transform="translate(570 -552) rotate(90)"
            />
            <rect
              class="cls-2"
              x="529.5"
              y="-4.5"
              width="18"
              height="27"
              transform="translate(547.5 -529.5) rotate(90)"
            />
            <rect
              class="cls-2"
              x="552"
              y="54"
              width="18"
              height="18"
              transform="translate(624 -498) rotate(90)"
            />
            <rect
              class="cls-2"
              x="507"
              y="0"
              width="18"
              height="18"
              transform="translate(525 -507) rotate(90)"
            />
            <rect
              class="cls-2"
              x="489"
              y="54"
              width="18"
              height="18"
              transform="translate(561 -435) rotate(90)"
            />
            <rect
              class="cls-2"
              x="552"
              y="72"
              width="18"
              height="18"
              transform="translate(642 -480) rotate(90)"
            />
            <rect
              class="cls-2"
              x="489"
              y="72"
              width="18"
              height="18"
              transform="translate(579 -417) rotate(90)"
            />
            <polygon class="cls-2" points="516 18 489 18 489 0 516 18" />
          </g>
          <g>
            <polygon class="cls-2" points="399 72 426 72 426 90 399 72" />
            <rect
              class="cls-2"
              x="399"
              y="54"
              width="18"
              height="18"
              transform="translate(816 126) rotate(180)"
            />
            <rect
              class="cls-2"
              x="399"
              y="36"
              width="18"
              height="18"
              transform="translate(816 90) rotate(180)"
            />
            <rect
              class="cls-2"
              x="462"
              y="54"
              width="18"
              height="18"
              transform="translate(942 126) rotate(180)"
            />
            <rect
              class="cls-2"
              x="462"
              y="36"
              width="18"
              height="18"
              transform="translate(942 90) rotate(180)"
            />
            <polygon
              class="cls-2"
              points="435 72 435 90 417 81 417 72 435 72"
            />
            <rect
              class="cls-2"
              x="430.5"
              y="67.5"
              width="18"
              height="27"
              transform="translate(358.5 520.5) rotate(-90)"
            />
            <rect
              class="cls-2"
              x="399"
              y="18"
              width="18"
              height="18"
              transform="translate(381 435) rotate(-90)"
            />
            <polygon
              class="cls-2"
              points="462 72 462 81 444 90 444 72 462 72"
            />
            <rect
              class="cls-2"
              x="462"
              y="0"
              width="18"
              height="18"
              transform="translate(462 480) rotate(-90)"
            />
            <rect
              class="cls-2"
              x="399"
              width="18"
              height="18"
              transform="translate(399 417) rotate(-90)"
            />
            <rect
              class="cls-2"
              x="462"
              y="18"
              width="18"
              height="18"
              transform="translate(444 498) rotate(-90)"
            />
            <polygon class="cls-2" points="480 72 453 72 453 90 480 72" />
          </g>
          <g>
            <rect
              class="cls-2"
              x="336"
              y="0"
              width="18"
              height="18"
              transform="translate(336 354) rotate(-90)"
            />
            <rect
              class="cls-2"
              x="354"
              y="0"
              width="18"
              height="18"
              transform="translate(354 372) rotate(-90)"
            />
            <rect
              class="cls-2"
              x="372"
              y="0"
              width="18"
              height="18"
              transform="translate(372 390) rotate(-90)"
            />
            <rect
              class="cls-2"
              x="318"
              y="72"
              width="18"
              height="18"
              transform="translate(246 408) rotate(-90)"
            />
            <rect class="cls-2" x="318" y="18" width="18" height="18" />
            <rect class="cls-2" x="318" y="36" width="18" height="18" />
            <rect class="cls-2" x="318" y="54" width="18" height="18" />
            <polygon class="cls-2" points="345 18 318 18 318 0 345 18" />
          </g>
        </g>
        <rect
          class="cls-1"
          x="280.88"
          y="50.37"
          width="25.26"
          height="25.26"
          transform="translate(-6.32 77.77) rotate(-14.93)"
        />
      </g>
    </svg>
  }
  >
    Build email AI agents using mcp.run
  </Card>

  <Card
    title="Rocket"
    href="https://docs.rocket.new/integrations/resend"
    icon={
    <svg
      width="121"
      className="h-6 w-6"
      height="127"
      viewBox="0 0 121 127"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M108.729 108.725L93.6186 94.4048C82.9086 84.2448 75.4986 71.1048 72.3386 56.6948L62.5386 12.1348C62.3086 11.1348 61.4786 10.6348 60.6486 10.6348C59.8186 10.6348 58.9986 11.1348 58.7586 12.1348L48.9586 56.7048C45.7886 71.1148 38.3886 84.2548 27.6786 94.4148L12.5686 108.735C11.1586 110.245 10.3686 112.235 10.3686 114.305V116.115L48.6886 109.495C52.6386 108.815 56.6486 108.465 60.6386 108.465C64.6286 108.465 68.6386 108.815 72.5886 109.495L110.909 116.115V114.305C110.909 112.235 110.119 110.245 108.709 108.735L108.729 108.725Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Send emails from apps built with Rocket
  </Card>

  <Card
    title="Base44"
    href="https://docs.base44.com/Integrations/Resend-integration"
    icon={
    <svg
      width="159"
      className="h-6 w-6"
      height="159"
      viewBox="0 0 159 159"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M122.471 133.996C110.721 143.22 95.9081 148.721 79.8113 148.721C63.7148 148.721 48.903 143.22 37.1531 133.996H122.471ZM140.073 113.498C137.592 117.896 134.644 121.995 131.296 125.729H28.327C24.9786 121.995 22.0304 117.896 19.5496 113.498H140.073ZM147.648 93C146.817 97.2278 145.6 101.317 144.036 105.23H15.5867C14.0225 101.317 12.806 97.2278 11.9744 93H147.648ZM79.8113 10.4414C117.996 10.4414 148.951 41.3963 148.951 79.5811C148.951 81.3138 148.887 83.0317 148.762 84.7324H10.8621C10.7369 83.0316 10.6717 81.3138 10.6717 79.5811C10.6717 41.3963 41.6266 10.4415 79.8113 10.4414Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Add email to your Base44 apps
  </Card>

  <Card
    title="Leap.new"
    href="https://docs.leap.new/integrations/resend"
    icon={
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g clip-path="url(#clip0_1111_9)">
        <path
          d="M12.0515 12.0071V0.0585938H24V12.0071H12.0515ZM0.103027 23.9557V12.0071H12.0515V23.9557H0.103027Z"
          fill="currentColor"
        />
      </g>
      <defs>
        <clipPath id="clip0_1111_9">
          <rect width="24" height="24" fill="currentColor" />
        </clipPath>
      </defs>
    </svg>
  }
  >
    Add email to your Leap apps
  </Card>
</CardGroup>

## No-code

<CardGroup>
  <Card
    title="Zapier"
    href="https://zapier.com/apps/resend/integrations"
    icon={
    <svg className="h-6 w-6" width="68" height="68" viewBox="0 0 256 256">
      <title>Zapier</title>
      <g>
        <path
          d="M128.080089,-0.000183105 C135.311053,0.0131003068 142.422517,0.624138494 149.335663,1.77979593 L149.335663,1.77979593 L149.335663,76.2997796 L202.166953,23.6044907 C208.002065,27.7488446 213.460883,32.3582023 218.507811,37.3926715 C223.557281,42.4271407 228.192318,47.8867213 232.346817,53.7047992 L232.346817,53.7047992 L179.512985,106.400063 L254.227854,106.400063 C255.387249,113.29414 256,120.36111 256,127.587243 L256,127.587243 L256,127.759881 C256,134.986013 255.387249,142.066204 254.227854,148.960282 L254.227854,148.960282 L179.500273,148.960282 L232.346817,201.642324 C228.192318,207.460402 223.557281,212.919983 218.523066,217.954452 L218.523066,217.954452 L218.507811,217.954452 C213.460883,222.988921 208.002065,227.6115 202.182208,231.742607 L202.182208,231.742607 L149.335663,179.04709 L149.335663,253.5672 C142.435229,254.723036 135.323765,255.333244 128.092802,255.348499 L128.092802,255.348499 L127.907197,255.348499 C120.673691,255.333244 113.590195,254.723036 106.677048,253.5672 L106.677048,253.5672 L106.677048,179.04709 L53.8457596,231.742607 C42.1780766,223.466917 31.977435,213.278734 23.6658953,201.642324 L23.6658953,201.642324 L76.4997269,148.960282 L1.78485803,148.960282 C0.612750404,142.052729 0,134.946095 0,127.719963 L0,127.719963 L0,127.349037 C0.0121454869,125.473817 0.134939797,123.182933 0.311311815,120.812834 L0.36577283,120.099764 C0.887996182,113.428547 1.78485803,106.400063 1.78485803,106.400063 L1.78485803,106.400063 L76.4997269,106.400063 L23.6658953,53.7047992 C27.8076812,47.8867213 32.4300059,42.4403618 37.4769335,37.4193681 L37.4769335,37.4193681 L37.5023588,37.3926715 C42.5391163,32.3582023 48.0106469,27.7488446 53.8457596,23.6044907 L53.8457596,23.6044907 L106.677048,76.2997796 L106.677048,1.77979593 C113.590195,0.624138494 120.688946,0.0131003068 127.932622,-0.000183105 L127.932622,-0.000183105 L128.080089,-0.000183105 Z M128.067377,95.7600714 L127.945335,95.7600714 C118.436262,95.7600714 109.32891,97.5001809 100.910584,100.661566 C97.7553011,109.043534 96.0085811,118.129275 95.9958684,127.613685 L95.9958684,127.733184 C96.0085811,137.217594 97.7553011,146.303589 100.923296,154.685303 C109.32891,157.846943 118.436262,159.587052 127.945335,159.587052 L128.067377,159.587052 C137.576449,159.587052 146.683802,157.846943 155.089415,154.685303 C158.257411,146.290368 160.004131,137.217594 160.004131,127.733184 L160.004131,127.613685 C160.004131,118.129275 158.257411,109.043534 155.089415,100.661566 C146.683802,97.5001809 137.576449,95.7600714 128.067377,95.7600714 Z"
          fill="currentColor"
          fillRule="currentColor"
        />
      </g>
    </svg>
  }
  >
    Automate emails using Zapier
  </Card>

  <Card
    title="Pipedream"
    href="https://pipedream.com/apps/resend"
    icon={
    <svg
      className="h-6 w-6"
      width="78"
      height="78"
      viewBox="0 0 78 78"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <title>Pipedream</title>
      <path
        d="M47.7519 30.1241C48.0541 31.7495 48.2068 33.8016 48.2068 36.2869C48.2068 39.0588 48.0096 41.316 47.6119 43.0587C47.2142 44.8013 46.667 46.1661 45.9671 47.1433C45.2672 48.1237 44.4273 48.7914 43.4475 49.1497C42.3892 49.5211 41.2764 49.7029 40.1579 49.6872C38.4304 49.6872 36.9861 49.3289 35.8185 48.6123C34.6509 47.8957 33.741 47.013 33.0888 45.9609V27.3294C33.881 26.2317 34.8959 25.3685 36.1334 24.7497C37.4558 24.1088 38.9051 23.7899 40.3679 23.8181C41.5671 23.7939 42.7618 23.9756 43.9024 24.3555C44.9024 24.7112 45.7623 25.3903 46.3521 26.2903C46.982 27.2219 47.4497 28.4988 47.7519 30.1241Z"
        fill="currentColor"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M1.61933 8.11214C0 11.2903 0 15.4506 0 23.7714V54.2286C0 62.5493 0 66.7097 1.61933 69.8879C3.04374 72.6834 5.31659 74.9563 8.11214 76.3807C11.2903 78 15.4506 78 23.7714 78H54.2286C62.5493 78 66.7097 78 69.8879 76.3807C72.6834 74.9563 74.9563 72.6834 76.3807 69.8879C78 66.7097 78 62.5493 78 54.2286V23.7714C78 15.4506 78 11.2903 76.3807 8.11214C74.9563 5.31659 72.6834 3.04374 69.8879 1.61933C66.7097 0 62.5493 0 54.2286 0H23.7714C15.4506 0 11.2903 0 8.11214 1.61933C5.31659 3.04374 3.04374 5.31659 1.61933 8.11214ZM58.2855 46.3192C59.0776 43.5017 59.4753 40.1793 59.4753 36.3585C59.4753 32.2023 59.1254 28.6909 58.4255 25.8246C57.7256 22.9582 56.6884 20.652 55.3109 18.9094C53.9333 17.1635 52.2408 15.8997 50.2366 15.1115C48.2291 14.3232 45.9194 13.9291 43.3075 13.9291C41.1569 13.9128 39.0217 14.3014 37.0083 15.0756C35.0995 15.8082 33.3425 16.9021 31.829 18.3003L29.7293 14.5024L22.1003 15.004V69.1786H33.0888V61.2244L32.9489 55.4199L33.1588 55.3483C34.5109 56.7326 36.0189 57.6642 37.6732 58.143C39.4174 58.6327 41.2191 58.8738 43.0275 58.8596C45.4995 58.8596 47.7519 58.4068 49.7816 57.4981C51.8113 56.5893 53.5388 55.205 54.9609 53.3418C56.383 51.4787 57.4901 49.1367 58.2855 46.3192Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Build workflows using Pipedream
  </Card>

  <Card
    title="Activepieces"
    href="https://www.activepieces.com/pieces/resend"
    icon={
    <svg
      className="h-6 w-6"
      width="56"
      height="50"
      viewBox="0 0 56 50"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <title>Activepieces</title>
      <path
        d="M17.3113 15.3098C14.2791 10.8144 15.4653 4.7122 19.9607 1.68001C24.456 -1.35215 30.5583 -0.165992 33.5904 4.3294L54.0697 34.6911C57.1018 39.1864 55.9157 45.2887 51.4203 48.3209C46.9249 51.353 40.8227 50.1669 37.7905 45.6715L28.9117 32.5081C27.7703 31.0698 25.4468 31.2937 24.0517 32.6888C22.8948 33.8457 22.516 36.8053 22.1881 39.3679C22.14 39.7436 22.093 40.1108 22.0448 40.4625C21.8669 42.1398 21.2877 43.7992 20.2789 45.2948C16.9823 50.1823 10.346 51.4707 5.4586 48.1741C0.571158 44.8775 -0.720183 38.2418 2.57644 33.3544C4.28615 30.8197 6.89414 29.2529 9.69057 28.7918L9.68663 28.7878C17.7665 27.6159 19.2645 18.4973 17.7858 16.0133L17.3113 15.3098Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Build workflows using Activepieces
  </Card>

  <Card
    title="Monkedo"
    href="https://monkedo.com/integrations/app/resend"
    icon={
<svg
      className="h-6 w-6"
      width="70"
      height="70"
      viewBox="0 0 300 300"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
    <title>Monkedo</title>
<path id="Selection"
      fill="currentColor"
      d="M 155.00,254.00
         C 130.11,254.00 106.02,248.09 83.00,238.80
           76.96,236.36 60.67,229.07 56.00,225.47
           45.10,217.07 46.03,210.07 40.79,205.42
           40.79,205.42 25.00,197.53 25.00,197.53
           16.15,192.04 10.40,182.12 8.46,172.00
           5.59,157.09 9.59,142.41 22.00,132.90
           31.50,125.62 34.73,127.48 38.30,122.87
           38.30,122.87 44.26,110.00 44.26,110.00
           47.64,103.06 52.39,95.99 57.26,90.00
           79.24,62.94 109.53,48.32 144.00,45.91
           144.00,45.91 156.00,45.01 156.00,45.01
           184.47,45.66 213.18,58.56 232.96,79.00
           232.96,79.00 254.04,105.77 254.04,105.77
           259.66,110.61 263.92,108.01 272.00,111.99
           284.97,118.39 291.62,132.07 292.68,146.00
           293.42,155.73 286.99,170.24 279.96,176.83
           279.96,176.83 267.70,186.21 267.70,186.21
           264.36,190.49 264.91,200.02 258.54,211.00
           255.42,216.37 250.59,222.69 246.00,226.83
           236.44,235.44 214.56,245.62 202.00,249.00
           206.82,243.15 212.17,239.55 215.47,232.00
           217.99,226.23 217.53,219.24 219.17,216.00
           221.75,210.93 228.79,207.78 233.01,201.00
           237.57,193.66 239.19,176.84 239.82,168.00
           240.11,163.85 238.61,155.08 237.41,151.00
           230.85,128.72 213.47,115.38 190.00,120.66
           183.84,122.05 177.23,124.84 172.00,128.36
           169.07,130.33 164.14,135.17 161.00,135.48
           157.70,135.79 148.45,130.39 145.00,128.78
           137.64,125.34 124.96,122.77 117.00,124.93
           97.13,130.30 82.56,154.01 83.01,174.00
           83.24,183.73 87.95,196.78 93.06,205.00
           96.24,210.10 101.12,215.87 106.00,219.37
           109.65,221.98 113.42,222.92 116.89,226.21
           122.67,231.69 120.74,236.83 130.00,244.79
           139.84,253.24 149.23,251.68 155.00,254.00 Z
         M 259.00,161.00
         C 256.67,161.61 254.41,162.04 253.02,164.27
           251.15,167.28 252.14,172.90 256.11,173.58
           260.96,174.41 267.84,168.49 270.61,165.00
           279.10,154.30 278.11,134.86 265.99,127.14
           258.29,122.24 243.87,123.88 245.98,132.00
           248.00,139.80 252.88,136.77 258.00,138.74
           263.60,140.89 269.57,149.89 268.43,156.00
           267.64,160.19 260.70,171.33 259.00,161.00 Z
         M 41.00,142.30
         C 32.91,143.88 29.22,146.35 25.74,154.00
           18.25,170.42 29.20,191.14 48.00,191.96
           62.66,192.60 64.03,182.57 65.28,171.00
           67.08,154.40 59.52,140.51 41.00,142.30 Z" />
</svg>
}
  >
    Automate emails using Monkedo
  </Card>

  <Card
    title="Make.com"
    href="https://www.make.com/en/integrations/resend"
    icon={
    <svg className="h-6 w-6" width="46" height="46" viewBox="0 0 46 46" fill="none" xmlns="http://www.w3.org/2000/svg">
      <title>Make.com</title>
      <rect x="34" y="8" width="9" height="28" rx="0.75" fill="currentColor"/>
      <rect x="24.8215" y="8" width="9" height="28" rx="0.75" transform="rotate(12 24.8215 8)" fill="currentColor"/>
      <rect x="15.1452" y="8" width="9" height="28" rx="0.75" transform="rotate(28 15.1452 8)" fill="currentColor"/>
    </svg>
  }
  >
    Build workflows using Make.com
  </Card>

  <Card
    title="Lindy"
    href="https://www.lindy.ai/integrations/resend"
    icon={
    <svg className="h-6 w-6" width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
      <title>Lindy</title>
      <path d="M10.8029 1.11017L9.10941 2.81543C8.96353 2.96232 8.96353 3.20182 9.10941 3.35192L16.4382 10.7318C16.584 10.8787 16.584 11.1182 16.4382 11.2683L9.10941 18.6481C8.96353 18.795 8.96353 19.0345 9.10941 19.1846L10.8029 20.8899C10.9487 21.0367 11.1866 21.0367 11.3356 20.8899L20.8906 11.2683C21.0365 11.1214 21.0365 10.8819 20.8906 10.7318L11.3356 1.11017C11.1898 0.963276 10.9519 0.963276 10.8029 1.11017Z" fill="currentColor"/>
      <path d="M5.78281 10.2325L9.88188 6.33183C10.0349 6.18619 10.0349 5.94874 9.88188 5.79993L8.10517 4.10923C7.95213 3.96359 7.70259 3.96359 7.54621 4.10923L1.11479 10.2325C0.961738 10.3781 0.961738 10.6156 1.11479 10.7644L7.54954 16.8907C7.70259 17.0364 7.95213 17.0364 8.1085 16.8907L9.88521 15.2001C10.0383 15.0544 10.0383 14.817 9.88521 14.6681L5.78281 10.7644C5.62976 10.6187 5.62976 10.3813 5.78281 10.2325Z" fill="currentColor"/>
    </svg>
  }
  >
    Build workflows using Lindy
  </Card>

  <Card
    title="BuildShip"
    href="https://buildship.com/integrations/resend"
    icon={
    <svg className="h-6 w-6" width="106" height="149" viewBox="0 0 106 149" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path fillRule="evenodd" clipRule="evenodd" d="M31.9923 104.997C19.6877 104.938 15.5862 101.925 9.58646 95.9192C-2.90892 83.4342 -3.22369 63.4663 8.87108 51.3752C14.6037 45.6447 22.4156 42.4644 30.6282 42.4939H41.1301V29.9992H41.1492C41.6929 13.3396 55.8003 -0.00195312 73.1317 -0.00195312C90.7874 -0.00195312 105.133 13.891 105.133 31.0036C105.133 48.126 90.7874 62.462 73.1126 62.462L61.1322 62.4915V84.9998H72.1301C89.2516 84.9998 103.13 99.326 103.13 117C103.13 134.664 89.2421 149 72.1301 149C55.991 149 42.5513 136.259 41.0824 119.983L41.1301 104.997C41.1301 104.997 35.0446 105.086 31.9923 104.997ZM31.315 62.4915L31.3245 62.5407C28.2818 62.4915 25.3917 63.6533 23.2741 65.7703C18.8674 70.1715 18.9914 77.4282 23.5317 81.9771C25.6969 84.1432 28.5298 85.0589 31.5534 85.118L41.1301 84.9998V62.4915H31.315ZM61.1322 31.0036V42.4939L73.1412 42.4743C79.5702 42.4743 84.7686 37.2263 84.7686 31.0036C84.7686 24.7808 79.5511 19.7198 73.1317 19.7198C66.7028 19.7198 61.1322 24.771 61.1322 31.0036ZM72.2064 105.056L61.1322 104.997V119.57C62.2673 124.759 66.7599 128.638 72.1301 128.638C78.3587 128.638 83.4045 123.429 83.4045 117C83.4045 110.57 78.435 105.056 72.2064 105.056Z" fill="currentColor"/>
  </svg>
  }
  >
    Build workflows using BuildShip
  </Card>

  <Card
    title="viaSocket"
    href="https://viasocket.com/integrations/resend"
    icon={
   <svg class="h-6 w-6" width="32" height="32" viewBox="128 128 300 300" fill="none" xmlns="http://www.w3.org/2000/svg"><path id="Selection"
      fill="currentColor"
      d="M 397.00,409.89
         C 396.84,411.94 396.90,413.90 395.40,415.40
           390.55,420.26 375.32,413.65 371.33,409.67
           371.33,409.67 365.62,402.60 365.62,402.60
           363.57,400.98 361.47,401.05 359.00,401.00
           359.00,401.00 223.00,401.00 223.00,401.00
           223.00,401.00 192.00,401.00 192.00,401.00
           188.86,400.95 185.82,400.96 183.43,398.57
           180.64,395.78 181.01,391.62 181.00,388.00
           181.00,388.00 181.00,228.00 181.00,228.00
           181.00,228.00 181.00,194.00 181.00,194.00
           181.01,190.74 180.71,186.98 182.74,184.21
           185.93,179.87 191.19,180.01 196.00,180.00
           196.00,180.00 365.00,180.00 365.00,180.00
           365.00,180.00 401.00,180.00 401.00,180.00
           405.00,180.01 409.52,179.73 412.77,182.51
           416.37,185.58 415.99,189.73 416.00,194.00
           416.00,194.00 416.00,321.00 416.00,321.00
           415.99,324.19 416.29,328.09 414.26,330.77
           411.04,335.05 403.46,335.27 400.17,328.98
           398.79,326.34 399.00,322.91 399.00,320.00
           399.00,320.00 399.00,198.00 399.00,198.00
           399.00,198.00 198.00,198.00 198.00,198.00
           198.00,198.00 198.00,384.00 198.00,384.00
           198.00,384.00 305.00,384.00 305.00,384.00
           305.00,384.00 359.00,384.00 359.00,384.00
           361.50,383.95 363.55,384.02 365.63,382.40
           365.63,382.40 372.04,375.10 372.04,375.10
           376.12,371.22 390.25,364.74 395.26,369.74
           396.75,371.22 396.77,373.08 397.00,375.00
           400.73,375.00 412.11,374.58 414.96,375.74
           417.36,376.72 419.67,379.06 418.60,381.86
           416.77,386.64 401.53,385.00 397.00,385.00
           397.00,385.00 397.00,400.07 397.00,400.07
           397.00,400.07 413.98,400.07 413.98,400.07
           416.60,400.56 419.14,401.97 419.14,404.98
           419.14,407.91 416.51,409.30 413.98,409.89
           413.98,409.89 397.00,409.89 397.00,409.89 Z
         M 257.00,236.56
         C 278.40,236.00 275.68,266.44 257.00,264.15
           242.05,262.32 238.93,240.39 257.00,236.56 Z
         M 340.00,236.64
         C 359.92,236.95 358.53,262.96 342.00,264.36
           331.15,265.28 323.80,253.49 328.69,244.02
           331.22,239.09 334.83,237.55 340.00,236.64 Z
         M 270.04,311.74
         C 276.05,310.26 295.44,313.01 304.00,313.00
           304.00,313.00 329.00,311.43 329.00,311.43
           337.08,313.66 338.57,325.00 329.00,328.86
           324.67,330.60 318.61,330.71 314.00,331.17
           302.01,332.37 285.79,331.96 274.00,329.54
           263.08,327.29 262.18,316.32 270.04,311.74 Z
         M 387.00,379.00
         C 373.52,380.44 371.64,393.77 376.72,400.90
           379.24,404.42 383.12,405.64 387.00,407.00
           387.00,407.00 387.00,379.00 387.00,379.00 Z" />
</svg>

  }
  >
    Build automations using viaSocket
  </Card>

  <Card
    title="Stacksync"
    href="https://www.stacksync.com/connectors/resend"
    icon={
   <svg className="h-6 w-6" width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M29.6451 2.01246C29.8747 1.88009 30.1438 1.89179 30.354 2.01637L55.69 16.6511C56.0285 16.8457 56.1459 17.2782 55.9517 17.613C55.8855 17.726 55.795 17.8154 55.69 17.8738L45.7193 23.6316L55.7046 29.3982C56.043 29.5928 56.1558 30.0252 55.9615 30.364C55.8953 30.4767 55.8056 30.5624 55.7007 30.6248L45.7447 36.3738L55.6939 42.1209C56.0326 42.3156 56.146 42.748 55.9517 43.0867C55.8778 43.2111 55.7763 43.3047 55.6558 43.367L30.3462 57.9861C30.1166 58.1184 29.8475 58.1066 29.6372 57.9822L4.30131 43.3435C3.96271 43.1488 3.84499 42.7164 4.03959 42.3816C4.10575 42.2687 4.19625 42.1831 4.29741 42.1248L14.2554 36.3709L4.29545 30.6091C3.95691 30.4144 3.84416 29.983 4.03862 29.6443C4.10478 29.5314 4.19427 29.445 4.29936 29.3826L14.2622 23.6287L18.9722 26.3503L12.6509 29.9978L20.147 34.3269L20.2017 34.3621H20.2056L29.9976 40.0193L36.3189 36.3679L4.30131 17.8738C3.9629 17.6793 3.84544 17.2476 4.03959 16.9128C4.10576 16.7999 4.19623 16.7095 4.30131 16.6511L29.6451 2.01246ZM12.6451 42.7322L29.9956 52.7537L47.3423 42.7361L41.0328 39.0916L30.356 45.2595C30.1264 45.392 29.8572 45.3802 29.647 45.2556L28.8335 44.7888L18.9585 39.0847L12.6451 42.7322ZM23.6861 23.6336L41.022 33.6462L47.3404 30.0017L39.8443 25.6726C39.821 25.6608 39.7972 25.6452 39.7779 25.6296L30.0015 19.9851L23.6861 23.6336ZM12.649 17.2586L18.9849 20.9177L29.647 14.7605C29.8884 14.6203 30.1771 14.639 30.3951 14.783L41.0103 20.9158L47.3501 17.2546L29.9956 7.23805L12.649 17.2586Z" fill="currentColor"/>
</svg>

  }
  >
    Build automations using Stacksync
  </Card>
</CardGroup>

## Notifications

<CardGroup>
  <Card
    title="Courier"
    href="https://www.courier.com/docs/guides/providers/email/resend/"
    icon={
    <svg
      className="h-6 w-6"
      width="68"
      height="68"
      viewBox="0 0 68 68"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <title>Courier</title>
      <path
        d="M63.5245 30.6744C63.6695 30.4568 63.7421 30.1668 63.7421 29.9492C61.1315 14.8658 47.9335 3.40823 32.125 3.40823C14.3585 3.40823 -0.0722441 17.9115 0.00027211 35.7505C0.145305 53.0819 14.7211 67.5851 31.9799 67.5851C46.7007 67.6576 59.101 57.7954 62.9444 44.3799C63.0894 43.9448 62.7993 43.4372 62.3642 43.2197L61.059 42.712C55.9103 40.8991 50.1815 41.5518 45.613 44.525C43.51 45.9028 41.9872 46.9905 41.9872 46.9905C39.3766 48.7309 36.1859 49.8186 32.8501 49.8186C23.7856 49.8186 17.4767 42.422 16.4615 33.43L15.7363 28.4989C15.5188 26.976 14.5035 25.7432 13.0532 25.1631L11.2403 24.4379C10.9502 24.2929 10.8052 23.9303 11.0228 23.6403C18.782 13.2705 28.2816 15.5185 28.2816 15.5185C29.9495 15.6635 31.3998 16.3161 32.5601 17.1138C34.2279 18.2741 35.5332 19.942 36.3309 21.8274C39.2316 28.4989 45.9031 33.2124 53.6623 33.2124C53.6623 33.2124 61.059 33.5025 63.5245 30.6744Z"
        fill="currentColor"
      />
      <path
        d="M19.7247 22.9151C20.766 22.9151 21.6101 22.071 21.6101 21.0297C21.6101 19.9884 20.766 19.1443 19.7247 19.1443C18.6834 19.1443 17.8393 19.9884 17.8393 21.0297C17.8393 22.071 18.6834 22.9151 19.7247 22.9151Z"
        fill="currentColor"
      />
      <path
        d="M20.0873 32.7048C20.5224 35.6054 22.8429 44.8875 33.1402 46.5554C33.2852 46.5554 33.3578 46.3379 33.2127 46.2653C30.8197 45.1776 24.5833 41.5518 20.3773 32.5598C20.3048 32.4872 20.0873 32.5598 20.0873 32.7048Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Trigger messages using Courier
  </Card>

  <Card
    title="Novu"
    href="https://docs.novu.co/platform/integrations/email/resend"
    icon={
    <svg
      viewBox="0 0 102 32"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className="h-6"
    >
      <title>Novu</title>
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M24.64 12.826c0 .86-1.044 1.286-1.646.671L10.676.907A15.974 15.974 0 0 1 16 0c3.183 0 6.148.93 8.64 2.531v10.295Zm4.48-5.986v5.986c0 4.875-5.919 7.289-9.328 3.804L6.545 3.091C2.576 6.003 0 10.701 0 16c0 3.407 1.065 6.565 2.88 9.16v-5.954c0-4.875 5.919-7.289 9.328-3.804l13.229 13.52C29.416 26.012 32 21.308 32 16c0-3.407-1.065-6.565-2.88-9.16ZM9.006 18.535 21.301 31.1C19.642 31.683 17.858 32 16 32c-3.182 0-6.148-.93-8.64-2.531V19.206c0-.86 1.045-1.286 1.646-.671Z"
        fill="currentColor"
      ></path>
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M24.64 12.826c0 .86-1.044 1.286-1.646.671L10.676.907A15.974 15.974 0 0 1 16 0c3.183 0 6.148.93 8.64 2.531v10.295Zm4.48-5.986v5.986c0 4.875-5.919 7.289-9.328 3.804L6.545 3.091C2.576 6.003 0 10.701 0 16c0 3.407 1.065 6.565 2.88 9.16v-5.954c0-4.875 5.919-7.289 9.328-3.804l13.229 13.52C29.416 26.012 32 21.308 32 16c0-3.407-1.065-6.565-2.88-9.16ZM9.006 18.535 21.301 31.1C19.642 31.683 17.858 32 16 32c-3.182 0-6.148-.93-8.64-2.531V19.206c0-.86 1.045-1.286 1.646-.671Z"
        fill="currentColor"
      ></path>
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M24.64 12.826c0 .86-1.044 1.286-1.646.671L10.676.907A15.974 15.974 0 0 1 16 0c3.183 0 6.148.93 8.64 2.531v10.295Zm4.48-5.986v5.986c0 4.875-5.919 7.289-9.328 3.804L6.545 3.091C2.576 6.003 0 10.701 0 16c0 3.407 1.065 6.565 2.88 9.16v-5.954c0-4.875 5.919-7.289 9.328-3.804l13.229 13.52C29.416 26.012 32 21.308 32 16c0-3.407-1.065-6.565-2.88-9.16ZM9.006 18.535 21.301 31.1C19.642 31.683 17.858 32 16 32c-3.182 0-6.148-.93-8.64-2.531V19.206c0-.86 1.045-1.286 1.646-.671Z"
        fill="currentColor"
      ></path>
    </svg>
  }
  >
    Send notifications using Novu
  </Card>

  <Card
    title="Knock"
    href="https://docs.knock.app/integrations/email/resend"
    icon={
    <svg
      className="h-6 w-6"
      width="14"
      height="20"
      viewBox="0 0 14 20"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <title>Knock</title>
      <path
        d="M0 20V0.075058H4.19706V11.5013H4.31447L8.92243 5.90189H13.6184L8.51153 11.7003L14 20H9.33333L6.04612 14.5142L4.19706 16.5323V20H0Z"
        fill="currentColor"
      />
      <path
        d="M13.6748 2.45476C13.6748 3.81049 12.5399 4.90953 11.14 4.90953C9.74009 4.90953 8.60522 3.81049 8.60522 2.45476C8.60522 1.09904 9.74009 0 11.14 0C12.5399 0 13.6748 1.09904 13.6748 2.45476Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Send notifications using Knock
  </Card>

  <Card
    title="Engagespot"
    href="https://docs.engagespot.co/docs/features/channels/email/resend/"
    icon={
    <svg className="h-6 w-6" fill="none" viewBox="0 0 38 35">
      <title>Engagespot</title>
      <g clipPath="url(#clip0_1_2)">
        <mask
          id="mask0_1_2"
          style={{ maskType: 'alpha' }}
          maskUnits="userSpaceOnUse"
          x="0"
          y="0"
          width="38"
          height="35"
        >
          <path d="M38 0H0V35H38V0Z" fill="currentColor" />
        </mask>
        <g mask="url(#mask0_1_2)">
          <mask
            id="mask1_1_2"
            style={{ maskType: 'alpha' }}
            maskUnits="userSpaceOnUse"
            x="0"
            y="0"
            width="39"
            height="35"
          >
            <path
              d="M36.9851 6.29843L28.4354 0.606125C27.3381 -0.131766 25.9208 -0.131766 24.8235 0.606125L19.2456 4.29559L19.1541 4.24287H19.1084L13.5762 0.553417C12.4789 -0.184472 11.0616 -0.184472 9.96426 0.553417L1.4145 6.24571C0.68297 6.72008 0.271484 7.61608 0.271484 8.56481V19.3696C0.271484 21.2144 1.14018 22.901 2.51179 23.797L19.1541 34.8127L35.8423 23.797C37.2137 22.901 38.0826 21.1616 38.0826 19.3169V8.56481C38.1283 7.61608 37.7168 6.77278 36.9851 6.29843Z"
              fill="currentColor"
            />
          </mask>
          <g mask="url(#mask1_1_2)">
            <path
              d="M12.7274 34.8008L-1.21742 26.2624L-1.62891 7.9206L11.8587 -1.88281L25.8035 6.65565L26.215 24.9975L12.7274 34.8008Z"
              fill="currentColor"
            />
            <path
              d="M27.5262 35.5996L13.6271 27.114L13.1699 8.77214L26.7033 -1.03125L40.6481 7.50719L41.0596 25.7963L27.5262 35.5996Z"
              fill="#B22977"
            />
            <path
              d="M19.9286 40.9787L6.02947 32.493L5.57228 14.151L19.1056 4.34766L29.5877 11.8891V31.0365L19.9286 40.9787Z"
              fill="currentColor"
            />
            <path
              opacity="0.36"
              d="M40.5925 21.2415L18.3265 37.2642L17.915 18.9751L41.0904 4.96094L40.5925 21.2415Z"
              fill="currentColor"
            />
            <path
              d="M-3.61505 22.8555L19.291 36.77L18.8795 18.4809L-4.07227 4.56641L-3.61505 22.8555Z"
              fill="currentColor"
            />
          </g>
          <mask
            id="mask2_1_2"
            style={{ maskType: 'alpha' }}
            maskUnits="userSpaceOnUse"
            x="0"
            y="0"
            width="39"
            height="35"
          >
            <path
              d="M36.9851 6.29843L28.4354 0.606125C27.3381 -0.131766 25.9208 -0.131766 24.8235 0.606125L19.2456 4.29559L19.1541 4.24287H19.1084L13.5762 0.553417C12.4789 -0.184472 11.0616 -0.184472 9.96426 0.553417L1.4145 6.24571C0.68297 6.72008 0.271484 7.61608 0.271484 8.56481V19.3696C0.271484 21.2144 1.14018 22.901 2.51179 23.797L19.1541 34.8127L35.8423 23.797C37.2137 22.901 38.0826 21.1616 38.0826 19.3169V8.56481C38.1283 7.61608 37.7168 6.77278 36.9851 6.29843Z"
              fill="currentColor"
            />
          </mask>
          <g mask="url(#mask2_1_2)">
            <path
              d="M12.7274 34.8008L-1.21742 26.2624L-1.62891 7.9206L11.8587 -1.88281L25.8035 6.65565L26.215 24.9975L12.7274 34.8008Z"
              fill="currentColor"
            />
            <path
              d="M27.5262 35.5996L13.6271 27.114L13.1699 8.77214L26.7033 -1.03125L40.6481 7.50719L41.0596 25.7963L27.5262 35.5996Z"
              fill="currentColor"
            />
            <path
              d="M19.9286 40.9787L6.02947 32.493L5.57228 14.151L19.1056 4.34766L29.5877 11.8891V31.0365L19.9286 40.9787Z"
              fill="currentColor"
            />
            <path
              d="M40.5925 21.2415L18.3265 37.2642L17.915 18.9751L41.0904 4.96094L40.5925 21.2415Z"
              fill="currentColor"
            />
            <path
              d="M-3.61505 22.8555L19.291 36.77L18.8795 18.4809L-4.07227 4.56641L-3.61505 22.8555Z"
              fill="currentColor"
            />
          </g>
        </g>
      </g>
      <defs>
        <clipPath id="clip0_1_2">
          <rect width="38" height="35" fill="currentColor" />
        </clipPath>
      </defs>
    </svg>
  }
  >
    Send notifications using Engagespot
  </Card>

  <Card
    title="Dittofeed"
    href="https://docs.dittofeed.com/integrations/channels/resend"
    icon={
    <svg className="h-6 w-6" viewBox="0 0 40 38" fill="none">
      <title>Dittofeed</title>
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M25.5907 33.1617C27.229 27.0472 24.4917 21.0012 19.4767 19.6575C14.4617 18.3138 9.06812 22.1811 7.42981 28.2953C5.93843 33.8613 9.318 34.724 13.7192 35.8477C14.1529 35.9585 14.5965 36.0716 15.0463 36.1922C15.4961 36.3127 15.9369 36.4365 16.3678 36.5574C20.7411 37.785 24.0994 38.7274 25.5907 33.1617ZM21.5024 30.5195C22.3244 27.4521 20.9385 24.4156 18.4071 23.7373C15.8756 23.059 13.1571 24.9957 12.3352 28.0633C11.5627 30.946 13.3777 31.4228 15.7003 32.0329C15.8491 32.0718 15.9999 32.1114 16.1522 32.1522C16.3046 32.1931 16.455 32.2342 16.6034 32.2748C18.9198 32.9078 20.73 33.4025 21.5024 30.5195ZM13.8755 4.33377C12.2371 10.4481 14.9745 16.494 19.9895 17.8378C25.0046 19.1816 30.3982 15.3143 32.0365 9.19999C33.5278 3.63409 30.1482 2.77127 25.7471 1.64761C25.3133 1.53691 24.8699 1.42365 24.42 1.30314C23.9702 1.1826 23.5293 1.05888 23.0985 0.937938C18.7251 -0.289572 15.3669 -1.23214 13.8755 4.33377ZM17.9636 6.97574C17.1416 10.0433 18.5275 13.0798 21.059 13.7582C23.5905 14.4365 26.309 12.4996 27.1308 9.4321C27.9032 6.54919 26.0883 6.07253 23.7657 5.46254C23.617 5.42348 23.4662 5.38387 23.3137 5.34303C23.1614 5.30222 23.011 5.26111 22.8626 5.22057C20.5462 4.58752 18.7361 4.09283 17.9636 6.97574ZM2.51398 23.1191C6.37268 24.1531 10.5065 21.2378 11.7471 16.6078C12.9878 11.9777 10.8654 7.38613 7.00667 6.35219C3.49407 5.41099 2.68583 8.52804 1.63326 12.5874C1.52956 12.9874 1.42348 13.3965 1.31219 13.8118C1.20091 14.227 1.08823 14.6344 0.97806 15.0326C-0.140057 19.0744 -0.998623 22.1779 2.51398 23.1191ZM4.85546 18.5831C6.47756 19.0177 8.22079 17.7718 8.74908 15.8001C9.27738 13.8285 8.39069 11.8778 6.76859 11.4432C5.24412 11.0347 4.87063 12.4477 4.39264 14.2559C4.36203 14.3717 4.33099 14.4891 4.2992 14.6078C4.26742 14.7265 4.23559 14.8437 4.20419 14.9592C3.71403 16.7642 3.33099 18.1746 4.85546 18.5831ZM36.9296 14.3759C33.0707 13.3419 28.937 16.2572 27.6964 20.8872C26.4558 25.5174 28.5781 30.1088 32.4367 31.1428C35.9494 32.084 36.7576 28.967 37.8102 24.9078C37.9139 24.5078 38.02 24.0986 38.1313 23.6834C38.2425 23.268 38.3552 22.8607 38.4654 22.4624C39.5835 18.4206 40.4421 15.3171 36.9296 14.3759ZM34.5879 18.912C32.9659 18.4773 31.2226 19.7233 30.6945 21.6949C30.1661 23.6665 31.0528 25.6173 32.6748 26.0519C34.1993 26.4603 34.5728 25.0474 35.0508 23.2391C35.0814 23.1234 35.1124 23.0059 35.1443 22.8872C35.176 22.7685 35.2078 22.6515 35.2393 22.5358C35.7293 20.7309 36.1124 19.3204 34.5879 18.912Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Send automated emails using Dittofeed
  </Card>

  <Card
    title="Suprsend"
    href="https://docs.suprsend.com/docs/resend"
    icon={
    <svg className="h-6 w-6"  width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
      <title>Suprsend</title>
      <path d="M26.5777 4.65928L19.5223 8.79046L19.5364 0.585938L26.5777 4.65928Z" fill="currentColor"/>
      <path d="M19.5222 8.79164L12.2794 12.6862L12.478 4.58008L19.5222 8.79164Z" fill="currentColor"/>
      <path d="M12.3217 12.6661L5.19641 16.614L5.39497 8.50781L12.3217 12.6661Z" fill="currentColor"/>
      <path d="M5.19037 16.6146L12.3024 20.8912L12.3149 12.6621L5.19037 16.6146Z" fill="currentColor"/>
      <path d="M19.5233 8.79147L12.48 4.5799L19.538 0.587891L19.5233 8.79147Z" fill="currentColor"/>
      <path d="M12.3187 12.668L5.39081 8.51372L12.4814 4.58008L12.3187 12.668Z" fill="currentColor"/>
      <path d="M5.31079 27.7316L12.3206 23.5234L12.3962 31.7277L5.31079 27.7316Z" fill="currentColor"/>
      <path d="M12.3195 23.5263L19.5191 19.5527L19.4092 27.6606L12.3195 23.5263Z" fill="currentColor"/>
      <path d="M19.4817 19.5724L26.5634 15.5469L26.4535 23.6546L19.4817 19.5724Z" fill="currentColor"/>
      <path d="M26.5614 15.5442L19.4031 11.3457L19.4805 19.5745L26.5614 15.5442Z" fill="currentColor"/>
      <path d="M12.3188 23.5254L19.4077 27.6596L12.3939 31.7286L12.3188 23.5254Z" fill="currentColor"/>
      <path d="M19.4808 19.5703L26.4537 23.6486L19.4067 27.6596L19.4808 19.5703Z" fill="currentColor"/>
    </svg>
  }
  >
    Send notifications using Suprsend
  </Card>
</CardGroup>

## Developer tools

<CardGroup>
  <Card
    title="Convex"
    href="https://www.convex.dev/components/resend"
    icon={
    <svg
      className="h-6 w-6"
      width="122"
      height="125"
      viewBox="0 0 122 125"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M75.9376 96.0309C92.8004 94.1524 108.699 85.1418 117.452 70.103C113.307 107.301 72.7453 130.811 39.6369 116.377C36.586 115.05 33.96 112.843 32.1579 110.006C24.7175 98.2901 22.2717 83.3825 25.7859 69.8535C35.8265 87.2306 56.2425 97.8824 75.9376 96.0309Z"
        fill="currentColor"
      />
      <path
        d="M25.1702 58.9393C18.3348 74.7791 18.0388 93.3254 26.4188 108.588C-3.0724 86.3385 -2.75057 38.7252 26.0584 16.6986C28.723 14.6627 31.8897 13.4543 35.2108 13.2705C48.8687 12.548 62.7455 17.8413 72.477 27.7054C52.7048 27.9023 33.4473 40.6035 25.1702 58.9393Z"
        fill="currentColor"
      />
      <path
        d="M82.013 32.5765C72.037 18.6276 56.4223 9.13129 39.3146 8.84235C72.3841 -6.20988 113.061 18.1941 117.49 54.2748C117.902 57.6241 117.361 61.0391 115.881 64.06C109.702 76.6428 98.2455 86.4018 84.8581 90.0135C94.6671 71.7697 93.4566 49.4806 82.013 32.5765Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Send emails with Convex's Resend Component
  </Card>

  <Card
    title="Inngest"
    href="https://www.inngest.com/docs/guides/resend-webhook-events"
    icon={
    <svg className="h-6 w-6" fill="none" viewBox="0 0 270 270">
      <title>Inngest</title>
      <mask
        id="mask0_680_113"
        style={{ maskType: 'alpha' }}
        maskUnits="userSpaceOnUse"
        x="21"
        y="2"
        width="228"
        height="265"
      >
        <path
          fillRule="evenodd"
          clipRule="evenodd"
          d="M145.841 5.0459L238.431 60.6531C244.777 64.506 248.73 71.3788 248.626 78.8764V189.987C248.626 197.484 244.777 204.357 238.327 208.21L145.737 263.817C141.783 266.421 133.669 269.44 123.89 263.817L31.2994 208.21C24.9533 204.357 21 197.484 21 189.987V78.8764C21 71.3788 24.8492 64.506 31.2994 60.6531L123.994 5.0459C130.756 0.9847 139.078 0.9847 145.841 5.0459ZM77.9258 134.5C67.446 134.5 58.9504 142.996 58.9504 153.475C58.9504 163.955 67.446 172.451 77.9258 172.451C82.9583 172.451 87.7848 170.452 91.3433 166.893C94.9019 163.334 96.9011 158.508 96.9011 153.475C96.9011 142.996 88.4055 134.5 77.9258 134.5ZM134.852 115.525C124.372 115.525 115.876 124.02 115.876 134.5C115.876 144.98 124.372 153.475 134.852 153.475C139.884 153.475 144.711 151.476 148.269 147.918C151.828 144.359 153.827 139.533 153.827 134.5C153.827 124.02 145.331 115.525 134.852 115.525ZM191.778 96.5494C181.298 96.5494 172.802 105.045 172.802 115.525C172.802 126.005 181.298 134.5 191.778 134.5C196.81 134.5 201.637 132.501 205.195 128.942C208.754 125.384 210.753 120.557 210.753 115.525C210.753 105.045 202.257 96.5494 191.778 96.5494Z"
          fill="currentColor"
        />
      </mask>
      <g mask="url(#mask0_680_113)">
        <rect x="21" y="2" width="227.704" height="265" fill="currentColor" />
      </g>
    </svg>
  }
  >
    Send drip campaigns using Inngest
  </Card>

  <Card
    title="Upstash"
    href="https://upstash.com/docs/qstash/integrations/resend"
    icon={
    <svg
      className="h-6 w-6"
      width="354"
      height="472"
      viewBox="0 0 354 472"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <title>Upstash</title>
      <path
        d="M0.421875 412.975C78.5269 491.079 205.16 491.079 283.265 412.975C361.369 334.87 361.369 208.237 283.265 130.132L247.909 165.487C306.488 224.066 306.488 319.041 247.909 377.619C189.331 436.198 94.3559 436.198 35.7769 377.619L0.421875 412.975Z"
        fill="currentColor"
      />
      <path
        d="M71.1328 342.264C110.185 381.316 173.501 381.316 212.554 342.264C251.606 303.212 251.606 239.895 212.554 200.843L177.199 236.198C196.725 255.724 196.725 287.382 177.199 306.909C157.672 326.435 126.014 326.435 106.488 306.909L71.1328 342.264Z"
        fill="currentColor"
      />
      <path
        d="M353.974 59.4209C275.869 -18.6836 149.236 -18.6836 71.1315 59.4209C-6.97352 137.526 -6.97352 264.159 71.1315 342.264L106.486 306.909C47.9085 248.33 47.9085 153.355 106.486 94.7769C165.065 36.1979 260.04 36.1979 318.618 94.7769L353.974 59.4209Z"
        fill="currentColor"
      />
      <path
        d="M283.264 130.132C244.212 91.08 180.894 91.08 141.842 130.132C102.789 169.185 102.789 232.501 141.842 271.553L177.197 236.198C157.671 216.672 157.671 185.014 177.197 165.487C196.723 145.961 228.381 145.961 247.908 165.487L283.264 130.132Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Send emails using Upstash
  </Card>

  <Card
    title="Trigger.dev"
    href="https://trigger.dev/docs/guides/examples/resend-email-sequence"
    icon={
    <svg
      className="h-6 w-6"
      width="199"
      height="174"
      viewBox="0 0 199 174"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <title>Trigger.dev</title>
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M59.3512 70.3883L99.5 0.849602L199 173.191H0L40.1488 103.65L68.5493 120.048L56.8032 140.394H142.197L99.5 66.4424L87.7539 86.7881L59.3512 70.3883Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Send drip campaigns using Trigger.dev
  </Card>

  <Card
    title="Infisical"
    href="https://infisical.com/docs/self-hosting/configuration/envars#resend"
    icon={
    <svg
      className="h-6 w-6"
      width="91"
      height="43"
      viewBox="0 0 91 43"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <title>Infisical</title>
      <path
        d="M21.9734 0C24.8526 0 27.4793 0.412021 29.8535 1.23606C32.2528 2.06011 34.4123 3.13386 36.3318 4.45732C38.2766 5.75581 39.9814 7.10424 41.4463 8.50261C42.2545 9.25174 42.987 9.98839 43.6436 10.7125C44.3003 11.4367 44.9317 12.1609 45.5379 12.885C46.0935 12.1609 46.6618 11.4617 47.2427 10.7875C47.8489 10.0883 48.6066 9.32665 49.5158 8.50261C51.7132 6.38008 54.4409 4.43235 57.699 2.65941C60.9824 0.886471 64.7835 0 69.1024 0C73.1435 0 76.8183 0.97387 80.127 2.92161C83.4609 4.84437 86.1002 7.42886 88.045 10.6751C90.015 13.9213 91 17.5171 91 21.4625C91 24.4591 90.4317 27.2683 89.2952 29.8902C88.1586 32.4872 86.5927 34.7721 84.5974 36.7448C82.6021 38.6925 80.2785 40.2282 77.6266 41.3519C74.9746 42.4506 72.1332 43 69.1024 43C66.2231 43 63.5712 42.6005 61.1465 41.8014C58.7472 40.9774 56.5751 39.9286 54.6303 38.6551C52.7108 37.3815 51.0186 36.0706 49.5537 34.7221C48.7202 33.8981 47.9752 33.124 47.3185 32.3998C46.6871 31.6507 46.0935 30.9141 45.5379 30.1899C44.9065 30.9141 44.2624 31.6507 43.6057 32.3998C42.9491 33.149 42.2166 33.9231 41.4084 34.7221C39.9688 36.0706 38.2766 37.3815 36.3318 38.6551C34.4123 39.9036 32.2528 40.9399 29.8535 41.7639C27.4793 42.588 24.8526 43 21.9734 43C17.8818 43 14.1817 42.0386 10.873 40.1159C7.56439 38.1931 4.92506 35.6086 2.95504 32.3624C0.985013 29.0912 0 25.4579 0 21.4625C0 18.491 0.555648 15.7192 1.66694 13.1472C2.8035 10.5502 4.36941 8.26539 6.3647 6.29269C8.38523 4.31998 10.7215 2.78427 13.3734 1.68554C16.0507 0.561848 18.9173 0 21.9734 0ZM10.4563 21.4625C10.4563 23.5351 10.974 25.4204 12.0096 27.1185C13.0451 28.8165 14.4342 30.1649 16.1769 31.1638C17.9197 32.1626 19.8518 32.662 21.9734 32.662C24.3475 32.662 26.5322 32.1376 28.5275 31.0889C30.5228 30.0401 32.3791 28.7166 34.0966 27.1185C35.1826 26.0947 36.1171 25.1083 36.9001 24.1594C37.683 23.2105 38.365 22.3116 38.9459 21.4625C38.3397 20.6635 37.6199 19.777 36.7864 18.8031C35.9782 17.8043 35.0816 16.8554 34.0966 15.9564C32.4802 14.3833 30.649 13.0598 28.6032 11.9861C26.5575 10.8873 24.3475 10.338 21.9734 10.338C19.8518 10.338 17.9197 10.8499 16.1769 11.8737C14.4342 12.8725 13.0451 14.221 12.0096 15.919C10.974 17.592 10.4563 19.4399 10.4563 21.4625ZM80.4679 21.4625C80.4679 19.4399 79.9502 17.592 78.9146 15.919C77.9044 14.221 76.5405 12.8725 74.8231 11.8737C73.1056 10.8499 71.1987 10.338 69.1024 10.338C67.486 10.338 65.9453 10.5877 64.4804 11.0871C63.0155 11.5865 61.639 12.2607 60.351 13.1098C59.0881 13.9588 57.9263 14.9077 56.8655 15.9564C55.729 17.0052 54.7313 18.079 53.8726 19.1777C53.0139 20.2515 52.3951 21.0131 52.0162 21.4625C52.6477 22.3365 53.3549 23.248 54.1378 24.1969C54.9208 25.1208 55.83 26.0947 56.8655 27.1185C58.5577 28.7166 60.4015 30.0401 62.3968 31.0889C64.4173 32.1376 66.6525 32.662 69.1024 32.662C71.1987 32.662 73.1056 32.1626 74.8231 31.1638C76.5405 30.1649 77.9044 28.8165 78.9146 27.1185C79.9502 25.4204 80.4679 23.5351 80.4679 21.4625Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Send email when self-hosting Infisical
  </Card>

  <Card
    title="Fastgen"
    href="https://docs.fastgen.com/actions/integrations/resend"
    icon={
    <svg
      className="h-6 w-6"
      width="341"
      height="639"
      viewBox="0 0 341 639"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <title>Fastgen</title>
      <path
        d="M124.055 281.936C85.4199 323.452 41.1491 402.46 167.61 525.124C169.054 525.852 169.226 525.647 167.799 522.085C162.896 509.841 148.76 473.417 147.658 441.383C146.236 400.028 165.156 370.923 174.248 360.761C198.862 333.247 276.425 258.605 309.11 226.217C341.795 193.829 342.822 131.017 339.915 95.628C337.589 67.3167 334.499 72.6184 331.23 75.8291C286.8 120.721 167.035 239.46 124.055 281.936Z"
        fill="currentColor"
      />
      <path
        d="M191.752 543.303C190.004 541.192 166.79 490.436 166.415 451.524C165.007 427.954 168.397 412.593 170.652 401.957C171.473 400.141 172.512 399.788 173.489 400.748C198.436 425.247 260.074 494.383 264.655 499.052C270.399 504.904 276.598 517.658 276.598 517.658C286.61 536.3 298.531 570.561 295.876 608.76C293.891 637.323 292.119 639.736 289.687 638.817C288.292 638.29 272.502 622.982 258.003 608.925C247.209 598.461 237.131 588.69 234.238 586.226C227.46 580.451 208.67 562.084 194.368 546.421C193.493 545.462 193.501 545.413 191.752 543.303Z"
        fill="currentColor"
      />
      <path
        d="M40.6974 208.722C2.06224 250.238 -43.3264 322.115 83.1343 444.78C84.5784 445.508 84.7501 445.302 83.3235 441.74C78.4202 429.497 65.4019 400.203 64.3002 368.169C62.8779 326.814 81.7983 297.709 90.8898 287.547C115.504 260.033 193.067 185.392 225.752 153.003C258.437 120.615 259.464 57.8032 256.557 22.4142C254.232 -5.89712 251.142 -0.59542 247.872 2.61528C203.442 47.507 83.6775 166.246 40.6974 208.722Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Build workflows using Fastgen
  </Card>

  <Card
    title="Medusa"
    href="https://docs.medusajs.com/resources/integrations/guides/resend"
    icon={
    <svg
      className="h-6 w-6"
      width="488"
      height="488"
      viewBox="0 0 488 488"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <title>Medusa</title>
      <path
        d="M394.468 97.5239L296.258 41.013C264.125 22.4774 224.751 22.4774 192.618 41.013L93.9554 97.5239C62.2748 116.06 42.3613 150.418 42.3613 187.037V300.511C42.3613 337.582 62.2748 371.489 93.9554 390.024L192.165 446.987C224.298 465.523 263.673 465.523 295.806 446.987L394.015 390.024C426.149 371.489 445.61 337.582 445.61 300.511V187.037C446.515 150.418 426.601 116.06 394.468 97.5239ZM244.212 344.816C188.544 344.816 143.287 299.607 143.287 244C143.287 188.393 188.544 143.185 244.212 143.185C299.879 143.185 345.589 188.393 345.589 244C345.589 299.607 300.332 344.816 244.212 344.816Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Send e-commerce emails using Medusa
  </Card>

  <Card
    title="OpenMeter"
    href="https://openmeter.io/docs/reporting/email"
    icon={
    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24">
      <title>OpenMeter</title>
      <path
        d="M10.238 8.44 7.28 6.519l-4.909 9.565.06.04h3.863l3.944-7.684ZM15.786 8.44 12.83 6.519l-4.91 9.565.061.04h3.863l3.943-7.684ZM21.335 8.44l-2.957-1.921-4.91 9.565.06.04h3.864l3.943-7.684Z"
        fill="currentColor"
        clipRule="evenodd"
      />
    </svg>
  }
  >
    Send usage emails using OpenMeter
  </Card>

  <Card
    title="Invopop"
    href="https://docs.invopop.com/guides/features/email"
    icon={
    <svg className="h-6 w-6" fill="none" viewBox="0 0 40 41">
      <title>Invopop</title>
      <path
        d="M38.7166 38.5342L37.8332 37.7778H10.2562C10.0628 37.7782 9.87562 37.7081 9.72878 37.5802L2.17692 31.1328H1.82092C1.65297 31.1324 1.48897 31.1845 1.35122 31.2821C1.21347 31.3797 1.10866 31.518 1.05103 31.6782C0.993406 31.8384 0.985766 32.0127 1.02915 32.1775C1.07253 32.3422 1.16484 32.4895 1.29351 32.5991L9.72878 39.8231C9.87668 39.9487 10.0634 40.0175 10.2562 40.0172H38.1859C38.3582 40.0228 38.5277 39.9731 38.6703 39.875C38.813 39.777 38.9216 39.6355 38.9804 39.4711C39.0393 39.3067 39.0454 39.1275 38.998 38.9592C38.9507 38.7911 38.8522 38.6422 38.7166 38.5342Z"
        fill="currentColor"
      />
      <path
        d="M38.7166 34.0882L37.8332 33.3316H10.2562C10.0628 33.3321 9.87562 33.2619 9.72878 33.1341L2.17692 26.6699H1.82092C1.65297 26.6696 1.48897 26.7216 1.35122 26.8192C1.21347 26.9168 1.10866 27.0551 1.05103 27.2154C0.993406 27.3755 0.985766 27.5499 1.02915 27.7146C1.07253 27.8794 1.16484 28.0266 1.29351 28.1362L9.72878 35.3569C9.87562 35.4848 10.0628 35.5549 10.2562 35.5545H38.1859C38.3542 35.5555 38.5186 35.5039 38.6569 35.4066C38.7952 35.3094 38.9004 35.1711 38.9586 35.0106C39.0166 34.8504 39.0244 34.6756 38.9812 34.5106C38.9379 34.3455 38.8454 34.1979 38.7166 34.0882Z"
        fill="currentColor"
      />
      <path
        d="M38.7164 16.3087L37.833 15.5522H10.256C10.0629 15.5538 9.8757 15.4849 9.72854 15.3581L2.17668 8.89387H1.82068C1.64876 8.88903 1.47971 8.93936 1.33758 9.03772C1.19546 9.13609 1.0875 9.27746 1.02908 9.44175C0.970657 9.60602 0.96474 9.78482 1.01217 9.95272C1.0596 10.1206 1.15797 10.269 1.29327 10.3768L9.95598 17.7749L20.1087 26.4787C20.2574 26.6049 20.4454 26.6738 20.6394 26.6728H27.4529L28.3363 27.4294C28.4643 27.5395 28.5561 27.6869 28.5991 27.8517C28.6421 28.0164 28.6344 28.1907 28.5769 28.3508C28.5194 28.5109 28.415 28.6494 28.2777 28.7474C28.1403 28.8454 27.9767 28.8982 27.8089 28.8989H20.6394C20.4477 28.8945 20.2634 28.8222 20.1186 28.6947L12.537 22.2238H1.82068C1.65273 22.2234 1.48873 22.2755 1.35098 22.3731C1.21323 22.4707 1.10842 22.6089 1.05079 22.7692C0.993168 22.9294 0.985528 23.1038 1.02891 23.2685C1.0723 23.4332 1.1646 23.5805 1.29327 23.6901L9.72854 30.9108C9.87539 31.0387 10.0625 31.1087 10.256 31.1082H38.1857C38.3539 31.1084 38.5179 31.0559 38.6557 30.9582C38.7936 30.8604 38.8986 30.7221 38.9564 30.5618C39.0143 30.4015 39.0224 30.2269 38.9794 30.0618C38.9364 29.8968 38.8447 29.7491 38.7164 29.6387L27.4529 19.9978H20.6394C20.449 19.9949 20.2654 19.9265 20.1186 19.8035L17.7451 17.7749H38.1824C38.3509 17.7768 38.5159 17.7257 38.6546 17.6287C38.7934 17.5315 38.8993 17.3934 38.9577 17.2328C39.0163 17.0722 39.0244 16.8974 38.9811 16.7319C38.938 16.5665 38.8454 16.4187 38.7164 16.3087ZM20.1186 22.0264C20.2673 22.1527 20.4553 22.2215 20.6493 22.2205H27.4561L28.3363 22.9737C28.4637 23.0837 28.5549 23.2307 28.5974 23.3948C28.64 23.5589 28.6321 23.7324 28.5746 23.8918C28.5171 24.0512 28.4129 24.1889 28.276 24.2864C28.139 24.3838 27.976 24.4362 27.8089 24.4367H20.6394C20.4496 24.4371 20.2656 24.3709 20.1186 24.2491L12.537 17.7749H15.1345L20.1186 22.0264Z"
        fill="currentColor"
      />
      <path
        d="M38.7165 11.8635L37.8331 11.107H10.2561C10.0633 11.1072 9.87657 11.0384 9.72869 10.9128L2.17681 4.44531H1.82081C1.65296 4.44594 1.48934 4.49884 1.352 4.59684C1.21466 4.69484 1.11021 4.83326 1.05273 4.99341C0.995257 5.15357 0.987512 5.32777 1.03054 5.49254C1.07358 5.65731 1.16532 5.80471 1.2934 5.91488L9.72869 13.1356C9.87585 13.2625 10.063 13.3314 10.2561 13.3297H38.1858C38.354 13.3308 38.5185 13.2792 38.6568 13.1819C38.7951 13.0846 38.9004 12.9463 38.9584 12.786C39.0165 12.6256 39.0244 12.451 38.9811 12.2859C38.9378 12.1208 38.8454 11.9733 38.7165 11.8635Z"
        fill="currentColor"
      />
      <path
        d="M1.29387 1.46623L9.72916 8.70366C9.87704 8.82927 10.0638 8.89801 10.2566 8.89781H38.1863C38.3545 8.89893 38.519 8.84731 38.6573 8.75C38.7955 8.65269 38.9009 8.51443 38.9589 8.35407C39.0169 8.19371 39.0249 8.01907 38.9816 7.85399C38.9383 7.68889 38.8459 7.54139 38.717 7.43159L30.2817 0.194161C30.1332 0.069775 29.9469 0.00120419 29.7543 2.55058e-06H1.82128C1.65334 -0.000420119 1.48934 0.0516987 1.35159 0.149271C1.21384 0.246844 1.10902 0.385136 1.0514 0.545339C0.993773 0.705541 0.986132 0.879881 1.02952 1.04465C1.0729 1.20942 1.1652 1.35662 1.29387 1.46623Z"
        fill="currentColor"
      />
      <path
        d="M38.7166 38.5342L37.8332 37.7778H10.2562C10.0628 37.7782 9.87562 37.7081 9.72878 37.5802L2.17692 31.1328H1.82092C1.65297 31.1324 1.48897 31.1845 1.35122 31.2821C1.21347 31.3797 1.10866 31.518 1.05103 31.6782C0.993406 31.8384 0.985766 32.0127 1.02915 32.1775C1.07253 32.3422 1.16484 32.4895 1.29351 32.5991L9.72878 39.8231C9.87668 39.9487 10.0634 40.0175 10.2562 40.0172H38.1859C38.3582 40.0228 38.5277 39.9731 38.6703 39.875C38.813 39.777 38.9216 39.6355 38.9804 39.4711C39.0393 39.3067 39.0454 39.1275 38.998 38.9592C38.9507 38.7911 38.8522 38.6422 38.7166 38.5342Z"
        fill="currentColor"
      />
      <path
        d="M38.7166 34.0882L37.8332 33.3316H10.2562C10.0628 33.3321 9.87562 33.2619 9.72878 33.1341L2.17692 26.6699H1.82092C1.65297 26.6696 1.48897 26.7216 1.35122 26.8192C1.21347 26.9168 1.10866 27.0551 1.05103 27.2154C0.993406 27.3755 0.985766 27.5499 1.02915 27.7146C1.07253 27.8794 1.16484 28.0266 1.29351 28.1362L9.72878 35.3569C9.87562 35.4848 10.0628 35.5549 10.2562 35.5545H38.1859C38.3542 35.5555 38.5186 35.5039 38.6569 35.4066C38.7952 35.3094 38.9004 35.1711 38.9586 35.0106C39.0166 34.8504 39.0244 34.6756 38.9812 34.5106C38.9379 34.3455 38.8454 34.1979 38.7166 34.0882Z"
        fill="currentColor"
      />
      <path
        d="M38.7164 16.3087L37.833 15.5522H10.256C10.0629 15.5538 9.8757 15.4849 9.72854 15.3581L2.17668 8.89387H1.82068C1.64876 8.88903 1.47971 8.93936 1.33758 9.03772C1.19546 9.13609 1.0875 9.27746 1.02908 9.44175C0.970657 9.60602 0.96474 9.78482 1.01217 9.95272C1.0596 10.1206 1.15797 10.269 1.29327 10.3768L9.95598 17.7749L20.1087 26.4787C20.2574 26.6049 20.4454 26.6738 20.6394 26.6728H27.4529L28.3363 27.4294C28.4643 27.5395 28.5561 27.6869 28.5991 27.8517C28.6421 28.0164 28.6344 28.1907 28.5769 28.3508C28.5194 28.5109 28.415 28.6494 28.2777 28.7474C28.1403 28.8454 27.9767 28.8982 27.8089 28.8989H20.6394C20.4477 28.8945 20.2634 28.8222 20.1186 28.6947L12.537 22.2238H1.82068C1.65273 22.2234 1.48873 22.2755 1.35098 22.3731C1.21323 22.4707 1.10842 22.6089 1.05079 22.7692C0.993168 22.9294 0.985528 23.1038 1.02891 23.2685C1.0723 23.4332 1.1646 23.5805 1.29327 23.6901L9.72854 30.9108C9.87539 31.0387 10.0625 31.1087 10.256 31.1082H38.1857C38.3539 31.1084 38.5179 31.0559 38.6557 30.9582C38.7936 30.8604 38.8986 30.7221 38.9564 30.5618C39.0143 30.4015 39.0224 30.2269 38.9794 30.0618C38.9364 29.8968 38.8447 29.7491 38.7164 29.6387L27.4529 19.9978H20.6394C20.449 19.9949 20.2654 19.9265 20.1186 19.8035L17.7451 17.7749H38.1824C38.3509 17.7768 38.5159 17.7257 38.6546 17.6287C38.7934 17.5315 38.8993 17.3934 38.9577 17.2328C39.0163 17.0722 39.0244 16.8974 38.9811 16.7319C38.938 16.5665 38.8454 16.4187 38.7164 16.3087ZM20.1186 22.0264C20.2673 22.1527 20.4553 22.2215 20.6493 22.2205H27.4561L28.3363 22.9737C28.4637 23.0837 28.5549 23.2307 28.5974 23.3948C28.64 23.5589 28.6321 23.7324 28.5746 23.8918C28.5171 24.0512 28.4129 24.1889 28.276 24.2864C28.139 24.3838 27.976 24.4362 27.8089 24.4367H20.6394C20.4496 24.4371 20.2656 24.3709 20.1186 24.2491L12.537 17.7749H15.1345L20.1186 22.0264Z"
        fill="currentColor"
      />
      <path
        d="M38.7165 11.8635L37.8331 11.107H10.2561C10.0633 11.1072 9.87657 11.0384 9.72869 10.9128L2.17681 4.44531H1.82081C1.65296 4.44594 1.48934 4.49884 1.352 4.59684C1.21466 4.69484 1.11021 4.83326 1.05273 4.99341C0.995257 5.15357 0.987512 5.32777 1.03054 5.49254C1.07358 5.65731 1.16532 5.80471 1.2934 5.91488L9.72869 13.1356C9.87585 13.2625 10.063 13.3314 10.2561 13.3297H38.1858C38.354 13.3308 38.5185 13.2792 38.6568 13.1819C38.7951 13.0846 38.9004 12.9463 38.9584 12.786C39.0165 12.6256 39.0244 12.451 38.9811 12.2859C38.9378 12.1208 38.8454 11.9733 38.7165 11.8635Z"
        fill="currentColor"
      />
      <path
        d="M1.29387 1.46623L9.72916 8.70366C9.87704 8.82927 10.0638 8.89801 10.2566 8.89781H38.1863C38.3545 8.89893 38.519 8.84731 38.6573 8.75C38.7955 8.65269 38.9009 8.51443 38.9589 8.35407C39.0169 8.19371 39.0249 8.01907 38.9816 7.85399C38.9383 7.68889 38.8459 7.54139 38.717 7.43159L30.2817 0.194161C30.1332 0.069775 29.9469 0.00120419 29.7543 2.55058e-06H1.82128C1.65334 -0.000420119 1.48934 0.0516987 1.35159 0.149271C1.21384 0.246844 1.10902 0.385136 1.0514 0.545339C0.993773 0.705541 0.986132 0.879881 1.02952 1.04465C1.0729 1.20942 1.1652 1.35662 1.29387 1.46623Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Send invoice emails using Invopop
  </Card>

  <Card
    title="Payload CMS"
    href="https://payloadcms.com/docs/email/overview#resend-configuration"
    icon={
    <svg className="h-6 w-6" viewBox="0 0 40 40" fill="none">
      <title>Payload CMS</title>
      <path
        d="M18.4469 0L36.8 11.0415V31.9965L22.9773 40V19.0451L4.61523 8.01243L18.4469 0Z"
        fill="currentColor"
      />
      <path
        d="M17.0495 38.8363V22.4829L3.20001 30.5042L17.0495 38.8363Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Send emails using Payload CMS
  </Card>

  <Card
    title="Tinybird"
    href="https://www.tinybird.co/docs/get-data-in/guides/ingest-from-resend"
    icon={
    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24">
      <path
        d="M9.971 18.125 0 14.556l13.967-4.88L16.507 4 24 6.055l-4.407 1.669-2.735 12.754.097.039L5.946 28l4.025-9.875Z"
        fill="currentColor"
        transform="translate(0 -4)"
      />
    </svg>
  }
  >
    Analyze your email data in real time
  </Card>

  <Card
    title="Coolify"
    href="https://coolify.io/docs/knowledge-base/notifications#resend-configuration"
    icon={
    <svg
      className="h-6 w-6"
      width="66"
      height="66"
      viewBox="0 0 66 66"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <title>Coolify</title>
      <path
        d="M18.8298 18.8316H7.28729V53.4593H18.8298V18.8316ZM18.8298 65.0018H65V53.4593H18.8298V65.0018ZM18.8298 18.8316H65V7.28906H18.8298V18.8316Z"
        fill="currentColor"
        fill-opacity="0.51"
      />
      <path
        d="M15.1862 15.1871H3.64368V49.8147H15.1862V15.1871ZM15.1862 61.3573H61.3564V49.8147H15.1862V61.3573ZM15.1862 15.1871H61.3564V3.64453H15.1862V15.1871Z"
        fill="#CCCCCC"
      />
      <path
        d="M11.5426 11.5426H0V46.1702H11.5426V11.5426ZM11.5426 57.7128H57.7128V46.1702H11.5426V57.7128ZM11.5426 11.5426H57.7128V0H11.5426V11.5426Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Send email notifications using Coolify
  </Card>

  <Card
    title="Courrier"
    href="https://railsdesigner.com/courrier/"
    icon={
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="256"
      height="256"
      viewBox="0 0 256 256"
      className="h-6 w-6"
      fill="none"
    >
      <path
        fill="currentColor"
        d="M128 3c69.036 0 125 55.964 125 125s-55.964 125-125 125S3 197.036 3 128 58.964 3 128 3m.49 51q-16.204 0-29.679 5.485-13.379 5.485-23.271 15.51-9.799 10.024-15.17 23.736Q55 112.444 55 128.898q0 21.752 9.233 38.206t25.627 25.723Q106.255 202 127.831 202q12.343 0 22.989-3.404 10.741-3.406 21.67-10.876l7.537 12.294H187v-51.918h-8.386q-1.224 6.903-3.674 12.861-2.356 5.863-5.653 10.497-6.218 9.173-15.546 14.186-9.233 5.011-20.728 5.011-20.823 0-31.846-16.265-10.93-16.36-10.93-47.379 0-30.83 10.93-46.339 11.024-15.604 32.6-15.604 11.682 0 20.633 4.824 8.951 4.727 15.453 14.846 2.355 3.5 4.334 7.755 2.072 4.255 3.957 9.268H187v-45.77h-5.653l-8.103 9.55h-.754q-9.139-5.58-20.727-8.51Q140.173 54 128.49 54"
      ></path>
    </svg>
  }
  >
    API-powered email delivery for Ruby apps
  </Card>

  <Card
    title="Kinde"
    href="https://docs.kinde.com/integrate/third-party-tools/kinde-resend-custom-smtp/"
    icon={
    <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24">
      <path
        d="M 12.93 24 L 3.77 12.29 L 3.77 24 L 0 24 L 0 0 L 3.77 0 L 3.77 11.37 L 12.58 0 L 17.01 0 L 7.82 11.66 L 17.66 24 L 12.93 24 Z"
        fill="currentColor"
      />
    </svg>
  }
  >
    Send auth and billing emails using Kinde
  </Card>
</CardGroup>

## Build your own integration

Here's how to build your own integration with Resend:

1. Read the documentation on [how to send emails](/api-reference/emails/send-email).
2. Integrate with your product offering.
3. [Reach out to us](https://resend.com/contact) to feature your product on this page.


# Introduction
Source: https://resend.com/docs/introduction

Resend is the email API for developers.

## Quickstart

Learn how to get Resend set up in your project.

<CardGroup cols={2}>
  <Card
    title="Node.js Quickstart"
    icon={
  <svg
    className="h-6 w-6"
    fill="currentcolor"
    height="40"
    viewBox="0 0 16 16"
    width="40"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path d="M 8 1.0234375 C 7.736875 1.0234375 7.4742344 1.0924687 7.2402344 1.2304688 L 2.7402344 3.8789062 C 2.2832344 4.1469063 2 4.642875 2 5.171875 L 2 11.005859 C 2 11.554859 2.29925 12.059266 2.78125 12.322266 L 4.2558594 13.126953 C 4.4828594 13.250953 4.7286094 13.310547 4.9746094 13.310547 C 5.2386094 13.310547 5.4992812 13.239609 5.7382812 13.099609 C 6.1982812 12.826609 6.4726562 12.344594 6.4726562 11.808594 L 6.4726562 5.4648438 L 5.4726562 5.4648438 L 5.4726562 11.808594 C 5.4726562 12.065594 5.3025156 12.195281 5.2285156 12.238281 C 5.1555156 12.281281 4.959375 12.371047 4.734375 12.248047 L 3.2617188 11.445312 C 3.1007187 11.357312 3 11.188859 3 11.005859 L 3 5.171875 C 3 4.995875 3.0940938 4.8302344 3.2460938 4.7402344 L 7.7460938 2.0917969 C 7.9020937 1.9997969 8.0979062 2.0007969 8.2539062 2.0917969 L 12.753906 4.7402344 C 12.904906 4.8302344 13 4.995875 13 5.171875 L 13 11.009766 C 13 11.189766 12.900234 11.359219 12.740234 11.449219 L 8.2402344 13.900391 C 8.0902344 13.980391 7.9097656 13.980391 7.7597656 13.900391 L 6.8808594 13.419922 C 6.7108594 13.629922 6.5 13.810937 6.25 13.960938 C 6.17 14.010938 6.0897656 14.050078 6.0097656 14.080078 L 7.2792969 14.779297 C 7.5092969 14.899297 7.75 14.960938 8 14.960938 C 8.25 14.960938 8.4907031 14.899297 8.7207031 14.779297 L 13.220703 12.320312 C 13.700703 12.060313 14 11.559766 14 11.009766 L 14 5.171875 C 14 4.642875 13.717719 4.1469062 13.261719 3.8789062 L 8.7617188 1.2304688 C 8.5272187 1.0924688 8.263125 1.0234375 8 1.0234375 z M 9.4511719 5.3183594 C 7.8711719 5.3183594 7.0703125 5.8690781 7.0703125 6.9550781 C 7.0703125 8.1850781 8.4869687 8.3680781 9.1679688 8.4550781 C 9.2659688 8.4680781 9.352875 8.4791875 9.421875 8.4921875 L 9.7207031 8.5449219 C 10.760703 8.7189219 11 8.836875 11 9.171875 C 11 9.333875 10.999172 9.8242188 9.4511719 9.8242188 C 8.1381719 9.8242188 7.8691406 9.4346094 7.8691406 8.8496094 L 6.8691406 8.8496094 C 6.8691406 9.7516094 7.3171719 10.824219 9.4511719 10.824219 C 11.557172 10.824219 12 9.925875 12 9.171875 C 12 7.913875 10.777719 7.7076406 9.8867188 7.5566406 L 9.5996094 7.5078125 C 9.5166094 7.4928125 9.4119219 7.4788438 9.2949219 7.4648438 C 8.6589219 7.3828438 8.0703125 7.2650312 8.0703125 6.9570312 C 8.0703125 6.7340313 8.0691719 6.3193594 9.4511719 6.3183594 C 10.370172 6.3183594 10.837891 6.6207969 10.837891 7.2167969 L 11.837891 7.2167969 C 11.837891 6.2997969 11.209172 5.3183594 9.4511719 5.3183594 z" />
  </svg>
}
    href="/send-with-nodejs"
  />

  <Card
    title="Next.js Quickstart"
    icon={
  <svg
    className="h-6 w-6"
    height="1024pt"
    viewBox=".5 -.2 1023 1024.1"
    width="1024pt"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path d="m478.5.6c-2.2.2-9.2.9-15.5 1.4-145.3 13.1-281.4 91.5-367.6 212-48 67-78.7 143-90.3 223.5-4.1 28.1-4.6 36.4-4.6 74.5s.5 46.4 4.6 74.5c27.8 192.1 164.5 353.5 349.9 413.3 33.2 10.7 68.2 18 108 22.4 15.5 1.7 82.5 1.7 98 0 68.7-7.6 126.9-24.6 184.3-53.9 8.8-4.5 10.5-5.7 9.3-6.7-.8-.6-38.3-50.9-83.3-111.7l-81.8-110.5-102.5-151.7c-56.4-83.4-102.8-151.6-103.2-151.6-.4-.1-.8 67.3-1 149.6-.3 144.1-.4 149.9-2.2 153.3-2.6 4.9-4.6 6.9-8.8 9.1-3.2 1.6-6 1.9-21.1 1.9h-17.3l-4.6-2.9c-3-1.9-5.2-4.4-6.7-7.3l-2.1-4.5.2-200.5.3-200.6 3.1-3.9c1.6-2.1 5-4.8 7.4-6.1 4.1-2 5.7-2.2 23-2.2 20.4 0 23.8.8 29.1 6.6 1.5 1.6 57 85.2 123.4 185.9s157.2 238.2 201.8 305.7l81 122.7 4.1-2.7c36.3-23.6 74.7-57.2 105.1-92.2 64.7-74.3 106.4-164.9 120.4-261.5 4.1-28.1 4.6-36.4 4.6-74.5s-.5-46.4-4.6-74.5c-27.8-192.1-164.5-353.5-349.9-413.3-32.7-10.6-67.5-17.9-106.5-22.3-9.6-1-75.7-2.1-84-1.3zm209.4 309.4c4.8 2.4 8.7 7 10.1 11.8.8 2.6 1 58.2.8 183.5l-.3 179.8-31.7-48.6-31.8-48.6v-130.7c0-84.5.4-132 1-134.3 1.6-5.6 5.1-10 9.9-12.6 4.1-2.1 5.6-2.3 21.3-2.3 14.8 0 17.4.2 20.7 2z" />
    <path d="m784.3 945.1c-3.5 2.2-4.6 3.7-1.5 2 2.2-1.3 5.8-4 5.2-4.1-.3 0-2 1-3.7 2.1zm-6.9 4.5c-1.8 1.4-1.8 1.5.4.4 1.2-.6 2.2-1.3 2.2-1.5 0-.8-.5-.6-2.6 1.1zm-5 3c-1.8 1.4-1.8 1.5.4.4 1.2-.6 2.2-1.3 2.2-1.5 0-.8-.5-.6-2.6 1.1zm-5 3c-1.8 1.4-1.8 1.5.4.4 1.2-.6 2.2-1.3 2.2-1.5 0-.8-.5-.6-2.6 1.1zm-7.6 4c-3.8 2-3.6 2.8.2.9 1.7-.9 3-1.8 3-2 0-.7-.1-.6-3.2 1.1z" />
  </svg>
}
    href="/send-with-nextjs"
  />

  <Card
    title="Express Quickstart"
    icon={
  <svg
    className="h-6 w-6"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 32 32"
    width="64"
    height="64"
  >
    <path d="M32 24.795c-1.164.296-1.884.013-2.53-.957l-4.594-6.356-.664-.88-5.365 7.257c-.613.873-1.256 1.253-2.4.944l6.87-9.222-6.396-8.33c1.1-.214 1.86-.105 2.535.88l4.765 6.435 4.8-6.4c.615-.873 1.276-1.205 2.38-.883l-2.48 3.288-3.36 4.375c-.4.5-.345.842.023 1.325L32 24.795zM.008 15.427l.562-2.764C2.1 7.193 8.37 4.92 12.694 8.3c2.527 1.988 3.155 4.8 3.03 7.95H1.48c-.214 5.67 3.867 9.092 9.07 7.346 1.825-.613 2.9-2.042 3.438-3.83.273-.896.725-1.036 1.567-.78-.43 2.236-1.4 4.104-3.45 5.273-3.063 1.75-7.435 1.184-9.735-1.248C1 21.6.434 19.812.18 17.9c-.04-.316-.12-.617-.18-.92q.008-.776.008-1.552zm1.498-.38h12.872c-.084-4.1-2.637-7.012-6.126-7.037-3.83-.03-6.58 2.813-6.746 7.037z" />
  </svg>
}
    href="send-with-express/"
  />

  <Card
    title="PHP Quickstart"
    icon={
  <svg
    className="h-6 w-6 overflow-visible ml-1"
    fill="currentcolor"
    viewBox="0 0 16 16"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      clipRule="evenodd"
      d="M7.9999 13.6496C10.5698 13.6496 12.9461 13.1038 14.7162 12.1728C16.44 11.2661 17.8399 9.84028 17.8399 8.00001C17.8399 6.15974 16.44 4.73389 14.7162 3.82722C12.9461 2.89617 10.5698 2.35043 7.9999 2.35043C5.42997 2.35043 3.05373 2.89617 1.28358 3.82722C-0.440229 4.73389 -1.84009 6.15974 -1.84009 8.00001C-1.84009 9.84028 -0.440229 11.2661 1.28358 12.1728C3.05373 13.1038 5.42997 13.6496 7.9999 13.6496ZM16.8399 8.00001C16.8399 10.5679 12.8821 12.6496 7.9999 12.6496C3.11771 12.6496 -0.840088 10.5679 -0.840088 8.00001C-0.840088 5.43212 3.11771 3.35043 7.9999 3.35043C12.8821 3.35043 16.8399 5.43212 16.8399 8.00001ZM6.87738 4.72751C6.88194 4.70401 6.90252 4.68703 6.92646 4.68703H7.9244C7.93933 4.68703 7.95347 4.6937 7.96297 4.70522C7.97247 4.71674 7.97633 4.7319 7.97348 4.74655L7.7477 5.91034C7.84026 5.91005 7.9323 5.90915 8.02328 5.90826C8.33164 5.90523 8.62788 5.90233 8.89109 5.9236C9.24813 5.95245 9.55863 6.02638 9.76423 6.216C9.87161 6.31473 9.94117 6.42259 9.97569 6.5654C10.0097 6.70601 10.0089 6.87748 9.98244 7.10232C9.94727 7.40106 9.8651 7.80454 9.74965 8.37142L9.74964 8.37145L9.74963 8.3715C9.69183 8.65534 9.62568 8.98014 9.55291 9.35328C9.54833 9.37676 9.52775 9.39371 9.50383 9.39371H8.49295C8.47802 9.39371 8.46387 9.38704 8.45437 9.37552C8.44488 9.364 8.44102 9.34884 8.44386 9.33419C8.52282 8.92716 8.58966 8.5905 8.64516 8.31095L8.6452 8.31076C8.73782 7.8442 8.79885 7.53677 8.83193 7.32694C8.85847 7.15866 8.86601 7.05871 8.85915 6.99197C8.85276 6.92984 8.83413 6.8978 8.80269 6.8641L8.80265 6.86405C8.74366 6.80064 8.64179 6.76909 8.43806 6.75735C8.30039 6.74942 8.12483 6.75064 7.89766 6.75222H7.89756C7.80294 6.75288 7.69936 6.7536 7.58584 6.75374L7.07911 9.35328C7.07453 9.37676 7.05396 9.39371 7.03003 9.39371H6.03318C6.01825 9.39371 6.0041 9.38704 5.9946 9.37552C5.9851 9.36401 5.98125 9.34885 5.98409 9.33419L6.87738 4.72751ZM2.69684 5.95416C2.7014 5.93065 2.72198 5.91368 2.74593 5.91368H4.67706C5.26358 5.91368 5.70732 6.06602 5.98566 6.3872L5.94796 6.42002L5.98574 6.38729L5.98566 6.3872C6.25284 6.69412 6.33382 7.1487 6.26023 7.60473C6.18652 8.06151 5.95682 8.52755 5.59142 8.86359C5.00271 9.41486 4.36602 9.40924 3.44999 9.40117C3.34805 9.40027 3.24265 9.39934 3.13347 9.39914L2.90398 10.5831C2.89942 10.6066 2.87884 10.6236 2.85489 10.6236H1.85156C1.83663 10.6236 1.82249 10.6169 1.81299 10.6054C1.80349 10.5939 1.79963 10.5787 1.80248 10.5641L2.69684 5.95416ZM10.5358 5.95415C10.5403 5.93065 10.5609 5.91368 10.5848 5.91368H12.5171C13.1036 5.91368 13.5473 6.06602 13.8256 6.3872L13.788 6.42003L13.8257 6.38729L13.8256 6.3872C14.0928 6.69412 14.1738 7.1487 14.1002 7.60473C14.0265 8.06152 13.7968 8.52756 13.4314 8.86361C12.8466 9.41043 12.238 9.4066 11.2662 9.40048H11.2662H11.2662H11.2662H11.2661C11.1721 9.39988 11.0746 9.39927 10.9735 9.39913L10.744 10.5831C10.7394 10.6066 10.7188 10.6236 10.6949 10.6236H9.68939C9.67446 10.6236 9.66031 10.6169 9.65081 10.6054C9.64131 10.5939 9.63746 10.5787 9.64031 10.5641L10.5358 5.95415ZM3.65348 6.74077L3.29849 8.56995C3.36057 8.57023 3.42151 8.5709 3.48133 8.57155H3.48135H3.48137H3.48138H3.4814C3.6276 8.57314 3.76717 8.57465 3.90059 8.57041C4.10547 8.56389 4.28973 8.54381 4.4503 8.49113C4.60986 8.43878 4.7459 8.35429 4.85535 8.21803C4.96524 8.08121 5.05079 7.88912 5.10374 7.61781C5.17864 7.22899 5.12314 7.02269 4.9944 6.90717C4.92839 6.84793 4.83845 6.80787 4.72385 6.78174C4.60919 6.7556 4.47305 6.74411 4.31748 6.73973C4.1854 6.736 4.04245 6.73745 3.88872 6.739H3.88871H3.88869H3.88868H3.88866L3.88856 6.739C3.81282 6.73977 3.73445 6.74056 3.65348 6.74077ZM11.4902 6.74077L11.1352 8.56998C11.2034 8.57036 11.2702 8.57129 11.3358 8.57221C11.471 8.57409 11.601 8.57591 11.7268 8.57265C11.9303 8.56738 12.1151 8.54876 12.2771 8.49702C12.438 8.4456 12.5762 8.36154 12.6876 8.22455C12.7995 8.08703 12.8869 7.89302 12.9405 7.61781C13.0154 7.22882 12.9608 7.02253 12.8329 6.90707C12.7674 6.8479 12.6779 6.80786 12.5636 6.78174C12.4493 6.7556 12.3132 6.74411 12.1575 6.73973C12.0252 6.736 11.8816 6.73745 11.727 6.739L11.7268 6.739H11.7268H11.7268H11.7268C11.6506 6.73977 11.5717 6.74056 11.4902 6.74077Z"
      fillRule="evenodd"
    ></path>
  </svg>
}
    href="send-with-php/"
  />

  <Card
    title="Laravel Quickstart"
    icon={
  <svg
    className="h-6 w-6"
    fill="none"
    height="40"
    viewBox="0 0 16 16"
    width="40"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M6.69141 2.76562L4.07422 4.27344M6.69141 2.76562L4.07422 1.25781L1.46094 2.76562M6.69141 2.76562V8.74242M4.07422 4.27344L1.46094 2.76562M4.07422 4.27344V10.2397M1.46094 2.76562V11.7266L6.69141 14.7422M6.69141 14.7422V11.7266M6.69141 14.7422L11.9201 11.7266V8.74242M6.69141 11.7266L4.07422 10.2397M6.69141 11.7266L11.9201 8.74242M4.07422 10.2397L6.69141 8.74242M9.31189 4.27344L11.9201 2.76562L14.5365 4.27344M9.31189 4.27344L11.9201 5.77934M9.31189 4.27344V7.24025M11.9201 5.77934L14.5365 4.27344M11.9201 5.77934V8.74242M14.5365 4.27344V7.24025L11.9201 8.74242M11.9201 8.74242L9.31189 7.24025M9.31189 7.24025L6.69141 8.74242"
      stroke="currentcolor"
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth="0.9"
    ></path>
  </svg>
}
    href="send-with-laravel/"
  />

  <Card
    title="Python Quickstart"
    icon={
  <svg
    className="h-6 w-6"
    fill="currentcolor"
    height="40"
    viewBox="0 0 16 16"
    width="40"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      clipRule="evenodd"
      d="M5.00008 2.48333C5.00008 2.28791 5.17329 1.97181 5.75348 1.67407C6.30368 1.39174 7.09756 1.2 8.00008 1.2C8.9026 1.2 9.69648 1.39174 10.2467 1.67407C10.8269 1.97181 11.0001 2.28791 11.0001 2.48333L11 4.49999V4.66666C11 5.4877 10.9478 6.0615 10.8418 6.46743C10.7387 6.86203 10.595 7.06047 10.4316 7.18155C10.2553 7.31215 9.98982 7.40251 9.54728 7.45087C9.10384 7.49934 8.5515 7.5 7.83337 7.5H7.80801C7.20363 7.49999 6.65752 7.49998 6.19769 7.55571C5.72755 7.6127 5.28198 7.73413 4.91686 8.02623C4.54439 8.32421 4.31834 8.74858 4.18424 9.28498C4.06996 9.74209 4.01556 10.3077 4.00296 11H2.48341C2.28799 11 1.97188 10.8268 1.67415 10.2466C1.39181 9.6964 1.20007 8.90252 1.20007 8C1.20007 7.09748 1.39181 6.3036 1.67415 5.7534C1.97188 5.17321 2.28799 5 2.48341 5H4.50008H8.00007V4H5.00008V2.48333ZM2.48341 12H4.00005L4.00008 13.5167C4.00008 14.2877 4.61037 14.8633 5.29693 15.2156C6.01348 15.5833 6.9696 15.8 8.00008 15.8C9.03056 15.8 9.98668 15.5833 10.7032 15.2156C11.3898 14.8633 12.0001 14.2877 12.0001 13.5167V12H13.5167C14.2878 12 14.8634 11.3897 15.2157 10.7031C15.5834 9.9866 15.8001 9.03048 15.8001 8C15.8001 6.96952 15.5834 6.0134 15.2157 5.29685C14.8634 4.61029 14.2878 4 13.5167 4H12.0001L12.0001 2.48334C12.0001 1.71225 11.3898 1.13669 10.7032 0.784379C9.98668 0.416675 9.03056 0.199997 8.00008 0.199997C6.9696 0.199997 6.01348 0.416675 5.29693 0.784379C4.61037 1.13669 4.00008 1.71225 4.00008 2.48333V4H2.48341C1.71232 4 1.13677 4.61029 0.784455 5.29685C0.416751 6.0134 0.200073 6.96952 0.200073 8C0.200073 9.03048 0.416751 9.9866 0.784455 10.7031C1.13677 11.3897 1.71232 12 2.48341 12ZM8.00007 12H11.0001V13.5167C11.0001 13.7121 10.8269 14.0282 10.2467 14.3259C9.69648 14.6083 8.9026 14.8 8.00008 14.8C7.09756 14.8 6.30368 14.6083 5.75348 14.3259C5.17329 14.0282 5.00008 13.7121 5.00008 13.5167L5.00004 11.5L5.00004 11.5L5.00004 11.3333C5.00004 10.5132 5.05211 9.93659 5.15438 9.52752C5.25466 9.12641 5.39319 8.92579 5.54155 8.8071C5.69727 8.68253 5.92878 8.59563 6.31802 8.54845C6.71114 8.5008 7.19784 8.5 7.83337 8.5H7.85761C8.54613 8.50001 9.15215 8.50001 9.65592 8.44495C10.1665 8.38915 10.6406 8.27118 11.0268 7.98511C11.4259 7.68952 11.6676 7.26296 11.8093 6.72007C11.9294 6.26027 11.9844 5.69226 11.9971 5H13.5167C13.7122 5 14.0283 5.17321 14.326 5.7534C14.6083 6.3036 14.8001 7.09748 14.8001 8C14.8001 8.90252 14.6083 9.6964 14.326 10.2466C14.0283 10.8268 13.7122 11 13.5167 11H11.5001H8.00007V12ZM6.2262 3.45245C6.57205 3.45245 6.85242 3.17208 6.85242 2.82622C6.85242 2.48037 6.57205 2.2 6.2262 2.2C5.88035 2.2 5.59998 2.48037 5.59998 2.82622C5.59998 3.17208 5.88035 3.45245 6.2262 3.45245ZM9.77725 13.8045C10.1237 13.8045 10.4045 13.5237 10.4045 13.1773C10.4045 12.8308 10.1237 12.55 9.77725 12.55C9.43083 12.55 9.15 12.8308 9.15 13.1773C9.15 13.5237 9.43083 13.8045 9.77725 13.8045Z"
      fillRule="evenodd"
    ></path>
  </svg>
}
    href="/send-with-python"
  />

  <Card
    title="Ruby Quickstart"
    icon={
  <svg
    className="h-6 w-6"
    fill="currentcolor"
    height="40"
    viewBox="0 0 16 16"
    width="40"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path d="M 7.992188 1 C 7.917969 1 7.84375 1.019531 7.777344 1.054688 L 4.777344 2.554688 C 4.730469 2.578125 4.683594 2.609375 4.648438 2.648438 L 2.648438 4.648438 C 2.617188 4.675781 2.589844 4.707031 2.570313 4.742188 L 1.070313 7.242188 C 1.023438 7.320313 1 7.410156 1 7.5 C 1 7.507813 1 7.519531 1 7.53125 L 1 11.5 C 1 11.628906 1.050781 11.757813 1.140625 11.847656 C 1.238281 12.371094 1.375 12.890625 1.742188 13.257813 C 2.3125 13.828125 3.109375 14.027344 4 13.976563 L 4 14 L 14 14 L 14 5.539063 C 14 5.511719 14 5.484375 14 5.460938 L 14 3.5 L 13.992188 3.5 C 13.949219 2.8125 13.722656 2.207031 13.257813 1.742188 C 12.890625 1.375 12.371094 1.238281 11.847656 1.140625 C 11.753906 1.050781 11.628906 1 11.5 1 L 8 1 C 8 1 7.996094 1 7.992188 1 Z M 9.652344 2 L 11.40625 2 C 11.425781 2.003906 11.445313 2.007813 11.464844 2.007813 C 11.941406 2.042969 12.296875 2.195313 12.550781 2.449219 C 12.949219 2.84375 13.089844 3.539063 12.929688 4.445313 L 9.820313 2.117188 L 9.800781 2.101563 C 9.792969 2.09375 9.785156 2.089844 9.777344 2.085938 Z M 7.964844 2.078125 L 8.90625 2.703125 L 8.0625 5.230469 L 5.257813 8.03125 L 2.734375 8.453125 L 2.09375 7.484375 L 3.398438 5.3125 L 5.296875 3.410156 Z M 9.757813 3.316406 L 12 5 L 9.195313 5 Z M 9.238281 6 L 12.410156 6 C 11.980469 6.960938 11.3125 7.988281 10.4375 8.992188 Z M 8.316406 6.390625 L 9.601563 9.601563 L 6.390625 8.316406 Z M 13 7.078125 L 13 12.292969 L 10.925781 10.21875 L 10.847656 10.023438 C 11.742188 9.0625 12.472656 8.0625 13 7.078125 Z M 4.9375 9.101563 L 4.660156 11.859375 L 3.28125 9.375 Z M 2 9.152344 L 2.070313 9.257813 L 4.125 12.957031 C 3.382813 13.03125 2.796875 12.898438 2.449219 12.550781 C 2.449219 12.550781 2.449219 12.550781 2.445313 12.550781 C 2.191406 12.296875 2.042969 11.945313 2.007813 11.464844 C 2.007813 11.441406 2.003906 11.421875 2 11.40625 Z M 5.929688 9.210938 L 8.992188 10.4375 C 7.847656 11.433594 6.660156 12.171875 5.59375 12.585938 Z M 10.023438 10.847656 L 10.21875 10.925781 L 12.292969 13 L 7.078125 13 C 8.0625 12.472656 9.0625 11.742188 10.023438 10.847656 Z" />
  </svg>
}
    href="/send-with-ruby"
  />

  <Card
    title="Rails Quickstart"
    icon={
  <svg
    className="h-6 w-6"
    fill="currentcolor"
    width="14"
    height="10"
    viewBox="0 0 14 10"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M9.26954 1.31918C8.74765 1.18951 8.22291 1.12537 7.70403 1.12123L7.70802 0.621251C8.26552 0.625698 8.8294 0.694622 9.3901 0.833934L9.26954 1.31918ZM6.1341 1.29217C5.61738 1.40973 5.1165 1.5859 4.64137 1.81461L4.42451 1.36409C4.9329 1.11936 5.46929 0.930647 6.02318 0.804633L6.1341 1.29217ZM11.4358 2.2739C11.2094 2.12558 10.98 1.99259 10.7486 1.87436L10.976 1.42909C11.2236 1.55556 11.4685 1.69759 11.7098 1.85567L12.0666 2.08946L11.7926 2.50769L11.4358 2.2739ZM3.30044 2.65449C2.88728 2.98213 2.51016 3.35589 2.17885 3.76948L1.78862 3.45688C2.14375 3.01354 2.54767 2.61332 2.98975 2.26273L3.30044 2.65449ZM12.8631 3.20907L12.5063 2.97527L12.7803 2.55704L13.1371 2.79084L12.8631 3.20907ZM1.33981 5.10736C1.11705 5.57601 0.945725 6.07612 0.834598 6.60227L0.34539 6.49894C0.464781 5.93367 0.648893 5.39625 0.888228 4.89272L1.33981 5.10736ZM0.688533 8.1753C0.693883 8.43516 0.713433 8.69954 0.748067 8.96796L0.252178 9.03194C0.215265 8.74586 0.194362 8.46356 0.188639 8.18559L0.688533 8.1753ZM13.0001 4.99995L11.8648 4.46569C8.7923 3.0198 5.37433 5.6624 6.00012 8.99995H1.50012C0.752281 3.39114 7.11327 -0.36068 11.6602 3.00738L13.0001 3.99995V4.99995ZM9.39343 5.36218C9.65957 5.28953 9.9379 5.25342 10.2218 5.25912L10.2319 4.75922C9.89885 4.75254 9.57282 4.79491 9.26176 4.87982L9.39343 5.36218ZM11.0465 5.39477C11.1775 5.43577 11.3086 5.48648 11.4394 5.54749L11.8031 5.71725L12.0146 5.26415L11.6508 5.0944C11.5001 5.02407 11.3482 4.9653 11.1959 4.91761L11.0465 5.39477ZM7.97238 6.22066C8.16447 6.01612 8.38421 5.83825 8.62428 5.69298L8.36542 5.2652C8.08642 5.43403 7.83115 5.64067 7.60791 5.87838L7.97238 6.22066ZM12.5307 6.05675L12.8944 6.2265L13.1058 5.77341L12.7421 5.60365L12.5307 6.05675ZM7.21528 7.69283C7.26885 7.41392 7.36213 7.14921 7.48862 6.90405L7.04428 6.67479C6.89644 6.96135 6.78708 7.27139 6.72425 7.59851L7.21528 7.69283ZM7.24372 8.94374C7.21128 8.80315 7.189 8.6643 7.17618 8.52767L6.67837 8.57438C6.69328 8.73332 6.71913 8.89411 6.75653 9.05617L7.24372 8.94374Z"
      fill="currentcolor"
    />
  </svg>
}
    href="/send-with-rails"
  />

  <Card
    title="Go Quickstart"
    icon={
  <svg
    className="h-6 w-6"
    fill="currentcolor"
    height="40"
    style={{ overflow: 'visible' }}
    viewBox="0 0 16 16"
    width="40"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      clipRule="evenodd"
      d="M8.58088 6.38879C8.24298 6.47352 7.96479 6.54646 7.6815 6.62074L7.68145 6.62075C7.45577 6.67992 7.22686 6.73994 6.96195 6.80744L6.94603 6.81166C6.8165 6.84601 6.80299 6.84959 6.68249 6.71229C6.53794 6.55054 6.43194 6.44588 6.22957 6.35073C5.62247 6.05577 5.03464 6.1414 4.48536 6.49345C3.83008 6.9121 3.4928 7.53056 3.50244 8.30126C3.51208 9.06244 4.04208 9.69042 4.80337 9.79508C5.45865 9.88072 6.00793 9.65236 6.44157 9.1671C6.50586 9.08953 6.56485 9.00671 6.63032 8.91481L6.63033 8.91479L6.63041 8.91468C6.65324 8.88263 6.67685 8.84948 6.70176 8.81506H4.84191C4.63955 8.81506 4.59136 8.69136 4.65882 8.52961C4.7841 8.23466 5.01537 7.73989 5.15028 7.4925C5.17919 7.43541 5.24665 7.34027 5.39119 7.34027H8.49247C8.63176 6.90459 8.85774 6.49291 9.15917 6.10338C9.86263 5.18996 10.7106 4.71423 11.8574 4.51441C12.8403 4.34315 13.7654 4.4383 14.6038 4.99967C15.365 5.51347 15.8372 6.20805 15.9625 7.12147C16.1263 8.40596 15.7505 9.45259 14.8543 10.3469C14.2183 10.9844 13.4377 11.384 12.5415 11.5648C12.3708 11.5961 12.1999 11.6109 12.0318 11.6255C11.9439 11.6331 11.8567 11.6407 11.7706 11.6505C10.8937 11.6314 10.0939 11.384 9.41935 10.8132C8.94488 10.4082 8.61806 9.91052 8.45568 9.33109C8.34297 9.55585 8.2082 9.7711 8.05087 9.97586C7.35704 10.8798 6.45121 11.4411 5.30447 11.5934C4.36009 11.7171 3.48317 11.5363 2.71225 10.9654C1.99914 10.4326 1.59441 9.72849 1.48841 8.85312C1.36314 7.816 1.6715 6.88356 2.30751 6.06528C2.9917 5.18041 3.89754 4.61904 5.00573 4.41923C5.91157 4.25748 6.77885 4.36214 7.55941 4.88545C8.07014 5.21847 8.43633 5.67518 8.67724 6.22704C8.73506 6.31267 8.69652 6.36024 8.58088 6.38879ZM-2.29935 6.56005C-2.33789 6.56005 -2.34753 6.54102 -2.32826 6.51248L-2.12589 6.25558C-2.10662 6.22704 -2.05844 6.20801 -2.01989 6.20801H1.42034C1.45889 6.20801 1.46853 6.23655 1.44925 6.2651L1.28543 6.51248C1.26616 6.54102 1.21798 6.56957 1.18907 6.56957L-2.29935 6.56005ZM-3.75442 7.43554C-3.79297 7.43554 -3.8026 7.41651 -3.78333 7.38797L-3.58096 7.13107C-3.56169 7.10253 -3.51351 7.0835 -3.47496 7.0835H0.919281C0.957828 7.0835 0.977101 7.11204 0.967464 7.14059L0.890373 7.36894C0.880736 7.407 0.84219 7.42603 0.803644 7.42603L-3.75442 7.43554ZM-1.4513 8.2537C-1.47057 8.28224 -1.46093 8.31078 -1.42239 8.31078L0.678369 8.3203C0.707278 8.3203 0.745825 8.29175 0.745825 8.2537L0.765097 8.02534C0.765097 7.98728 0.745825 7.95874 0.707279 7.95874H-1.22002C-1.25856 7.95874 -1.29711 7.98728 -1.31638 8.01583L-1.4513 8.2537ZM14.0575 7.70514C14.0594 7.73699 14.0613 7.77055 14.0641 7.80653C14.0159 8.6248 13.6016 9.23375 12.8403 9.62385C12.3295 9.88075 11.7995 9.9093 11.2695 9.68094C10.5757 9.37647 10.2095 8.6248 10.383 7.88265C10.595 6.98826 11.1732 6.42689 12.0694 6.22708C12.9848 6.01775 13.8617 6.55058 14.0352 7.49254C14.0489 7.56001 14.0529 7.62749 14.0575 7.70514Z"
      fillRule="evenodd"
    ></path>
  </svg>
}
    href="/send-with-go"
  />

  <Card
    title="Rust Quickstart"
    icon={
  <svg
    fill="currentcolor"
    xmlns="http://www.w3.org/2000/svg"
    viewBox="4 4 16 16"
  >
    <path
      d="m19.89 11.804-.671-.416a9.793 9.793 0 0 0-.019-.195l.577-.539a.23.23 0 0 0-.077-.386l-.738-.276a8.96 8.96 0 0 0-.057-.19l.46-.64a.231.231 0 0 0-.15-.363l-.779-.126a5.871 5.871 0 0 0-.093-.175l.327-.718a.23.23 0 0 0-.105-.302.23.23 0 0 0-.114-.025l-.789.028a6.455 6.455 0 0 0-.125-.151l.181-.77a.23.23 0 0 0-.277-.278l-.77.181-.151-.125.027-.789a.231.231 0 0 0-.212-.24.23.23 0 0 0-.114.022l-.718.327a8.455 8.455 0 0 0-.175-.094l-.127-.778a.23.23 0 0 0-.363-.15l-.64.459a7.18 7.18 0 0 0-.19-.057l-.275-.738a.23.23 0 0 0-.386-.077l-.538.578a6.308 6.308 0 0 0-.196-.02l-.416-.671a.23.23 0 0 0-.393 0l-.416.672a6.46 6.46 0 0 0-.195.019l-.539-.578a.232.232 0 0 0-.386.077l-.275.738a7.035 7.035 0 0 0-.19.058l-.64-.461a.23.23 0 0 0-.364.15l-.127.779c-.058.03-.116.062-.175.094L7.78 5.33a.23.23 0 0 0-.327.218l.028.79a7.17 7.17 0 0 0-.152.125l-.769-.182a.232.232 0 0 0-.278.278l.181.77-.125.15-.79-.027a.231.231 0 0 0-.218.327l.327.718a7.192 7.192 0 0 0-.093.175l-.778.126a.231.231 0 0 0-.15.364l.459.639c-.02.063-.039.127-.057.19l-.738.276a.231.231 0 0 0-.077.386l.578.539c-.008.065-.014.13-.02.195l-.671.416a.23.23 0 0 0 0 .393l.671.416c.006.065.012.13.02.196l-.578.538a.23.23 0 0 0 .077.386l.738.275c.018.065.038.128.058.19l-.461.64a.231.231 0 0 0 .15.363l.779.127c.03.059.061.117.094.175l-.328.717a.231.231 0 0 0 .219.327l.789-.027.125.151-.181.77a.23.23 0 0 0 .278.277l.769-.18c.05.042.1.083.152.124l-.028.79a.23.23 0 0 0 .327.218l.718-.327c.057.032.116.063.175.094l.126.777a.23.23 0 0 0 .364.151l.639-.46c.063.02.127.04.19.057l.276.738a.23.23 0 0 0 .385.077l.54-.578c.065.008.13.014.195.02l.416.672a.231.231 0 0 0 .393 0l.416-.672a6.34 6.34 0 0 0 .196-.02l.538.578a.23.23 0 0 0 .385-.077l.277-.738a6.39 6.39 0 0 0 .19-.058l.64.461a.23.23 0 0 0 .316-.044.233.233 0 0 0 .046-.107l.127-.778c.059-.03.117-.062.175-.093l.718.327a.23.23 0 0 0 .326-.219l-.027-.79c.051-.04.102-.081.152-.124l.768.181a.229.229 0 0 0 .276-.16.23.23 0 0 0 .002-.117l-.18-.77.124-.151.79.027a.23.23 0 0 0 .218-.327l-.327-.717c.032-.058.063-.116.093-.175l.779-.127a.229.229 0 0 0 .193-.254.23.23 0 0 0-.043-.109l-.46-.64c.02-.063.039-.126.057-.19l.738-.275a.23.23 0 0 0 .077-.386l-.578-.538.02-.196.671-.416a.231.231 0 0 0 0-.393Zm-4.495 5.572a.476.476 0 0 1 .2-.93.476.476 0 0 1-.2.93Zm-.229-1.544a.433.433 0 0 0-.514.333l-.238 1.113a5.824 5.824 0 0 1-2.414.52 5.83 5.83 0 0 1-2.464-.543l-.239-1.113a.433.433 0 0 0-.514-.333l-.982.21a5.829 5.829 0 0 1-.508-.598h4.78c.054 0 .09-.01.09-.059v-1.69c0-.05-.036-.06-.09-.06h-1.398V12.54h1.512c.138 0 .738.04.93.807.06.235.192 1.002.282 1.248.09.275.456.826.846.826h2.382a.484.484 0 0 0 .087-.009 5.808 5.808 0 0 1-.542.635l-1.006-.215Zm-6.611 1.52a.476.476 0 0 1-.2-.93.478.478 0 0 1 .568.552.476.476 0 0 1-.368.378ZM6.742 10a.475.475 0 1 1-.869.385.475.475 0 0 1 .869-.385Zm-.558 1.321 1.024-.454a.434.434 0 0 0 .22-.573l-.211-.476h.829v3.736H6.374a5.857 5.857 0 0 1-.19-2.233Zm4.491-.363V9.857h1.974c.103 0 .72.118.72.58 0 .383-.473.521-.864.521h-1.83Zm7.175.992c0 .146-.006.29-.017.434h-.6c-.06 0-.084.04-.084.099v.275c0 .649-.366.79-.686.826-.305.034-.644-.128-.686-.315-.18-1.013-.48-1.229-.954-1.603.588-.373 1.2-.924 1.2-1.661 0-.797-.546-1.298-.918-1.544a2.605 2.605 0 0 0-1.255-.413H7.643A5.842 5.842 0 0 1 10.915 6.2l.732.767c.165.173.44.18.612.014l.819-.783a5.856 5.856 0 0 1 4.005 2.852l-.561 1.266a.434.434 0 0 0 .22.572l1.08.48c.018.191.028.384.028.581Zm-6.203-6.402a.475.475 0 1 1 .656.686.475.475 0 0 1-.656-.686Zm5.562 4.475a.475.475 0 1 1 .868.386.475.475 0 0 1-.869-.386Z"
      fill="currentColor"
    />
  </svg>
}
    href="/send-with-rust"
  />

  <Card
    title="Elixir Quickstart"
    icon={
  <svg
    className="h-6 w-6"
    fill="currentcolor"
    height="40"
    viewBox="0 0 16 16"
    width="40"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      clipRule="evenodd"
      d="M8.95169 0.940326L8.97457 0.208954L8.28489 0.45342C7.07051 0.883867 5.99667 2.09398 5.02015 3.89315C4.30013 5.21975 3.4379 6.88892 3.09609 8.62234C2.75009 10.377 2.93069 12.2387 4.34004 13.8814C4.98953 14.6384 5.86559 15.2573 6.9497 15.5007C8.03868 15.7451 9.28923 15.5995 10.6621 14.9092C11.8527 14.3106 12.5834 13.1706 12.9194 12.0293C13.2515 10.9011 13.2298 9.66104 12.7781 8.8081C12.0293 7.39378 11.2718 6.47993 10.6584 5.73986L10.6584 5.73985L10.5548 5.61473C9.92016 4.84726 9.50366 4.30289 9.32552 3.53488C9.05065 2.34986 8.93437 1.49391 8.95169 0.940326ZM5.89904 4.37018C6.61644 3.04841 7.31909 2.19545 7.9882 1.72834C8.04627 2.2973 8.16963 2.97725 8.35138 3.76083C8.58889 4.78478 9.15631 5.49275 9.78417 6.252L9.88372 6.37222C10.4932 7.10777 11.1945 7.95414 11.8944 9.27603C12.1844 9.82388 12.2463 10.7747 11.9601 11.7469C11.6777 12.7059 11.0882 13.5757 10.2129 14.0158C9.01413 14.6185 7.99909 14.7113 7.16869 14.5249C6.33341 14.3375 5.6363 13.8565 5.09899 13.2303C3.943 11.8829 3.77243 10.3613 4.07719 8.81581C4.38614 7.24906 5.17662 5.70118 5.89904 4.37018ZM4.675 10.5227C4.81738 11.1996 5.12501 11.8571 5.64824 12.467C6.32801 13.2593 7.33535 13.8556 8.61589 13.7953L8.56887 12.7964C7.65729 12.8393 6.92974 12.4249 6.40719 11.8159C5.99411 11.3344 5.76156 10.8302 5.65359 10.3169L4.675 10.5227Z"
      fillRule="evenodd"
    ></path>
  </svg>
}
    href="/send-with-elixir"
  />

  <Card
    title="Java Quickstart"
    icon={
  <svg
    className="h-6 w-6"
    width="40"
    height="40"
    viewBox="0 0 40 40"
    fill="currentcolor"
    stroke="currentcolor"
    xmlns="http://www.w3.org/2000/svg"
  >
    <g clipPath="url(#clip0_1059_8989)">
      <path
        d="M13.9627 29.3125C13.9627 29.3125 12.0795 30.5902 15.3029 31.0226C19.208 31.5424 21.2038 31.4679 25.5072 30.5176C25.5072 30.5176 26.6387 31.3453 28.2188 32.0622C18.5716 36.8862 6.38534 31.7828 13.9627 29.3125Z"
        strokeWidth="0.2"
        strokeLinejoin="round"
      />
      <path
        d="M13.9194 24.5625C13.9194 24.5625 12.0673 25.9582 14.8958 26.2561C18.5535 26.6403 21.442 26.6717 26.4403 25.6918C26.4403 25.6918 27.1317 26.4054 28.2187 26.7956C17.9915 29.8403 6.60026 27.0357 13.9194 24.5625Z"
        strokeWidth="0.2"
        strokeLinejoin="round"
      />
      <path
        d="M21.3193 16.5103C22.86 18.2484 20.9146 19.8125 20.9146 19.8125C20.9146 19.8125 24.8265 17.8336 23.0299 15.3555C21.352 13.0446 20.0652 11.8964 27.0312 7.9375C27.0312 7.9375 16.0969 10.6135 21.3193 16.5103Z"
        strokeWidth="0.2"
        strokeLinejoin="round"
      />
      <path
        d="M34.4522 33.2528C34.4522 33.2528 35.7597 34.2935 33.0122 35.0986C27.7878 36.6275 11.2676 37.0892 6.67835 35.1596C5.02864 34.4663 8.12232 33.5041 9.09547 33.3022C10.1104 33.0896 10.6904 33.1293 10.6904 33.1293C8.8557 31.8807 -1.16807 35.5808 5.59877 36.6404C24.0529 39.5315 39.239 35.3386 34.4522 33.2528Z"
        strokeWidth="0.2"
        strokeLinejoin="round"
      />
      <path
        d="M15.145 19.8191C15.145 19.8191 6.55287 21.5665 12.1023 22.201C14.4455 22.4697 19.1165 22.4089 23.4674 22.0967C27.0233 21.8399 30.5938 21.2938 30.5938 21.2938C30.5938 21.2938 29.3399 21.7536 28.4328 22.284C19.7076 24.2488 2.85216 23.3347 7.70463 21.3249C11.8084 19.6264 15.145 19.8191 15.145 19.8191Z"
        strokeWidth="0.2"
        strokeLinejoin="round"
      />
      <path
        d="M30.7628 27.9175C39.1741 23.7999 35.285 19.8429 32.5705 20.376C31.9052 20.5065 31.6085 20.6195 31.6085 20.6195C31.6085 20.6195 31.8555 20.255 32.3273 20.0973C37.6974 18.3187 41.8274 25.3429 30.5938 28.125C30.5938 28.125 30.7239 28.0155 30.7628 27.9175Z"
        strokeWidth="0.2"
        strokeLinejoin="round"
      />
      <path
        d="M22.6092 2C22.6092 2 25.9593 5.1498 19.4318 9.9933C14.1975 13.8786 18.2382 16.0939 19.4297 18.625C16.3743 16.034 14.132 13.7531 15.6363 11.6302C17.8442 8.51409 23.9609 7.00326 22.6092 2Z"
        strokeWidth="0.2"
        strokeLinejoin="round"
      />
      <path
        d="M15.8835 39.8818C24.3732 40.3152 37.41 39.6413 37.7187 36.4375C37.7187 36.4375 37.1252 37.652 30.7025 38.6166C23.4564 39.7042 14.5194 39.5772 9.21875 38.8802C9.21875 38.8802 10.3039 39.5964 15.8835 39.8818Z"
        strokeWidth="0.2"
        strokeLinejoin="round"
      />
    </g>
  </svg>
}
    href="/send-with-java"
  />

  <Card
    title=".NET Quickstart"
    icon={
  <svg
    fill="none"
    height={24}
    width={32}
    xmlns="http://www.w3.org/2000/svg"
    viewBox="69.65 171 323.05 120.35"
  >
    <path
      d="M81.274 291.333c-3.224 0-5.965-1.074-8.222-3.223-2.257-2.204-3.386-4.821-3.386-7.851 0-3.086 1.129-5.73 3.386-7.934 2.257-2.204 4.998-3.306 8.222-3.306 3.278 0 6.045 1.102 8.302 3.306 2.311 2.204 3.466 4.848 3.466 7.934 0 3.03-1.155 5.647-3.466 7.851-2.257 2.149-5.024 3.223-8.302 3.223ZM210.167 289.515h-20.958l-55.215-87.109a38.977 38.977 0 0 1-3.466-6.86h-.484c.43 2.535.645 7.962.645 16.281v77.688h-18.54V171h22.328l53.362 85.043c2.257 3.527 3.708 5.951 4.353 7.273h.322c-.537-3.14-.806-8.457-.806-15.951V171h18.459v118.515ZM300.449 289.515h-64.888V171h62.309v16.695h-43.124v33.554h39.739v16.612h-39.739v35.042h45.703v16.612ZM392.667 187.695h-33.21v101.82h-19.185v-101.82h-33.129V171h85.524v16.695Z"
      fill="currentColor"
    />
  </svg>
}
    href="/send-with-dotnet"
  />
</CardGroup>

## Explore

Discover the full range of features and capabilities.

<CardGroup cols={3}>
  <Card title="Emails" href="dashboard/emails">
    Visualize all the activity in your account.
  </Card>

  <Card title="Domains" href="dashboard/domains/introduction">
    Ensure deliverability of your emails.
  </Card>

  <Card title="Webhooks" href="/dashboard/webhooks">
    Notify your application about email events.
  </Card>
</CardGroup>


# How to add the Resend integration to your Anything project
Source: https://resend.com/docs/knowledge-base/anything-integration

Learn how to add the Resend integration to your Anything project.

export const YouTube = ({id}) => {
  return <iframe className="w-full aspect-video rounded-xl" src={`https://www.youtube.com/embed/${id}`} title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen></iframe>;
};

[Anything](https://createanything.com) is a platform for building web sites, tools, apps, and projects via chat. With their [Resend integration](https://www.createanything.com/docs/integrations/resend), you can send emails from your Anything project.

If you prefer to watch a video, check out our video walkthrough below.

<YouTube id="Avp1OOMH2Z0" />

## 1. Call the Resend integration in Anything

Type `/Resend` in the chat and select the integration, and ask Anything to add email functionality to your project.

<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/create-xyz-integration.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=810ab7bd912d16365530bbda50d339d8" alt="adding the Resend integration to a Anything chat" data-og-width="3360" width="3360" data-og-height="2100" height="2100" data-path="images/create-xyz-integration.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/create-xyz-integration.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ee2abf359323aa9bdd0bab6ebbf380b1 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/create-xyz-integration.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ad40ed7d18250a8cdf9860525c3c34ac 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/create-xyz-integration.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=31549ee3952e6a0e8fd050a83ab8ceaf 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/create-xyz-integration.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=0f5e624a35ee15812e208d6a0f23aa0c 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/create-xyz-integration.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=022ed128089eecd50ff491c5de55adf1 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/create-xyz-integration.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b0e85595c3fbaf4d70baf77215310490 2500w" />

## 2. Add your Resend API key

Anything usually prompts you for a Resend API key, which you can add in the [Resend Dashboard](https://resend.com/api-keys). If Anything doesn't prompt you for a Resend API key, click the **More options** <Icon icon="ellipsis-vertical" iconType="solid" /> button and select **Secrets**.

Click the <Icon icon="plus" iconType="solid" /> **Add new secret** button.

* **Name:** `RESEND_API_KEY`
* **Value:** Your Resend API key (e.g., `re_xxxxxxxxx0`)

Learn more about [Secrets in Create](https://www.createanything.com/docs/essentials#project-settings).

## 3. Add a custom domain to your Resend account

By default, you can only send emails to your own email address.

To send emails to other email addresses:

1. Add a [custom domain to your Resend account](https://resend.com/domains).
2. Add the custom domain to the `from` field in the `resend` function in Create.

Learn more about [Functions in Create](https://www.createanything.com/docs/builder/functions).


# Audience Hygiene: How to keep your Audiences in good shape?
Source: https://resend.com/docs/knowledge-base/audience-hygiene

Learn strategies for maintaining good audience hygiene and maximizing email deliverability.

Audience hygiene (*also known as list hygiene*) refers to the practice of keeping your email list clean, valid, and engaged.

Maintaining proper audience hygiene is crucial for ensuring that your emails reach their intended recipients, maximizing your deliverability, and improving your sender reputation.

By removing invalid, outdated, or disengaged contacts, you can improve the effectiveness of your email campaigns and avoid issues like high bounce rates, low engagement, and even being marked as spam.

***

# How to ensure emails are valid?

To keep your list healthy, it's essential to ensure that the email addresses you collect are valid, accurate, and belong to recipients who are truly interested in hearing from you. Here are a few strategies to help you achieve this:

### Prevent undesired or bot signups with CAPTCHA

Bots can easily sign up for your emails, inflating your list with fake or low-quality contacts. To prevent this, implement CAPTCHA systems during your sign-up process. CAPTCHA challenges help ensure that sign-ups are coming from human users and not automated scripts.

Some popular CAPTCHA services include:

* **[Google reCAPTCHA](https://developers.google.com/recaptcha)**: One of the most widely used CAPTCHA services, offering both simple and advanced protection options.
* **[hCaptcha](https://www.hcaptcha.com/)**: An alternative to Google reCAPTCHA, providing similar protection but with a different user experience.
* **[Friendly Captcha](https://friendlycaptcha.com/)**: A privacy-focused CAPTCHA solution that doesn’t require users to click on anything, reducing friction in the sign-up process.

Using these tools will help reduce bot sign-ups and ensure your email list consists of real users.

### Ensure the recipient is consenting with Double Opt-In

Double opt-in is the process of confirming a user's subscription after they’ve signed up for your emails.

When a user submits their email address, you send them a confirmation email with a link they must click to complete the subscription process.

This step ensures that the person who entered the email address is the one who actually wants to receive your communications.

This is important to ensure:

* **Compliance with local regulations**: Double opt-in helps ensure that you comply with email marketing regulations such as the **CAN-SPAM Act** (U.S.) and **CASL** (Canada). Both of these laws require clear consent from subscribers before you can send them marketing emails.
* **Improved deliverability**: Double opt-in helps you maintain a clean list of genuinely interested users. This reduces bounce rates and prevents spam complaints, which in turn helps maintain your sender reputation with ISPs and inbox providers.
* **Verification of accuracy**: Double opt-in ensures the email addresses you collect are valid, accurate, and up to date, reducing the risk of sending to invalid addresses and impacting your deliverability.

### Use a third-party service to verify an address' deliverability

While you can verify that an email address follows the correct syntax (e.g., [user@example.com](mailto:user@example.com)) (also known as RFC 5322), you also need to ensure that the address is deliverable—that is, it’s an active inbox that can receive emails.

Third-party email verification services can help you identify whether an email address is valid, reachable, or likely to result in a bounce.

This reduces the risk of sending to addresses that won’t receive your emails and improves your overall deliverability.

Some email verification services include:

* **[Emailable](https://emailable.com/partners/resend)**
* **ZeroBounce**
* **Kickbox**

By using these services, you can clean up your existing email lists or prevent undeliverable emails to be added to them. This helps prevent unnecessary deliverability issues.

***

# How to proactively remove emails from your Audiences

Over time, certain recipients may become disengaged with your content. It's important to manage your audience by removing inactive or unengaged users.

Regularly filtering your audiences ensures that you're sending to only those who are actively interested, which in turn boosts engagement and deliverability.

A healthy email list is one that is continuously nurtured with relevant and timely content. Instead of sporadic communication, maintain consistent engagement with your audience to keep them interested.

### Filter on engagement

To keep your email list in top shape, focus on sending to engaged users. Major inbox providers like Gmail and Microsoft expect you to send emails to recipients who have recently opened or clicked on your emails.

As a best practice, you should limit non-transactional email sends to recipients who have opened or clicked an email in the past 6 months.

<Info>
  The exact timeframe may vary depending on your industry, sending frequency,
  and audience behavior, but 6 months is a generally accepted standard.
</Info>

Regularly cleaning your list of disengaged recipients helps maintain a positive sender reputation and boosts your chances of landing in the inbox instead of the spam folder.

### Automatically remove bounced recipients

Using our [Webhooks](/dashboard/webhooks/introduction), you can be notified when a delivery bounces or gets marked as spam by the recipient.

This is an opportunity to proactively unsubscribe the recipient and prevent further sending. Indeed, while Resend will automatically suppress further deliveries to that email address, we don't automatically unsubscribe it.

### Sunset unengaged recipients

If certain recipients have not engaged with your emails over an extended period (e.g., 6+ months), consider removing them from your Marketing sends.

Continuing to send to these unengaged users can harm your deliverability by increasing bounce rates and decreasing your open rates.

To re-engage these users, you may want to send a re-engagement campaign or offer an incentive for them to stay on your list. If they don't respond, it's often best to remove them to keep your list healthy and avoid wasting resources on inactive contacts.

***

By maintaining strong audience hygiene practices—including validating email addresses, ensuring consent, verifying deliverability, and removing unengaged recipients—you'll improve your email deliverability and foster better relationships with your subscribers.

This will help you achieve better engagement rates and a healthier sender reputation with inbox providers.


# Send emails with Base44 and Resend
Source: https://resend.com/docs/knowledge-base/base44-integration

Learn how to add the Resend integration to your Base44 project.

[Base44](https://base44.com/) is a platform for building apps with AI. You can add Resend in a Base44 project by asking the chat to add email sending with Resend.

<Info>
  This integration requires backend functions, a feature available only on
  Builder tier and above. Learn more about [Base44
  pricing](https://base44.com/pricing).
</Info>

## 1. Add the Resend integration in Base44

**If starting a new app:**

1. Click **Integration** in the top nav.
2. Search for **Resend**, select it, and choose **Use This Integration**.

<img alt="Resend Integration page" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f98f8dda5a22d0a0aa0aadc40c9324f3" data-og-width="1024" width="1024" data-og-height="475" height="475" data-path="images/base44-integration.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7072436cdb22df727c491209aff6c628 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d70832ba33dac909a6bdc75457ae1e1a 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=10b3566ba9fc7a0665fcd85c851070f1 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9e2f5b8962003810bbd1f850ad98049c 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d135e408fbbd1b62d958d37812d24731 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c5dc37bcc1838d2c444cc4cba1fdf9a3 2500w" />

**If adding Resend to an existing app:**

1. Enable backend functions.
2. Ask the chat: "Add the Resend email integration to my app. Prompt me to provide the API key and send a welcome email to new users."

<Note>
  See the [Base44
  documenation](https://docs.base44.com/Integrations/Resend-integration) for
  more information.
</Note>

## 2. Add your Resend API key

However you add Resend to your project, you'll need to add a Resend API key, which you can create in the [Resend Dashboard](https://resend.com/api-keys). Do not share your API key with others or expose it in the browser or other client-side code.

Copy the API key and paste it into the **RESEND\_API\_KEY** field in Base44.

<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration-1.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e10a7a52b06dde106b7a2db585bb7b30" alt="Adding your Resend API key to Base44" data-og-width="1024" width="1024" data-og-height="476" height="476" data-path="images/base44-integration-1.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration-1.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=91015dee5675e094d2c5863a42855bd3 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration-1.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b14a35c5976c953232577a85464112fc 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration-1.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e6ac3163ea0ad7d15d98d7b9ad6cf273 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration-1.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f68c16fbcaa8a18b42151991775bbbb7 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration-1.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1e1f07d7c7269438f8e16946b8a15135 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/base44-integration-1.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8ad66acfc04074bec5c6c4dfc39c4cb0 2500w" />

## 3. Add a custom domain to your Resend account

By default, you can only send emails to your own email address.

To send emails to other email addresses:

1. Add a [custom domain to your Resend account](https://resend.com/domains).
2. Add the custom domain to the `from` field in the `resend` function in the Base44 backend function (or ask the chat to update these fields).

Get more help adding a custom domain in [Resend's documentation](/dashboard/domains/introduction).


# Send emails with Bolt.new and Resend
Source: https://resend.com/docs/knowledge-base/bolt-new-integration

Learn how to add the Resend integration to your Bolt.new project.

[Bolt.new](https://bolt.new) is a platform for building full-stack web and mobile apps via chat. You can add Resend in a Bolt.new project by asking the chat to add email sending with Resend.

<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bolt-new-integration.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=702a20abddc5efbf7b7d0b3e25c431ed" alt="adding the Resend integration to a Bolt.new chat" data-og-width="3360" width="3360" data-og-height="2100" height="2100" data-path="images/bolt-new-integration.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bolt-new-integration.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a6373cdca07bbdbf7ef4b020a38a5221 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bolt-new-integration.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9880997df5d6140ed33efe4966288ec7 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bolt-new-integration.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=29ba4652121c16c1758cf0453932aeb4 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bolt-new-integration.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=010f26e7931eb065941d43eb3279dec3 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bolt-new-integration.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=480c138f560b0bf91b1ad80411dc017e 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/bolt-new-integration.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4377be9666f9aa2e06945215400f432b 2500w" />

## 1. Add your Resend API key

To use Resend with Bolt.new, you'll need to add a Resend API key, which you can create in the [Resend Dashboard](https://resend.com/api-keys). Do not share your API key with others or expose it in the browser or other client-side code.

<Note>
  To safely store your Resend API key, use a `.env` file. You may need to
  include this instruction in your prompt to bolt.new. Learn more about
  [handling API keys](/knowledge-base/how-to-handle-api-keys).
</Note>

## 2. Add a custom domain to your Resend account

By default, you can only send emails to your own email address.

To send emails to other email addresses:

1. Add a [custom domain to your Resend account](https://resend.com/domains).
2. Add the custom domain to the `from` field in the `resend` function in Bolt.new (or ask the chat to update these fields).

Get more help adding a custom domain in [Resend's documentation](/dashboard/domains/introduction).


# Cloudflare
Source: https://resend.com/docs/knowledge-base/cloudflare

Verify your domain on Cloudflare with Resend.

## Add Domain to Resend

First, log in to your [Resend Account](https://resend.com/login) and [add a domain](https://resend.com/domains).

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=418dd93c2f2ead0b0d83d1b7c2fb0970" data-og-width="3360" width="3360" data-og-height="2100" height="2100" data-path="images/dashboard-domains-resend-add-domain.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=28a4feab47f2b86c34c7b1314f636f0c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bf121272193472fdd2c882fe4b29ced5 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=950e2318cb41511a6f7105afa50be42c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e5a7d9a4d237a3435e8fffb85c3650f1 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a4944168fa1595f1843c8789944f1ef3 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=17d0c63a766375cab10239e4025c8dac 2500w" />

<Tip>
  It is [best practice to use a
  subdomain](/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain)
  (updates.example.com) instead of the root domain (example.com). This allows
  for proper reputation segmentation based on topics or purpose (e.g.
  transactional and marketing).
</Tip>

## Log in to Cloudflare

Log in to your [Cloudflare account](https://cloudflare.com) and go to the DNS Records of your domain.

<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-main.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ffd61997133f0af6f4ba8d14df82dcdc" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-cloudflare-main.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-main.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=affd5781bb82c0dcef75131a8b765cf2 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-main.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4cf4848114666458a854d83b21222d0a 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-main.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=0861617efcdd0a5952ef775c20d13dd7 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-main.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f146598d076eb6032d4bcb7563fc61a8 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-main.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=fb782bc227891b7c0389f47c83a2914e 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-main.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f9369a51dca91695ab42523500163c69 2500w" />

## Add MX SPF Record

Click "Add Record" on Cloudflare:

1. Set the Type to `MX`.
2. Type `send` for the `Name` of the record.
3. Copy the MX Value from Resend into the `Mail Server` field.
4. Use the default `Auto` for `TTL`.
5. Add `10` for the `Priority`.
6. Select `Save`.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bb0db2dd2809135194cfb62b695225cd" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a95639f0752fdbaefd0eae3b93ec6255 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9e579bee139584def82c0a8688466681 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=80c20d31f9598b0f8aeb4b267725b4fe 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f66dc758dec3ac85919063c4bb66f4d5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=187033c1e79e5f6f3b47fa0466def756 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a0531e4d1d25117efaef896d40331e3 2500w" />

<br />

<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-mx.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=372024c515c4b6924e5a1314ad831b6f" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-cloudflare-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-mx.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1416fbcccc6fd9f2185d85a9a8d7ef04 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-mx.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6173e8d149b3aa86e65891b960e4fe21 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-mx.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ad3c6e2f38266674ce7469665734bb93 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-mx.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f0c3403290df643ea1f9878c4172826c 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-mx.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b7a7ef34344fd16322a43c7b63d41620 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-mx.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5ec4fafda8fa91b9be2f2c90f8372d1a 2500w" />

Below is a mapping of the record fields from Resend to Cloudflare:

| Cloudflare  | Resend   | Example Value                           |
| ----------- | -------- | --------------------------------------- |
| Type        | Type     | `MX`                                    |
| Name        | Name     | `send`                                  |
| Mail Server | Value    | `feedback-smtp.us-east-1.amazonses.com` |
| Priority    | Priority | `10`                                    |

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

<Info>
  Do not use the same priority for multiple records. If Priority `10` is already
  in use, try a number slightly higher like `11` or `12`.
</Info>

## Add TXT SPF Record

Click "Add Record" on Cloudflare:

1. Set the Type to `TXT`.
2. Type `send` for the `Name` of the record.
3. Copy the TXT Value Resend into `Content` field.
4. Use the default `Auto` for `TTL`.
5. Select `Save`.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=747425d0a224baeee2846c9a707d5bbc" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=04f13a4953c918b5ffa05474c6e6190c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fa09e290427c24278edb3306e241e2f0 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4e796dc0356e2176d0dfa9467aa9af8f 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5e27ef23ba82f5fe62d483849c5a8ec5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=991e5fe09e65097107fafe4de36c0bda 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6fd70252df24dce6a9768e38d5c75ae0 2500w" />

<br />

<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-txt.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3a20409e0c792c602f4eb636dcfbc3ac" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-cloudflare-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-txt.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4659299904959af3e372c7921bf268bb 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-txt.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=cf10b3dcc0f51677bb488debb69e9ff6 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-txt.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5638e631689875e90a37279279992ab7 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-txt.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c903bd8dbaf56c7212e77894db96f1c1 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-txt.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3f86c3423a87944cccbcb0a7782d6256 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-spf-txt.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=453cb0fef075adb84fc1e4d66d9bab5d 2500w" />

Below is a mapping of the record fields from Resend to Cloudflare:

| Cloudflare | Resend | Example Value                         |
| ---------- | ------ | ------------------------------------- |
| Type       | Type   | `TXT`                                 |
| Name       | Name   | `send`                                |
| Content    | Value  | `"v=spf1 include:amazonses.com ~all"` |
| TTL        | -      | `Auto`                                |

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

## Add TXT DKIM Records

Click "Add Record" on Cloudflare:

1. Set the Type to `TXT`.
2. Type `resend._domainkey` for the `Name` of the record.
3. Copy the TXT Value Resend into `Content` field.
4. Use the default `Auto` for `TTL`.
5. Select `Save`.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=345d1dc6b7c138dbd92bd6928c634bd9" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/dashboard-domains-resend-dkim.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=37e5d282deda4e727e9f002cf5b8f0dd 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=978f4a7f13387c0d721acd80a944123c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd473e4cdd467d31c1e2d4a507f5d914 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=784706a47cae7451a0200c461831bc30 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9780d5ff17771270ed33a0176bd7bd55 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=46f59e55a1a791b4a32e13bc49e5f0cd 2500w" />

<br />

<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-dkim-txt.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=dafb2d6d5050da130371a2b7a8390abd" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-cloudflare-dkim-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-dkim-txt.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ab8407167de633f0001600e6e91551f2 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-dkim-txt.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8dd410afef4ef516a78b439ee066b096 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-dkim-txt.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1a4d4d31008c2d0f540a21058e010b2a 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-dkim-txt.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6a9b5752b9a41aa10a7ab96388d0389e 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-dkim-txt.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7901593487e28a81b33fc9114b627aff 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-cloudflare-dkim-txt.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5cfa304334a91bd6f42270e16b7b6076 2500w" />

Below is a mapping of the record fields from Resend to Cloudflare:

| Cloudflare   | Resend | Example Value                |
| ------------ | ------ | ---------------------------- |
| Type         | Type   | `TXT`                        |
| Name         | Name   | `resend._domainkey`          |
| Target       | Value  | `p=example_demain_key_value` |
| Proxy Status | -      | `DNS Only (disabled)`        |
| TTL          | -      | `Auto`                       |

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or
  `resend._domainkey.subdomain` if you're using a subdomain).
</Info>

## Complete Verification

Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take up to 72 hours to complete the verification process (often much faster).

## Troubleshooting

If your domain is not successfully verified, these are some common troubleshooting methods.

<AccordionGroup>
  <Accordion title="Cloudflare returns 'Code: 1004' when adding CNAME Records.">
    Confirm your proxy settings are set to `DNS Only` on the record you are adding.
  </Accordion>

  <Accordion title="Resend shows my domain verification failed.">
    Review the records you added to Cloudflare to rule out copy and paste errors.
  </Accordion>

  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).
  </Accordion>
</AccordionGroup>


# How to set up E2E testing with Playwright
Source: https://resend.com/docs/knowledge-base/end-to-end-testing-with-playwright

End to end testing ensures your entire app flow is fully functioning.

export const YouTube = ({id}) => {
  return <iframe className="w-full aspect-video rounded-xl" src={`https://www.youtube.com/embed/${id}`} title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen></iframe>;
};

Below is a basic guide on setting up E2E testing with NextJS, Resend, and Playwright.

Prefer watching a video? Check out our video walkthrough below.

<YouTube id="lzozXSMKl6E" />

## 1. Create an endpoint.

For simplicity, we'll create a GET endpoint that sends an email to the testing account, `delivered@resend.dev` on fetch.

```ts app/api/send/route.ts theme={null}
import { Resend } from 'resend';
const resend = new Resend(process.env.RESEND_API_KEY);

export async function GET() {
  try {
    const { data, error } = await resend.emails.send({
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: 'Hello world',
      html: '<h1>Hello world</h1>',
    });

    if (error) {
      return Response.json({ error }, { status: 500 });
    }

    return Response.json({ data });
  } catch (error) {
    return Response.json({ error }, { status: 500 });
  }
}
```

## 2. Write the test spec file

Create a test spec file at `e2e/app.spec.ts`. You can test in two ways:

### Option 1: Call the Resend API

Calling the Resend API tests the entire API flow, including Resend's API responses, but counts towards your account's sending quota.

```ts e2e/app.spec.ts theme={null}
import { test, expect } from '@playwright/test';

test('does not mock the response and calls the Resend API', async ({
  page,
}) => {
  // Go to the page
  await page.goto('http://localhost:3000/api/send');

  // Assert that the response is visible
  await expect(page.getByText('id')).toBeVisible();
});
```

### Option 2: Mock a response

Mocking the response lets you test *your* app's flow without calling the Resend API and impacting your account's sending quota.

```ts e2e/app.spec.ts theme={null}
import { test, expect } from '@playwright/test';

test("mocks the response and doesn't call the Resend API", async ({ page }) => {
  // Sample response from Resend
  const body = JSON.stringify({
    data: {
      id: '621f3ecf-f4d2-453a-9f82-21332409b4d2',
    },
  });

  // Mock the api call before navigating
  await page.route('*/**/api/send', async (route) => {
    await route.fulfill({
      body,
      contentType: 'application/json',
      status: 200,
    });
  });
});
```

<Note>
  However you test, it's important to test using a test email address (e.g.,
  [delivered@resend.dev](mailto:delivered@resend.dev)) so your tests don't impact your deliverability. Resend's
  [test accounts](/dashboard/emails/send-test-emails) run through the entire API
  flow without harming your reputation.
</Note>

## 3. Create a Playwright config file

Write your config file, paying special attention to a few properties:

* `testDir`: the directory containing your test files
* `outputDir`: the directory to store test results
* `webServer`: provide instructions for Playwright to run your app before starting the tests
* `projects`: an array of the browsers you want to test

```ts playwright.config.ts theme={null}
import { defineConfig, devices } from '@playwright/test';
import path from 'path';

const baseURL = 'http://localhost:3000';

export default defineConfig({
  timeout: 30 * 1000,
  testDir: path.join(__dirname, 'e2e'),
  retries: 2,
  outputDir: 'test-results/',
  webServer: {
    command: 'npm run dev',
    url: baseURL,
    timeout: 120 * 1000,
    reuseExistingServer: !process.env.CI,
  },

  use: {
    baseURL,
    // Retry a test if its failing with enabled tracing. This allows you to analyze the DOM, console logs, network traffic etc.
    trace: 'retry-with-trace',
  },

  projects: [
    // Test against desktop browsers.
    {
      name: 'Desktop Chrome',
      use: {
        ...devices['Desktop Chrome'],
      },
    },
    {
      name: 'Desktop Firefox',
      use: {
        ...devices['Desktop Firefox'],
      },
    },
    {
      name: 'Desktop Safari',
      use: {
        ...devices['Desktop Safari'],
      },
    },
    // Test against mobile viewports.
    {
      name: 'Mobile Chrome',
      use: {
        ...devices['Pixel 5'],
      },
    },
    {
      name: 'Mobile Safari',
      use: devices['iPhone 12'],
    },
  ],
});
```

[See the Playwright docs](https://playwright.dev/docs/intro) for more help.

## 4. Run the test

You can run the test by installing Playwright and running the tests.

```bash  theme={null}
npx playwright install
npx playwright test
```

Playwright will run the tests in the browsers of your choice and show you the results.

<Card title="Example repo" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-nextjs-playwright-example">
  See the full source code.
</Card>


# Gandi
Source: https://resend.com/docs/knowledge-base/gandi

Verify your domain on Gandi with Resend.

## Add Domain to Resend

First, log in to your [Resend Account](https://resend.com/login) and [add a domain](https://resend.com/domains).

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=418dd93c2f2ead0b0d83d1b7c2fb0970" data-og-width="3360" width="3360" data-og-height="2100" height="2100" data-path="images/dashboard-domains-resend-add-domain.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=28a4feab47f2b86c34c7b1314f636f0c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bf121272193472fdd2c882fe4b29ced5 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=950e2318cb41511a6f7105afa50be42c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e5a7d9a4d237a3435e8fffb85c3650f1 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a4944168fa1595f1843c8789944f1ef3 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=17d0c63a766375cab10239e4025c8dac 2500w" />

<Tip>
  It is [best practice to use a
  subdomain](/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain)
  (updates.example.com) instead of the root domain (example.com). This allows
  for proper reputation segmentation based on topics or purpose (e.g.
  transactional and marketing).
</Tip>

## Log in to Gandi

Log in to your [Gandi account](https://admin.gandi.net/domain/):

1. Choose your Domain from the `Domain` list.
2. Select the `DNS Records` tab to get to the page to manage DNS records.

<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-domains.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=db72a28a42a006e10ca7617fc004ecb5" data-og-width="2963" width="2963" data-og-height="1847" height="1847" data-path="images/dashboard-domains-gandi-domains.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-domains.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5b3d9b61e75f492a4e7efaef9b0434e1 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-domains.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=36804c011c62524b2457684ab70c7cce 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-domains.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2dd05c09769b5b445fdaf34858447bb4 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-domains.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e4594f593fd3d2a2fda5d3779e9e0893 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-domains.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4446530f8d14efc2baee977d500c15bd 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-domains.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c85dd37060ad5e0b866b3fc0112eb33d 2500w" />

## Add MX SPF Record

Select “Add record” on Gandi to copy and paste the values MX from Resend.

1. On the `Type` page, choose `MX`.
2. Use the default TTL of `10800`.
3. Type `send` for the `Name` of the record.
4. Use the default `Priority` of `10`.
5. Copy the MX Value from Resend into the `Hostname` field.
6. Select `Create`.

<Info>
  Gandi requires your MX record to have a trailing period when adding. Resend
  will include the trailing period when copying. Removing the period will cause
  the verification to fail.
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bb0db2dd2809135194cfb62b695225cd" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a95639f0752fdbaefd0eae3b93ec6255 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9e579bee139584def82c0a8688466681 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=80c20d31f9598b0f8aeb4b267725b4fe 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f66dc758dec3ac85919063c4bb66f4d5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=187033c1e79e5f6f3b47fa0466def756 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a0531e4d1d25117efaef896d40331e3 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=41f5e1b53f159b7e8e05f4f1ffa7e5ad" data-og-width="2974" width="2974" data-og-height="1848" height="1848" data-path="images/dashboard-domains-gandi-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d9c6960f54e409d123ba9749da37ef89 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=35ca3c16ea77f7f6d589f64177d70eac 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=55f2f83b5a295894728995679b335cd8 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=af8022feef80a1fd59b4cb122de72f11 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2d9329e44b1d8a38d8d6edbffb2c835e 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a826325cc030c4784ca06c8084e5ba0c 2500w" />

Below is a mapping of the record fields from Resend to Gandi:

| Gandi    | Resend   | Example Value                            |
| -------- | -------- | ---------------------------------------- |
| Type     | Type     | `MX Record`                              |
| Name     | Name     | `send`                                   |
| Hostname | Value    | `feedback-smtp.us-east-1.amazonses.com.` |
| TTL      | -        | `10800`                                  |
| Priority | Priority | `10`                                     |

<Info>
  Do not use the same priority for multiple records. If Priority `10` is already
  in use on another record, try a number slightly higher like `11` or `12`.
</Info>

## Add TXT SPF Record

In the same section, select “Add record” again.

1. On the `Type` page, choose `TXT`.
2. Use the default TTL of `10800`.
3. Type `send` for the `Name` of the record.
4. Copy the TXT Value Resend into the `Text value` field.
5. Select `Create`.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=747425d0a224baeee2846c9a707d5bbc" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=04f13a4953c918b5ffa05474c6e6190c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fa09e290427c24278edb3306e241e2f0 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4e796dc0356e2176d0dfa9467aa9af8f 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5e27ef23ba82f5fe62d483849c5a8ec5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=991e5fe09e65097107fafe4de36c0bda 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6fd70252df24dce6a9768e38d5c75ae0 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=7f75828142bfae8186b3f577d379c910" data-og-width="2954" width="2954" data-og-height="1849" height="1849" data-path="images/dashboard-domains-gandi-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=0cb08cea4b3c9f69c72221bc1cbc0f1f 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=dbfffb14e602fea0c917e8253de2a4b6 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8b09d4de42a2053a22a001f7bbc7e36b 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=67f63c26c3df5057b33ac104f4203adb 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3f7667317d6a6ee26be20ee6e4bfdae9 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-gandi-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bb6cb830fca5df52a3f8e38ddca5f654 2500w" />

Below is a mapping of the record fields from Resend to Gandi:

| Gandi      | Resend | Example Value                         |
| ---------- | ------ | ------------------------------------- |
| Type       | Type   | `TXT Record`                          |
| Name       | Name   | `send`                                |
| Text value | Value  | `"v=spf1 include:amazonses.com ~all"` |
| TTL        | -      | `10800`                               |

## Add TXT DKIM Records

In the same section, select “Add record” again.

1. On the `Type` page, choose `TXT`.
2. Use the default TTL of `10800`.
3. Type `resend._domainkey` for the `Host name` of the record.
4. Copy the record value from Resend into the `TXT value` field.
5. Select `Create`.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or
  `resend._domainkey.subdomain` if you're using a subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=345d1dc6b7c138dbd92bd6928c634bd9" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/dashboard-domains-resend-dkim.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=37e5d282deda4e727e9f002cf5b8f0dd 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=978f4a7f13387c0d721acd80a944123c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd473e4cdd467d31c1e2d4a507f5d914 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=784706a47cae7451a0200c461831bc30 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9780d5ff17771270ed33a0176bd7bd55 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=46f59e55a1a791b4a32e13bc49e5f0cd 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-dkim-txt.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=097889c1a13da8b1634cddadfe294887" data-og-width="2954" width="2954" data-og-height="1848" height="1848" data-path="images/dashboard-domains-gandi-dkim-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-dkim-txt.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2225a7f06e29f58b58235426d04e9a5e 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-dkim-txt.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9ca149853b529c8acc1cfbc09739ac8c 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-dkim-txt.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=110efce24a291ffd187509f1971a4265 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-dkim-txt.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8b2c5af25d6a3bb42b14be71557168d8 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-dkim-txt.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ef650933721d359c3bdabcc5c4267593 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-gandi-dkim-txt.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a624fae4abbf96f4d0773df3d9d9814d 2500w" />

Below is a mapping of the record fields from Resend to Gandi:

| Gandi      | Resend | Example Value                |
| ---------- | ------ | ---------------------------- |
| Type       | Type   | `TXT Record`                 |
| Name       | Name   | `send`                       |
| Text value | Value  | `p=example_demain_key_value` |
| TTL        | -      | `1 hour`                     |

## Complete Verification

Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take a few hours to complete the verification process (often much faster).

## Troubleshooting

If your domain is not successfully verified, these are some common troubleshooting methods.

<AccordionGroup>
  <Accordion title="Resend shows my domain verification failed.">
    Review the records you added to Gandi to rule out copy and paste errors.
  </Accordion>

  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).
  </Accordion>
</AccordionGroup>


# Hetzner
Source: https://resend.com/docs/knowledge-base/hetzner

Verify your domain on Hetzner with Resend.

## Add Domain to Resend

First, log in to your [Resend Account](https://resend.com/login) and [add a domain](https://resend.com/domains).

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=418dd93c2f2ead0b0d83d1b7c2fb0970" data-og-width="3360" width="3360" data-og-height="2100" height="2100" data-path="images/dashboard-domains-resend-add-domain.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=28a4feab47f2b86c34c7b1314f636f0c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bf121272193472fdd2c882fe4b29ced5 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=950e2318cb41511a6f7105afa50be42c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e5a7d9a4d237a3435e8fffb85c3650f1 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a4944168fa1595f1843c8789944f1ef3 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=17d0c63a766375cab10239e4025c8dac 2500w" />

<Tip>
  It is [best practice to use a
  subdomain](/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain)
  (updates.example.com) instead of the root domain (example.com). This allows
  for proper reputation segmentation based on topics or purpose (e.g.
  transactional and marketing).
</Tip>

## Log in to Hetzner

Log in to your [Hetzner account](https://dns.hetzner.com):

1. Choose your Domain from the `Your Zones` list.
2. Select the `Records` tab to get to the page to manage DNS records.

<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-domains.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=145c6cbd9d047e33dd8daad7b07bff8c" data-og-width="2984" width="2984" data-og-height="1849" height="1849" data-path="images/dashboard-domains-Hetzner-domains.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-domains.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b1dd6db0f84de9b493ea15d3313ff5da 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-domains.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=acbe872539f23beca55a52c75c769f96 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-domains.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=039ce781e54822500280c96d2cb6a015 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-domains.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c3f93dd1a358b4b0246245da7645f067 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-domains.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=fa81adb44768c414cc8705f5a96c6703 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-domains.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ec8850a903520deb211fdaa0dd0849a2 2500w" />

## Add MX SPF Record

In the `Create Record` section on Hetzner copy and paste the values MX from Resend:

1. On the `Type` page, choose `MX`.
2. Type `send` for the `Name` of the record.
3. Select the `Value` field.
4. Use the default `Priority` of `10`.
5. Copy the MX Value from Resend into the `Mail server` field.
6. Select the TTL of `1800`.
7. Select `Add Record`.

<Info>
  Hetzner requires your MX record to have a trailing period when adding. Resend
  will include the trailing period when copying. Removing the period will cause
  the verification to fail.
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bb0db2dd2809135194cfb62b695225cd" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a95639f0752fdbaefd0eae3b93ec6255 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9e579bee139584def82c0a8688466681 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=80c20d31f9598b0f8aeb4b267725b4fe 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f66dc758dec3ac85919063c4bb66f4d5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=187033c1e79e5f6f3b47fa0466def756 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a0531e4d1d25117efaef896d40331e3 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-mx.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=db6f4da36c4e408a86c54ca3e42d6ea9" data-og-width="2984" width="2984" data-og-height="1848" height="1848" data-path="images/dashboard-domains-Hetzner-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-mx.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9f3500e1b465041d87616d751a8714f6 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-mx.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=22bd1875ea3344e07ac1390278d1c52c 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-mx.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ec7fca39828a3be91b0d988ec6e56997 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-mx.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=069767874b22888a024c4c7ddcc57157 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-mx.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=964c5a3df8c67efcc710de95f40d8865 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-mx.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=86816bbb998b9a46ecef897f90964786 2500w" />

Below is a mapping of the record fields from Resend to Hetzner:

| Hetzner     | Resend   | Example Value                            |
| ----------- | -------- | ---------------------------------------- |
| Type        | Type     | `MX Record`                              |
| Name        | Name     | `send`                                   |
| Mail server | Value    | `feedback-smtp.us-east-1.amazonses.com.` |
| TTL         | -        | `1800`                                   |
| Priority    | Priority | `10`                                     |

<Info>
  Do not use the same priority for multiple records. If Priority `10` is already
  in use on another record, try a number slightly higher like `11` or `12`.
</Info>

## Add TXT SPF Record

On the same `Create Record` section:

1. On the `Type` page, choose `TXT`.
2. Type `send` for the `Name` of the record.
3. Copy the TXT Value Resend into the `Value` field.
4. Select the TTL of `1800`.
5. Select `Add Record`.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=747425d0a224baeee2846c9a707d5bbc" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=04f13a4953c918b5ffa05474c6e6190c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fa09e290427c24278edb3306e241e2f0 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4e796dc0356e2176d0dfa9467aa9af8f 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5e27ef23ba82f5fe62d483849c5a8ec5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=991e5fe09e65097107fafe4de36c0bda 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6fd70252df24dce6a9768e38d5c75ae0 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-txt.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=89bce49d989f8a9006f8cf465202a2ca" data-og-width="2986" width="2986" data-og-height="1848" height="1848" data-path="images/dashboard-domains-Hetzner-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-txt.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9b8cbf76a4d4da7245897625da6adcc3 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-txt.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8a4de9180615452171eae02c36151174 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-txt.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a20a13bdd450688f5c92ebef1b1ae4b3 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-txt.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1eae44919f1c2e1389583c6564f4fee9 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-txt.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d21e0b2da4ddcfb7e79ffd198cd359d1 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-spf-txt.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=32e3d8fedcd1c6972a3d277b3f224029 2500w" />

Below is a mapping of the record fields from Resend to Hetzner:

| Hetzner | Resend | Example Value                         |
| ------- | ------ | ------------------------------------- |
| Type    | Type   | `TXT Record`                          |
| Name    | Name   | `send`                                |
| Value   | Value  | `"v=spf1 include:amazonses.com ~all"` |
| TTL     | -      | `10800`                               |

## Add TXT DKIM Records

On the same `Create Record` section:

1. On the `Type` page, choose `TXT`.
2. Type `resend._domainkey` for the `Name` of the record.
3. Copy the TXT Value Resend into the `Value` field.
4. Select the TTL of `1800`.
5. Select `Add Record`.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or
  `resend._domainkey.subdomain` if you're using a subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=345d1dc6b7c138dbd92bd6928c634bd9" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/dashboard-domains-resend-dkim.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=37e5d282deda4e727e9f002cf5b8f0dd 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=978f4a7f13387c0d721acd80a944123c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd473e4cdd467d31c1e2d4a507f5d914 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=784706a47cae7451a0200c461831bc30 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9780d5ff17771270ed33a0176bd7bd55 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=46f59e55a1a791b4a32e13bc49e5f0cd 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-dkim-txt.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3a29ae90720d7d9c31cc7cfa5892cd57" data-og-width="2984" width="2984" data-og-height="1848" height="1848" data-path="images/dashboard-domains-Hetzner-dkim-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-dkim-txt.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c79be8ade8a523b225f6ed7953a5ecb1 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-dkim-txt.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b4847bddef413b0f57d0b55ac348e5e7 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-dkim-txt.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d10467a8782ffab990e77efbcf0f6317 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-dkim-txt.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=251b7397e65b888dc26b5fd721384634 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-dkim-txt.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=19f8f907d69dcc7665816cfc6fa27cdc 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/dashboard-domains-Hetzner-dkim-txt.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e958c09b975347b558b3c570485a08b7 2500w" />

Below is a mapping of the record fields from Resend to Hetzner:

| Hetzner | Resend | Example Value                |
| ------- | ------ | ---------------------------- |
| Type    | Type   | `TXT Record`                 |
| Name    | Name   | `send`                       |
| Value   | Value  | `p=example_demain_key_value` |
| TTL     | -      | `1 hour`                     |

## Complete Verification

Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take a few hours to complete the verification process (often much faster).

## Troubleshooting

If your domain is not successfully verified, these are some common troubleshooting methods.

<AccordionGroup>
  <Accordion title="Resend shows my domain verification failed.">
    Review the records you added to Hetzner to rule out copy and paste errors.
  </Accordion>

  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).
  </Accordion>
</AccordionGroup>


# Hostinger
Source: https://resend.com/docs/knowledge-base/hostinger

Verify your domain on Hostinger with Resend.

## Add Domain to Resend

First, log in to your [Resend Account](https://resend.com/login) and [add a domain](https://resend.com/domains).

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=418dd93c2f2ead0b0d83d1b7c2fb0970" data-og-width="3360" width="3360" data-og-height="2100" height="2100" data-path="images/dashboard-domains-resend-add-domain.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=28a4feab47f2b86c34c7b1314f636f0c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bf121272193472fdd2c882fe4b29ced5 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=950e2318cb41511a6f7105afa50be42c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e5a7d9a4d237a3435e8fffb85c3650f1 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a4944168fa1595f1843c8789944f1ef3 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=17d0c63a766375cab10239e4025c8dac 2500w" />

<Tip>
  It is [best practice to use a
  subdomain](/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain)
  (updates.example.com) instead of the root domain (example.com). This allows
  for proper reputation segmentation based on topics or purpose (e.g.
  transactional and marketing).
</Tip>

## Log in to Hostinger

Log in to your [Hostinger account](https://auth.hostinger.com/login):

1. Select the `Domains` tab
2. Choose your Domain from the `Domain portfolio` list.
3. Select the `DNS / Nameservers` to get to the page to manage DNS records.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-domains.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d7fcfa6f62bc4c8eb8c7eccbc12068c3" data-og-width="2983" width="2983" data-og-height="1848" height="1848" data-path="images/dashboard-domains-hostinger-domains.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-domains.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=42922b010762c4f3b6bc7fa9c6b887b1 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-domains.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3799d276f1994502b533f97da7c98f42 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-domains.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d284dccbb31a44a441e52d845383bbd4 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-domains.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=53581e974864b508da5c127c84f495c6 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-domains.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6d699394a23afc4181dda401fcbd2544 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-domains.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9774143e76ba327c0352da3fc033a196 2500w" />

## Add MX SPF Record

Copy and paste the values MX in Resend to Hostinger.

1. Set the Type to `MX`.
2. Type `send` for the `Name` of the record.
3. Copy the MX Value from Resend into the `Mail Server` field.
4. Add `10` for the `Priority`.
5. Set the TTL to `3600`.
6. Select `Add Record`.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bb0db2dd2809135194cfb62b695225cd" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a95639f0752fdbaefd0eae3b93ec6255 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9e579bee139584def82c0a8688466681 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=80c20d31f9598b0f8aeb4b267725b4fe 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f66dc758dec3ac85919063c4bb66f4d5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=187033c1e79e5f6f3b47fa0466def756 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a0531e4d1d25117efaef896d40331e3 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d9600d2ba927c8ee8a3222139280d396" data-og-width="2984" width="2984" data-og-height="1849" height="1849" data-path="images/dashboard-domains-hostinger-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9c6fbafa2370231a9fe754c413f9d034 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a58ed744a5aaf6b702373396c2c4ebb1 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=1ff25d2c3794b514903f748d58b589fa 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8041cbc7155fb88ea3a7ff64d37e75d6 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a947eada3bfcd86bb0774dab7ac5563d 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b1c65f01a55b3424558c61eaac2c1f7d 2500w" />

Below is a mapping of the record fields from Resend to Hostinger:

| Hostinger   | Resend   | Example Value                           |
| ----------- | -------- | --------------------------------------- |
| Type        | Type     | `MX Record`                             |
| Name        | Name     | `send`                                  |
| Mail Server | Value    | `feedback-smtp.us-east-1.amazonses.com` |
| TTL         | -        | `Set to 3660`                           |
| Priority    | Priority | `10`                                    |

<Info>
  Do not use the same priority for multiple records. If Priority `10` is already
  in use on another record, try a number slightly higher like `11` or `12`.
</Info>

## Add TXT SPF Record

In the same section, add another record in Hostinger.

1. Set the Type to `TXT`.
2. Type `send` for the `Name` of the record.
3. Copy the TXT Value Resend into the `TXT value` field.
4. Set the TTL to `3600`.
5. Select `Add Record`.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=747425d0a224baeee2846c9a707d5bbc" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=04f13a4953c918b5ffa05474c6e6190c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fa09e290427c24278edb3306e241e2f0 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4e796dc0356e2176d0dfa9467aa9af8f 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5e27ef23ba82f5fe62d483849c5a8ec5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=991e5fe09e65097107fafe4de36c0bda 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6fd70252df24dce6a9768e38d5c75ae0 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8854129a0f11574f79016d5ad56a0ed2" data-og-width="2985" width="2985" data-og-height="1848" height="1848" data-path="images/dashboard-domains-hostinger-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cb9b47019b7c4b65239afdf02773ed77 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=71ef6eb98429bc7c183c530426c4792e 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f152e06618c8f27b259b76898b6bc027 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b2d186d8d5b2d846ace569bb264b85b7 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3e202d12e04d96cf0143548a39cd2fb5 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4b9a15c02924b6e7144323ae8ebf5ac1 2500w" />

Below is a mapping of the record fields from Resend to Hostinger:

| Hostinger | Resend | Example Value                         |
| --------- | ------ | ------------------------------------- |
| Type      | Type   | `TXT Record`                          |
| Name      | Name   | `send`                                |
| TXT value | Value  | `"v=spf1 include:amazonses.com ~all"` |
| TTL       | -      | `Set to 3600`                         |

## Add TXT DKIM Records

In the same section, add another record in Hostinger.

1. Set the Type to `TXT`.
2. Type `resend._domainkey` for the `Name` of the record.
3. Copy the record value from Resend into the `TXT value` field.
4. Set the TTL to `3600`.
5. Select `Add Record`.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or
  `resend._domainkey.subdomain` if you're using a subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=345d1dc6b7c138dbd92bd6928c634bd9" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/dashboard-domains-resend-dkim.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=37e5d282deda4e727e9f002cf5b8f0dd 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=978f4a7f13387c0d721acd80a944123c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd473e4cdd467d31c1e2d4a507f5d914 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=784706a47cae7451a0200c461831bc30 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9780d5ff17771270ed33a0176bd7bd55 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=46f59e55a1a791b4a32e13bc49e5f0cd 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-dkim-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=31350bb523d1959c348a0fde5f8d5734" data-og-width="2984" width="2984" data-og-height="1848" height="1848" data-path="images/dashboard-domains-hostinger-dkim-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-dkim-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4dad2da32e35e7a727077447aa9838ca 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-dkim-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9a67618054c354f65519db52f96dfaf6 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-dkim-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2facef63a7248ff778690971032eabcd 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-dkim-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a289d55386ed613ef210b3a48c9fca88 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-dkim-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=426dda85472f75bd4985fa6c038d4da0 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-hostinger-dkim-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=548c0537b3491028d6f40a330c622022 2500w" />

Below is a mapping of the record fields from Resend to Hostinger:

| Hostinger | Resend | Example Value                |
| --------- | ------ | ---------------------------- |
| Type      | Type   | `TXT Record`                 |
| Name      | Name   | `send`                       |
| TXT value | Value  | `p=example_demain_key_value` |
| TTL       | -      | `Set to 3600`                |

## Complete Verification

Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take a few hours to complete the verification process (often much faster).

## Troubleshooting

If your domain is not successfully verified, these are some common troubleshooting methods.

<AccordionGroup>
  <Accordion title="Resend shows my domain verification failed.">
    Review the records you added to Hostinger to rule out copy and paste errors.
  </Accordion>

  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).
  </Accordion>
</AccordionGroup>


# How can I delete my Resend account?
Source: https://resend.com/docs/knowledge-base/how-can-i-delete-my-resend-account

How to request your Resend account and data to be deleted.

To delete your Resend account:

1. [Leave the team](/dashboard/settings/team#leave-your-resend-team) associated with your Resend account.
2. Select the **Delete account** button.

Upon confirmation, Resend will delete your account and all account data.

<Warning>
  Please note that this action is not reversible, so please proceed with
  caution.
</Warning>


# How can I delete my Resend team?
Source: https://resend.com/docs/knowledge-base/how-can-i-delete-my-team

How to request your Resend team and team data to be deleted.

To request your Resend team and team data to be deleted:

1. Navigate to your [**Team Settings**](https://resend.com/settings/team).
2. Select the **Delete Team** button.

Upon confirmation, Resend will delete your team and all your team data.

<Warning>
  Please note that this action is not reversible, so please proceed with
  caution.
</Warning>


# Can I receive emails with Resend?
Source: https://resend.com/docs/knowledge-base/how-can-i-receive-emails-with-resend

Receiving emails is in early access.

We're currently working on inbound email, [sign-up to join our early access waitlist](https://resend.com/inbound). The key components of this feature will include:

* Receive emails using webhooks. Get notified when emails are received.
* Parse content and attachments. Extract and process email data automatically.
* Reply to your users. Respond directly to incoming messages.

While this feature is in early access, you can still [set a Reply To Address](api-reference/emails/send-email) (`reply_to`) on your outbound emails to direct any responses to a different location like an existing inbox, slack channel, etc.

Here are a few current workarounds that could help:

* **Sending to existing inbox**: You could set the `reply_to` as your personal email address. If any recipient replies to your email, it will be sent to the `reply_to` address. This could be a different address on the same domain, or a different domain entirely.
* **Sending to Slack**: You could set the `reply_to` as a [channel email address in Slack](https://slack.com/help/articles/206819278-Send-emails-to-Slack). This will create a new message in slack with the contents of the reply.


# How do Dedicated IPs work?
Source: https://resend.com/docs/knowledge-base/how-do-dedicated-ips-work

When are Dedicated IPs helpful, and how can they be requested.

## What is a Dedicated IP?

In email delivery, the sending IP address serves as a key identifier. Inbox Providers like Gmail track the reputation of these IPs based on the quality and quantity of emails sent from them, factoring this information into filtering and inbox placement decisions.

By default, all Resend users utilize our shared IPs, which are a collection of IPs shared across many senders. Optionally, you can purchase a dedicated IP pool so a range of IPs are exclusively assigned to your sending.

Resend goes one step further and exclusively provisions "Managed Dedicated IP Pools". These managed pools handle multiple delicate and time consuming aspects of dedicated IPs:

* **Automatic warmup**: New IPs have no reputation and are therefore under scrutiny by inbox providers. We carefully migrate your sending over from the shared pool to your dedicated pool.
* **Automatic scaling**: IPs can only send at a certain rate based on the specifications of each inbox provider. We scale your pool dynamically based on the inbox provider feedback, without you lifting a finger.
* **Continuous monitoring**: Resend continuously monitors the reputation and performance of your dedicated IPs.
* **Fully dedicated**: You can segregate your emails from sending on shared pools to reduce risk of "noisy neighbors".

<Note>
  Resend only provisions Managed Dedicated IP Pools, but we will refer to them
  as **Dedicated IPs** in this article to be succinct.
</Note>

## When are Dedicated IPs helpful?

Historically, Dedicated IPs were seen as the primary ingredient to great deliverability. This is not true anymore as Inbox Providers have incorporated dozens of other factors like sending history, domain reputation, and sending feedback (bounces and complaints) more predominantly than IP reputation.

Though Dedicated IPs are not a deliverability silver bullet, they maintain a very helpful benefit: **removing risk of noisy neighbors**.

There is power in numbers, and for many senders it can be very helpful to leverage the positive reputation of other senders in an IP pool. For some senders though, they want to maintain their own IP reputation without any chance of being impacted, positively or negatively, by other senders. For them, Dedicated IPs are a helpful solution.

## When are Dedicated IPs not helpful?

Dedicated IPs can be very helpful, but there are some situations where they can actually hinder your ability to reach the inbox. If any of these situations match your use case, Dedicated IPs may hinder more than help:

* **Low email volume**: Sending less than 30k emails a month may not be enough to keep the IPs warm.
* **Inconsistent sending**: Sudden changes in email volume can hurt your IP reputation.
* **Poor email practices**: A Dedicated IP simply exposes your sending behavior even more.
* **New sender**: If you're just starting out and have no sending history.
* **IP Allowlisting**: Resend does not expose the IPs included in your dedicated pool.

## How does IP warmup work?

With Resend's Managed Dedicated IP Pools, the warmup process is handled automatically:

1. **Automatic scaling**: Add or remove IP addresses based on your sending volume.
2. **Gradual increase**: Gradually increase the volume of emails sent through new IPs over time.
3. **Traffic distribution**: During warmup, traffic is distributed across shared and dedicated IPs.
4. **Reputation monitoring**: Continuously monitor the reputation of your dedicated IPs.
5. **Adaptive warmup**: Adapt the warmup process to your sending patterns.

Often IP warmup is a highly manual process and requires great care if you don't want a deliverability degradation in the process. With this automatic warmup process, we handle that for you so you can simply focus on sending.

<Note>
  Because Managed Dedicated IP Pools are dynamically scaled, **we do not expose
  the list of IPs** in your dedicated pool.
</Note>

## Requirements for a Dedicated IP

Before we can provision a Dedicated IP, **we require** that:

* Your domains are in the same region (Dedicated IPs are provisioned per region).
* Your sending volume exceeds 500 emails sent per day.
* You already have an active Transactional Scale or Marketing Pro subscription.
* All domains you want added to the Dedicated IP are already verified on Resend.

## How to request a Dedicated IP

You can request a Dedicated IP by [chatting with support](https://resend.com/help).

**We will request the following information**:

* What types of emails are you sending?
* How many emails are you sending per day and month on average?
* Is your sending consistent every day, or do you send in bursts?
* Which domains do you want included in your Dedicated IP?


# How do I avoid conflicts with my MX records?
Source: https://resend.com/docs/knowledge-base/how-do-i-avoid-conflicting-with-my-mx-records

Learn how to avoid conflicts with your existing MX records when setting up a Resend domain.

## What is an MX record?

MX (Mail Exchanger) records specify where incoming mail should be delivered on behalf of a domain. Every MX value has a unique priority (also known as preference) value. The lower the number, the higher the priority.

Resend requires that you setup an MX record on send.yourdomain.com to establish a return-path for bounce/complaint reports from Inbox Providers. We set this return path in the email headers of every email you send through Resend.

## Won't this conflict with my existing Inbox Provider?

Let's look at an example. Say you're using G Suite for your email. You'll have an MX record that looks something like this:

```
resend.com     MX    1 alt3.aspmx.l.google.com.
```

The records specifies that incoming mail to any address on the `@resend.com` domain should be delivered to the google servers.

Now, let's say you want to use Resend to send emails from `@yourdomain.com`. You'll need to add an MX record for `send.yourdomain.com` that looks something like this:

```
send.yourdomain.com     MX    10 feedback-smtp.us-east-1.amazonses.com
```

Two things to note here:

* **The MX record is for `send.yourdomain.com`, not `yourdomain.com`**. MX records only impact the subdomain they are associated to, so the Resend MX record will not affect your existing records on the root domain.
* **The priority value is 10**. Though we suggest a priority of 10, this can be changed to lower or higher as needed to avoid conflicts.

## Solving common conflicts

<AccordionGroup>
  <Accordion title="Conflicts with existing records">
    If you already have a MX record set for `send.yourdomain.com`, you will need to remove it before adding the Resend MX record.

    If you need to keep the existing record, you can add a subdomain to your domain (e.g. `sub.yourdomain.com`) which will move the Resend MX location to `send.sub.yourdomain.com`.
  </Accordion>

  <Accordion title="Conflicts with existing priority">
    Each MX should have a unique priority value. We suggest using 10 for your MX record on `send.yourdomain.com`, but you can use a higher number if 10 is already in use.
  </Accordion>
</AccordionGroup>


# How do I avoid Gmail's spam folder?
Source: https://resend.com/docs/knowledge-base/how-do-i-avoid-gmails-spam-folder

Learn how to improve inbox placement in Gmail.

<Note>
  This guide is adapted from Google's article to [Prevent mail from being
  blocked or sent to
  spam](https://support.google.com/mail/answer/81126?hl=en\&vid=1-635789122382665739-3305764358\&sjid=4594872399309427672-NA#thirdparty)
</Note>

## Authenticate Your Email

All communication is built on trust, and email is no different. When you send an email, you want to be sure that the recipient (and Gmail) knows who you are and that you are a legitimate sender. Email authentication is a way to prove that an email is really from you. It also helps to prevent your email from being spoofed or forged.

| Authentication                    | Requires Setup | Purpose                                                      |
| --------------------------------- | -------------- | ------------------------------------------------------------ |
| **SPF**                           | No             | Proves you are allowed to send from this domain              |
| **DKIM**                          | No             | Proves your email originated from you                        |
| [DMARC](/dashboard/domains/dmarc) | Yes            | Proves you own the domain and instructs how to handle spoofs |
| [BIMI](/dashboard/domains/bimi)   | Yes            | Proves you are the brand you say you are                     |

**SPF** and **DKIM** are baseline requirements for all sending which is why both are automatically setup when you verify your domain with Resend. [DMARC](/dashboard/domains/dmarc) and [BIMI](/dashboard/domains/bimi) are both additional authentication methods that can build trust and further improve inbox placement.

**Action Items**

1. [Setup DMARC](/dashboard/domains/dmarc) for your domain
2. [Setup BIMI](/dashboard/domains/bimi) for your domain

## Legitimize Your Domain

Gmail is using many methods to identify who you are as a sender, and one way they do that is by looking at your domain. You should make sure that the domain you send with is the same domain where your website is hosted. If you send from `@example.com` but your website is hosted at `example.net`, Gmail won't be able to use your site to help legitimize you.

You can regularly check if your domain is listed as unsafe with [Google Safe Browsing](https://transparencyreport.google.com/safe-browsing/search?hl=en) to make sure Google isn't classifying your domain as suspicious.

**Action Items**

1. Host your website at the domain that you send from (especially for new domains)
2. Check if your domain is listed as unsafe with [Google Safe Browsing](https://transparencyreport.google.com/safe-browsing/search?hl=en)

## Manage your Mailing List

Gmail monitors your sending across all Gmail inboxes to see if recipients want to receive your emails. This is mainly measured by their engagement with your messages (opens, clicks, replies). If Gmail doesn't see this engagement, they will start to move your inbox placement towards promotional or even spam.

It would seem like adding open and click tracking would be ideal to gather this information, but this has been seen to negatively impact your inbox placement. Instead, focus on sending to recipients who want to receive your emails.

**Prevent sending to recipients who**:

* Didn't ask to be sent to (opt-in)
* Show no signs of engagement with your emails or product
* Requested to be unsubscribed
* Marked your emails as spam (complained)
* Never received your email (bounced)

**Action Items**

1. Make it easy to opt-out to your emails (including the [Unsubscribe Headers](https://resend.com/docs/dashboard/emails/add-unsubscribe-to-transactional-emails))
2. Use [Webhooks](/dashboard/webhooks/introduction) to remove bounced or complained recipients from your list
3. Use [Gmail's Postmaster Tool](https://support.google.com/mail/answer/9981691?sjid=4594872399309427672-NA\&visit_id=638259770782293948-1913697299\&rd=1) to monitor your spam reports

## Monitor Affiliate Marketers

Affiliate marketing programs offer rewards to companies or individuals that send visitors to your website. However, spammers can take advantage of these programs. If your brand is associated with marketing spam, other messages sent by you might be marked as spam.

We recommend you regularly monitor affiliates, and remove any affiliates that send spam.

**Action Items**

1. Monitor your affiliate marketers for any spam

## Make Content People Want to Read

Trust is not only built with the domain, but also in the message. Sending content that people want to read and that is not misleading will help build trust with Gmail.

A few good rules for content:

* Less is more (keep it simple and to the point)
* Plain text over complex HTML
* Links should be visible and match the sending domain
* No content should be hidden or manipulative

**Action Items**

1. Reduce and simplify your email content
2. Make sure your links are using your sending domain

## Establish Sending Patterns

This is especially true for new domains since Gmail doesn't have any history of trust. Sending a large volume of emails from a new domain will likely result in poor inbox placement. Instead, start small and build up your sending volume over time.

A great way to start is by sending regular person-to-person email with your gmail account. These messages will have high engagement and built trust quickly, which will carry over when you start integrating with a sending service like Resend.

It can also be very helpful to segment your sending by sending address to give Gmail more indication of what type of sending you are doing. This allows Gmail to place your emails in the correct inbox tab (Primary, Promotions, etc.).

Some examples of helpful email addresses:

* **Personal emails** should come from an address with a name like [marissa@domain.com](mailto:marissa@domain.com)
* **Transactional emails** should come from an address like [notifications@domain.com](mailto:notifications@domain.com)
* **Marketing emails** should come from an address like [updates@domain.com](mailto:updates@domain.com).

**Action Items**

1. Send emails from your gmail account before sending transactional
2. Send transactional emails before sending marketing emails
3. Choose dedicated sending addresses for each type of email

## Summary

Email deliverability is overwhelming. One way to simplify it is to think: **what would a phisher do?**

**Then do the opposite!**

Gmail's goal is to only show emails that their users want to see and malicious emails are at the very bottom of the list. Reverse engineer phishing sending habits and consider how you could prove to Gmail at each step that you clearly have no malicious intent.

<Info>Anything we missed? [Let us know](https://resend.com/help).</Info>


# How do I avoid Outlook's spam folder?
Source: https://resend.com/docs/knowledge-base/how-do-i-avoid-outlooks-spam-folder

Learn how to improve inbox placement in Outlook.

<Note>
  This guide is adapted from Microsoft's article to [Improve your spam
  reputation](https://support.microsoft.com/en-us/office/sender-support-in-outlook-com-05875e8d-1950-4d89-a5c3-adc355d0d652)
</Note>

* **Add your sender name**. Set your `from` like this: `"Name <name.domain.com>"`.

* **Engage with your own email**. Send an email to yourself, open it, and reply to it.

* **Add yourself as a contact**. See how to add contacts in [Outlook.com](https://support.microsoft.com/en-us/office/create-view-and-edit-contacts-and-contact-lists-in-outlook-com-5b909158-036e-4820-92f7-2a27f57b9f01).

* **Ask your recipients to add you in their contacts**. This can be done in [Outlook](https://support.microsoft.com/en-us/office/add-recipients-of-my-email-messages-to-the-safe-senders-list-be1baea0-beab-4a30-b968-9004332336ce) or [outlook.com](https://support.microsoft.com/en-us/office/safe-senders-in-outlook-com-470d4ee6-e3b6-402b-8cd9-a6f00eda7339).

* **Don't blast to a BCC list**. Send separate emails if you are sending to a large number of recipients.

* **Prevent over sending**. Limits are impacted on historical engagements and sending volumes, but you should be hesitent to send too many emails at once. If you think this is an issue, reduce the frequency or volume.

* **Send to engaged recipients**. Don't keep sending if there is no engagement from your recipients. This is especially true if a recipient has requested to unsubscribe or an address is bouncing.

* **Limit use of HTML**. Keep emails as close to plain text as possible.


# How do I ensure sensitive data isn't stored on Resend?
Source: https://resend.com/docs/knowledge-base/how-do-i-ensure-sensitive-data-isnt-stored-on-resend

Information on how we can help you protect your customer's information.

Resend can turn off message content storage for teams with additional compliance requirements. This is available to customers who meet the following criteria:

1. The team has been a Resend Pro or Scale subscriber for at least 1 month.
2. The team is sending from a domain with an active website.
3. The team has sent over 3,000 emails with a \< 5% bounce rate.

This feature requires a \$50/mo add-on. If your account meets these requirements and you would like this turned on, contact our support team for help.


# How do I fix CORS issues?
Source: https://resend.com/docs/knowledge-base/how-do-i-fix-cors-issues

Information on recommended options to avoid CORS errors when sending emails.

## Problem

It's common for people to hit CORS (Cross-Origin Resource Sharing) issues when using the Resend API. This error typically shows as:

```
Access to XMLHttpRequest at 'https://api.resend.com/emails'
from origin 'http://localhost:3000' has been blocked by CORS policy:
Response to preflight request doesn't pass access control check:
No 'Access-Control-Allow-Origin' header is present on the requested resource.
```

## Solution

Usually CORS errors happens when you're sending emails from the **client-side**.

We recommend you to send the emails on the **server-side** to not expose your API keys and avoid CORS issues.


# How do I maximize deliverability for Supabase Auth emails?
Source: https://resend.com/docs/knowledge-base/how-do-i-maximize-deliverability-for-supabase-auth-emails

Everything you should do before you start sending authentication emails with Resend and Supabase.

export const YouTube = ({id}) => {
  return <iframe className="w-full aspect-video rounded-xl" src={`https://www.youtube.com/embed/${id}`} title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen></iframe>;
};

<Note>
  If you haven't yet, [configure your own Supabase
  integration](https://resend.com/settings/integrations)!
</Note>

Below are **five steps to improve the deliverability of your authentication emails**.

Prefer watching a video? Check out our video walkthrough below.

<YouTube id="51vzcGEmjRI" />

## 1. Setup a custom domain on Supabase

By default, Supabase generates a `supabase.co` domain for your project, and uses that domain for the links in your authentication emails (e.g., verify email, reset password).

Once you are ready to go live, though, it is important to setup a custom domain. The key benefit here is to align the domains used in your `from` address and the links in your emails. Especially for something as sensitive as email verification and magic links, **giving confidence to the inbox providers that the origin of the email and the links in the body are the same** can be very impactful.

This changes your links from:

```
https://039357829384.supabase.co/auth/v1/{code}
```

To something like this:

```
https://auth.yourdomain.com/auth/v1/{code}
```

Supabase has a helpful guide for [Setting up a custom domain](https://supabase.com/docs/guides/platform/custom-domains).

## 2. Setup a dedicated subdomain

There are many benefits to using a subdomain vs your root domain for sending, one being that you can isolate the reputation of the subdomain from your root domain.

For authentication emails, using a subdomain is particularly helpful because it is a way to **signal your intention to the inbox provider**. For example, if you use `auth.yourdomain.com` for your authentication emails, you are communicating to the inbox provider that all emails from this subdomain are related to sending authentication emails.

This clarity is essential because it helps the inbox provider understand that this subdomain is not used for sending marketing emails, which are more likely to be marked as spam.

<Note>
  If you don't want a subdomain just for auth, you can also achieve this by
  establishing one subdomain for all your transactional emails (e.g.,
  `notifications.yourdomain.com`).
</Note>

To add a subdomain to Resend, you can [add it as a domain on the dashboard](https://resend.com/domains).

<img alt="Create auth subdomain" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-create-auth-subdomain.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3d0629c74757298069867f0019e69a90" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/kb-create-auth-subdomain.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-create-auth-subdomain.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0cf05912a6970427692bd9ed030d98cb 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-create-auth-subdomain.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1c9e26479ea82534a819897044b40f45 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-create-auth-subdomain.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=3da6b1d836979372ae4f2b9b39ec3c5b 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-create-auth-subdomain.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c147e739d844cc20c2fc9a1ca8f599f8 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-create-auth-subdomain.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=43daf8479539ec7776173ec98c3f72fe 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-create-auth-subdomain.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=79408b7562dbc19b18508f6590cb990b 2500w" />

## 3. Disable link and open tracking

Link and open tracking can be great for marketing emails but not for transactional emails. This kind of **tracking can actually hurt your deliverability**. Open tracking embeds a 1x1 pixel image in the email, and link tracking rewrites the links in the email to point to Resend's servers first. Both types can be seen as suspicious by the inbox provider and hurt your deliverability.

Also, Supabase has noted that link tracking is [known for corrupting verification links](https://supabase.com/docs/guides/platform/going-into-prod), making them unusable for your users.

You can disable link and open tracking by clicking on your domain and disabling at the bottom.

<img alt="Disable link and open tracking" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-disable-tracking.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1deeae548895ad4047ca7283faad95c6" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/kb-disable-tracking.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-disable-tracking.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=720f858d9a4b8fd9f5ecb36d85542d66 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-disable-tracking.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=172505a2c9bcd1857b655c2f07e817b6 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-disable-tracking.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ccb950b486157629a0fd1d28e7f44ea3 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-disable-tracking.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=440a144d6c75a566251d75e28d8083f6 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-disable-tracking.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ac51dd92caa9b79c8f0c805a7335511a 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-disable-tracking.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=29d1ec433ae73b2b6f46f609764dbf55 2500w" />

## 4. Prepare for link scanners

Some inbox providers or enterprise systems have email scanners that run a `GET` request on all links in the body of the email. This type of scan can be problematic since Supabase Auth links are single-use.

To get around this problem, consider altering the email template to replace the original magic link with a link to a domain you control. The domain can present the user with a "Sign-in" button, which redirects the user to the original magic link URL when clicked.

## 5. Setup DMARC

Like our human relationships, email deliverability is built on trust. The more inboxes can trust your emails, your domain, and your sending, the more likely your emails will be delivered to the inbox. This makes [Email Authentication a critical pillar](https://resend.com/blog/email-authentication-a-developers-guide) in the journey to excellent deliverability.

That is where DMARC comes in. As the industry standard for email authentication, **DMARC is a way to tell the inbox provider that you are who you say you are**. It is a way to signal to the inbox provider that you are a legitimate sender and that your emails should be delivered to the inbox.

Following security best practices like DMARC will show your validity and authenticity.

<img alt="DMARC policy details" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-dmarc.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2b853e7501c2863ddd2ded6de271e0b6" data-og-width="2980" width="2980" data-og-height="2040" height="2040" data-path="images/kb-dmarc.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-dmarc.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1617ba218838af4146c39f0b3e488933 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-dmarc.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=6f531ccebea71e50dac30a6d13f4dc1b 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-dmarc.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=6056e9bf254033b63ec550915412c94a 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-dmarc.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=4dccca9f083cd3d550772fb52244e3e4 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-dmarc.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=40aaf8a282ddca464ebd302ed86e6441 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/kb-dmarc.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=14788176851801b3b558ab8e8d260640 2500w" />

You can use our [DMARC setup guide to get started](/dashboard/domains/dmarc).


# How do I send with an avatar?
Source: https://resend.com/docs/knowledge-base/how-do-i-send-with-an-avatar

Learn how to show your avatar in the inbox of your recipients.

[Recent studies](https://www.businesswire.com/news/home/20210720005361/en/Red-Sift-and-Entrust-Survey-Showing-a-Logo-Positively-Affects-Consumer-Interaction-With-Emails-Open-Rates-Buying-Behavior-Brand-Recall-and-Confidence) are showing meaningful benefits of displaying your logo in the inbox:

* Increases brand recall by 18%.
* Improves open rate by 21%.
* Boosts purchase likelihood by 34%.
* Reinforces confidence in email by 90%.

<img src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/sender-avatar.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=af9242870f3967aaed057cb3f5f44c20" alt="Email with an avatar" data-og-width="1368" width="1368" data-og-height="488" height="488" data-path="images/sender-avatar.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/sender-avatar.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1dcd39e3ebc7531e111b5cf5709f1340 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/sender-avatar.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1d546e1fa865b2c35713be0c1389d874 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/sender-avatar.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=fe68181b1683d81c1b3175a786eba824 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/sender-avatar.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=79c76dbfc12b528269531314664db6b1 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/sender-avatar.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2b2f074210f35d333be8fc4382443ce9 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/sender-avatar.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=91604e15eb46719648227d360d49864d 2500w" />

## Gmail

Follow these steps to add an avatar to your Gmail inbox:

1. Go to your [Google Account Settings](https://myaccount.google.com/personal-info)
2. Upload a profile picture

Avatars in Gmail only display in the mobile app (including in push notifications) and inside opened emails on desktop.

## Outlook

Follow these steps to add an avatar to your Outlook inbox:

1. Go to your [Outlook Profile Settings](https://account.microsoft.com/profile/)
2. Upload a profile picture

Avatars in Outlook only display in the mobile app and inside opened emails on desktop.

## Yahoo

Follow these steps to add an avatar to your Yahoo inbox:

1. Go to your [Yahoo Account Setting](https://login.yahoo.com/account/personalinfo)
2. Upload a profile picture

Avatars in Yahoo only display in the mobile app and inside an opened email on desktop.

## Apple Mail

Apple Mail only shows avatars if recipients have added images to contacts. Alternatively, you can set up [Apple Branded Mail](/knowledge-base/how-do-i-set-set-up-apple-branded-mail), a proprietary Apple format that displays your logo as an avatar in the inbox of Apple Mail, or [set up BIMI](/dashboard/domains/bimi#what-is-bimi) with a Verified Mark Certificate (Apple Mail does not support CMC).

## Using Gravatar

Some inbox service providers or email clients (e.g. Thunderbird, Airmail, and Postbox) rely on [Gravatar](https://gravatar.com/) to display an image.

You can set up a free Gravatar account, add your avatar, and verify your addresses you're sending from to that account to have your avatar displayed.

## Limitations

Almost every email provider has its own way of adding a profile picture to an inbox.

This means **you can only**:

1. Add your avatar to a real inbox, limiting it only to that provider
2. Send mail from the same address that you set the avatar on

The way around this is [BIMI (Brand Indicators for Message Identification)](/dashboard/domains/bimi). It is much more difficult to obtain, but supports by nearly all providers and allows you to send from any address on that domain.

<Note>
  Need assistance setting up BIMI? [We can help](https://resend.com/help).
</Note>


# How do I set up Apple Branded Mail?
Source: https://resend.com/docs/knowledge-base/how-do-i-set-set-up-apple-branded-mail

Learn how to implement Apple Branded Mail to display your logo in Apple Mail clients.

export const YouTube = ({id}) => {
  return <iframe className="w-full aspect-video rounded-xl" src={`https://www.youtube.com/embed/${id}`} title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen></iframe>;
};

## Prerequisites

To get the most out of this guide, you will need to:

* [Create an Apple Business Connect account](https://www.apple.com/business/connect/)
* [Setup DMARC on your domain](/dashboard/domains/dmarc)
* A company identification number for Apple to verify your company

Prefer watching a video? Check out our video walkthrough below.

<YouTube id="zLDRvWVPqxk" />

## What is Apple Branded Mail?

Apple Branded Mail is a proprietary Apple format that displays your logo as an avatar in the inbox of Apple Mail. Displaying your logo can increase brand recognition and trust and improve engagement.

There are a few benefits of Apple Branded mail over BIMI:

* Since it's an Apple format, it does not require a certificate like [BIMI does](/dashboard/domains/bimi).
* The image support is broader, supporting `.png`, `.heif`, and `.jpg` logos.

Since Apple Branded Mail works only with Apple Mail on new iOS, iPadOS, and macOS versions, your logo will not show in other mail clients or older versions of Apple Mail.

For this reason, we recommend following all possible methods for adding your logo to your emails, including Apple Branded Mail, [our general guide](/knowledge-base/how-do-i-send-with-an-avatar), and [BIMI](/dashboard/domains/bimi) if it fits your needs.

## Implementing Apple Branded Mail

### 1. Configure DMARC

<Note>
  If you haven't set up DMARC yet, follow our [DMARC Setup
  Guide](/dashboard/domains/dmarc).
</Note>

To ensure your logo appears with Apple Branded Mail, set your DMARC policy to either `p=quarantine;` or `p=reject;`. This policy guarantees that your emails are authenticated and prevents others from spoofing your domain and sending emails with your logo.

Here's an overview of the required parameters:

| Parameter | Purpose    | Required Value                 |
| --------- | ---------- | ------------------------------ |
| `p`       | Policy     | `p=quarantine;` or `p=reject;` |
| `pct`     | Percentage | `pct=100;`                     |

Here is an example of an adequate DMARC record:

```
"v=DMARC1; p=quarantine; pct=100; rua=mailto:dmarcreports@example.com"
```

As we mention in our [DMARC Setup Guide](/dashboard/domains/dmarc), be sure to test your emails to make sure they are passing DMARC before changing your DMARC policy to `p=quarantine;` or `p=reject;`.

### 2. Create an Apple Business Connect account

Apple displays the logo you set in your Business Connect account. [Create an account](https://www.apple.com/business/connect/) if your company does not already have one. Make sure to use your company details when signing up.

### 3. Add your company details

Apple will prompt you to provide details like your company address and name.

### 4. Add your brand details

Once your company account is created, in Apple Business Connect, select the **Branded Mail** option in the left sidebar and provide details on your brand. Add details like the brand name and your brand website.

<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-1.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8348f2b44a70bfb6c4e065046a7443dd" alt="Add your brand details" data-og-width="3412" width="3412" data-og-height="1884" height="1884" data-path="images/abm-step-4-add-brand-details-1.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-1.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8f128d72a6c163a6b6b2af632cec92f6 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-1.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7dd0a8dc2e6135595270f4a19f0b370f 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-1.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5fbf82fed28982b58428a4b961c727f7 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-1.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=df7d16dcfdc469fdae4405ee44b90512 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-1.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=354cb4793cbec4dc66eae73d53426714 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-1.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=51987608cca6dfb16dec5509c623f506 2500w" />

<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-2.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=8ae25d711442f1f38620bd0aa1996fee" alt="Add your brand details" data-og-width="3412" width="3412" data-og-height="1884" height="1884" data-path="images/abm-step-4-add-brand-details-2.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-2.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=272097166b079d7617786cfd5f272b4b 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-2.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6c902c656546c0368bec47ee9ed2eece 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-2.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=23057844522b36426468d1f9b4aae83b 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-2.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=07b2438027f3c17dba6ef4d0f7c7aecb 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-2.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=761ee931793dbf2567d9484bc66acc60 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-4-add-brand-details-2.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ee469b8134f2b471edbbcd469297e4f1 2500w" />

### 5. Add your logo

Once you fill out the brand details, upload your logo. Apple requires the logo to be at least 1024 x 1024 px in a `.png`, `.heif`, or `.jpeg` format.

<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-5-add-your-logo.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=325d6466f5c237cd8c478eba3ac746d5" alt="Add your logo" data-og-width="3412" width="3412" data-og-height="1884" height="1884" data-path="images/abm-step-5-add-your-logo.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-5-add-your-logo.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2bc479f38855f2bed9a87652f3a16786 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-5-add-your-logo.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=92a18a3ff5cf66aa50abfd6a3b8e70ef 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-5-add-your-logo.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=9570d8fd257e807cf0ca3b96b4cf87ed 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-5-add-your-logo.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=80d628ba93763f56b006bd79012c974f 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-5-add-your-logo.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e41fc8c5477df3ace2eddb5fe589c72a 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-5-add-your-logo.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=805b9a1cccba9b37bfdb745a32a79c25 2500w" />

### 6. Add your domain

Confirm the domains or email addresses where you want your brand logo to appear.

You can register your logo for your root domain or a subdomain. If you don't set a specific logo for a subdomain, the root domain logo will automatically display for any email sent from your subdomains.

### 7. Verify your company

Apple requires details to confirm your company identity.

If you're in the United States, provide a Federal Taxpayer Identification Number. Other countries will use a local equivalent for this step. Apple also asks that you add a DNS record to verify DNS access.

### 8. Verify with Apple

After you submit all your information, Apple will verify your details. This process may take up to seven business days.

Once the logo is verified, Apple will send an email notification and note the verified status in Branded Mail. Your logo will start to display in compatible Apple Mail versions.

<img src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-8-verify-with-apple.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=be541896283e84398a893013095e7f40" alt="Verified logo" data-og-width="3412" width="3412" data-og-height="1884" height="1884" data-path="images/abm-step-8-verify-with-apple.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-8-verify-with-apple.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=f7a889139327b05a41d28a7f3ca0fd42 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-8-verify-with-apple.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c526f7ef1f4bbd65cf21622d007061ca 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-8-verify-with-apple.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5a147c360b73dd6b15b1698e29aa0306 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-8-verify-with-apple.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c86ee74b7178690e4c5b22a5ddb9dbc1 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-8-verify-with-apple.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7decb3aa50b7fe8821eaef783e6e1bb2 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/abm-step-8-verify-with-apple.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=42bbe9553e4577991c8c9e550abd127b 2500w" />

<Tip>
  See Apple's documentation on [Apple Branded
  Mail](https://support.apple.com/en-au/guide/apple-business-connect/abcb761b19d2/web)
  for any detailed questions on adding your logo.
</Tip>


# How to Handle API Keys
Source: https://resend.com/docs/knowledge-base/how-to-handle-api-keys

Learn our suggested practices for handling API keys.

API Keys are secret tokens used to authenticate your requests. They are unique to your account and should be kept confidential. You can create API keys in two ways:

* [via the Resend Dashboard](/dashboard/api-keys/introduction)
* [via the API](/api-reference/api-keys/create-api-key)

<Info>
  For more help creating, deleting, and managing API keys, see the [API Keys
  documentation](/dashboard/api-keys/introduction).
</Info>

## Best Practices

It's crucial you handle your API keys securely. Do not share your API key with others or expose it in the browser or other client-side code.

Here are some general guidelines:

* Store API keys in environment variables.
* Never commit API keys to version control.
* Never hard-code API keys in your code or share them publicly.
* Rotate API keys regularly. If an API key hasn't been used in the last 30 days, consider deleting it to keep your account secure.

<Info>
  When you create an API key in Resend, you can view the key only once. This
  practice helps encourage these best practices.
</Info>

## Example

Many programming languages have built-in support for environment variables. Here's an example of how to store an API key in an environment variable in a Node.js application.

<Steps>
  <Step title="Create an environment variable">
    Once you create the API key, you can store it in an environment variable in a `.env` file.

    ```ts .env theme={null}
    RESEND_API_KEY = 're_xxxxxxxxx';
    ```
  </Step>

  <Step title="Add the file to your gitignore">
    Add the `.env` file to your `.gitignore` file to prevent it from being committed to version control. Many frameworks already add `.env` to the `.gitignore` file by default.

    ```ts .gitignore theme={null}
    .env
    ```
  </Step>

  <Step title="Use the environment variable in your code">
    `ts const resend = new Resend(process.env.RESEND_API_KEY); `
  </Step>
</Steps>


# Introduction
Source: https://resend.com/docs/knowledge-base/introduction

A collection of answers to frequently asked questions.

<CardGroup cols={1}>
  <Card title="Can I receive emails with Resend?" href="/knowledge-base/how-can-i-receive-emails-with-resend">
    Resend is working on an inbound email feature.
  </Card>

  <Card title="How do Dedicated IPs Work?" href="/knowledge-base/how-do-dedicated-ips-work">
    Learn how Dedicated IPs work and how to request them.
  </Card>

  <Card title="How do I avoid conflicts with my MX records?" href="/knowledge-base/how-do-i-avoid-conflicting-with-my-mx-records">
    Learn how to avoid conflicts with your existing MX records when setting up a
    Resend domain.
  </Card>

  <Card title="How do I avoid Gmail's spam folder?" href="/knowledge-base/how-do-i-avoid-gmails-spam-folder">
    Learn how to improve inbox placement in Gmail.
  </Card>

  <Card title="How do I avoid Outlook's spam folder?" href="/knowledge-base/how-do-i-avoid-outlooks-spam-folder">
    Learn how to improve inbox placement in Outlook.
  </Card>

  <Card title="How do I ensure sensitive data isn't stored on Resend?" href="/knowledge-base/how-do-i-ensure-sensitive-data-isnt-stored-on-resend">
    Information on how we can help you protect your customer's information.
  </Card>

  <Card title="How do I fix CORS issues?" href="/knowledge-base/how-do-i-fix-cors-issues">
    Information on recommended options to avoid CORS errors when sending emails.
  </Card>

  <Card title="How do I maximize deliverability for Supabase Auth emails?" href="/knowledge-base/how-do-i-maximize-deliverability-for-supabase-auth-emails">
    Everything you should do before you start sending authentication emails with
    Resend and Supabase.
  </Card>

  <Card title="How do I send with an avatar?" href="/knowledge-base/how-do-i-send-with-an-avatar">
    Learn how to show your avatar in the inbox of your recipients.
  </Card>

  <Card title="Is it better to send emails from a subdomain or the root domain?" href="/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain">
    Discover why sending emails from a subdomain can be better than using a root
    domain.
  </Card>

  <Card title="What if an email says delivered but the recipient hasn't received it?" href="/knowledge-base/what-if-an-email-says-delivered-but-the-recipient-has-not-received-it">
    Learn the steps to take when an email is delivered, but the recipient does not
    receive it.
  </Card>

  <Card title="What if my domain is not verifying?" href="/knowledge-base/what-if-my-domain-is-not-verifying">
    Learn what steps to take when your domain doesn't seem to verifying.
  </Card>

  <Card title="What is Resend Pricing?" href="/knowledge-base/what-is-resend-pricing">
    Learn more about Resend's pricing plans.
  </Card>

  <Card title="Why are my open rates not accurate?" href="/knowledge-base/why-are-my-open-rates-not-accurate">
    Learn why your open rate statistics are not accurate and what you can do about
    it.
  </Card>

  <Card title="How can I delete my Resend account?" href="/knowledge-base/how-can-i-delete-my-resend-account">
    Learn how to permanently delete your Resend account and data.
  </Card>

  <Card title="Should I add an unsubscribe link to all of my emails sent with Resend?" href="/knowledge-base/should-i-add-an-unsubscribe-link">
    Learn when to add unsubscribe links to your transactional and marketing
    emails.
  </Card>

  <Card title="Why are my emails landing on the suppression list?" href="/knowledge-base/why-are-my-emails-landing-on-the-suppression-list">
    Learn why your emails land on the suppression list, and how to remove them.
  </Card>
</CardGroup>


# IONOS
Source: https://resend.com/docs/knowledge-base/ionos

Verify your domain on IONOS with Resend.

## Add Domain to Resend

First, log in to your [Resend Account](https://resend.com/login) and [add a domain](https://resend.com/domains).

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=418dd93c2f2ead0b0d83d1b7c2fb0970" data-og-width="3360" width="3360" data-og-height="2100" height="2100" data-path="images/dashboard-domains-resend-add-domain.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=28a4feab47f2b86c34c7b1314f636f0c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bf121272193472fdd2c882fe4b29ced5 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=950e2318cb41511a6f7105afa50be42c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e5a7d9a4d237a3435e8fffb85c3650f1 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a4944168fa1595f1843c8789944f1ef3 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=17d0c63a766375cab10239e4025c8dac 2500w" />

<Tip>
  It is [best practice to use a
  subdomain](/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain)
  (updates.example.com) instead of the root domain (example.com). This allows
  for proper reputation segmentation based on topics or purpose (e.g.
  transactional and marketing).
</Tip>

## Log in to IONOS

Log in to your [IONOS account](https://my.ionos.com/domains):

1. Choose your Domain from the `Domain` list.
2. Select the `DNS` tab to get to the page to manage DNS records.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-domains.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ad87e97d0b64b83ef7076abdcca7f032" data-og-width="2956" width="2956" data-og-height="1848" height="1848" data-path="images/dashboard-domains-ionos-domains.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-domains.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=458e236a3112f9f831af331f71f2610f 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-domains.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=c9d809f5d95a03a23297ecd5d7429b8a 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-domains.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=12e4432ec5613e6113c4b29ea24e708f 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-domains.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ecb6e8738326bb4d291635dc0dbb2d41 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-domains.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=34d63e2bf81fa3ca864c71218bbb450c 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-domains.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f439f3042847f807c83d0818298ce506 2500w" />

## Add MX SPF Record

Select “Add record” on IONOS to copy and paste the values MX from Resend.

1. On the `Add a DNS Record` page, select `MX`.
2. Type `send` for the `Name` of the record.
3. Copy the MX Value from Resend into the `Points to` field.
4. Use the default `Priority` of `10`.
5. Use the default TTL of `1 hour`.
6. Select `Save`.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bb0db2dd2809135194cfb62b695225cd" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a95639f0752fdbaefd0eae3b93ec6255 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9e579bee139584def82c0a8688466681 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=80c20d31f9598b0f8aeb4b267725b4fe 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f66dc758dec3ac85919063c4bb66f4d5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=187033c1e79e5f6f3b47fa0466def756 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a0531e4d1d25117efaef896d40331e3 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=1769321e813bf9a6d6ebe30105d1dc43" data-og-width="2954" width="2954" data-og-height="1848" height="1848" data-path="images/dashboard-domains-ionos-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=0bdf3604a875b6a28210e25f5b9f212c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=1edec6a4c37967092e9d9e3c7b85818a 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e83f1a77119d2e2d388c61fe6feaee26 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b9575434e0354257c6ae48ba508a9358 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=c8fc4046e92d7ec5110ed18c1d4b8e56 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cc7e5c5fcfb17bbad7ded67d9c3f7b2b 2500w" />

Below is a mapping of the record fields from Resend to IONOS:

| IONOS     | Resend   | Example Value                           |
| --------- | -------- | --------------------------------------- |
| Type      | Type     | `MX Record`                             |
| Name      | Name     | `send`                                  |
| Points to | Value    | `feedback-smtp.us-east-1.amazonses.com` |
| TTL       | -        | `1 hour`                                |
| Priority  | Priority | `10`                                    |

<Info>
  Do not use the same priority for multiple records. If Priority `10` is already
  in use on another record, try a number slightly higher like `11` or `12`.
</Info>

## Add TXT SPF Record

In the same section, select “Add record” again.

1. On the `Add a DNS Record` page, select `TXT`.
2. Type `send` for the `Host name` of the record.
3. Copy the TXT Value Resend into the `TXT value` field.
4. Use the default TTL of `1 hour`.
5. Select `Save`.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=747425d0a224baeee2846c9a707d5bbc" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=04f13a4953c918b5ffa05474c6e6190c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fa09e290427c24278edb3306e241e2f0 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4e796dc0356e2176d0dfa9467aa9af8f 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5e27ef23ba82f5fe62d483849c5a8ec5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=991e5fe09e65097107fafe4de36c0bda 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6fd70252df24dce6a9768e38d5c75ae0 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b41183957e0b51879bf42e16f1927f91" data-og-width="2956" width="2956" data-og-height="1848" height="1848" data-path="images/dashboard-domains-ionos-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=95f76b7f445b5325074c32bf2d612b88 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=0c4886df1ab4bb5017cf4eb9e1133b16 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2ee21850050b4b228c5591adb2cf6ea8 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=10a0fe9576696d2878b2f9e53ddb9b47 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cc94f8d35f05817fb878b3eb103d7ee6 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a8c40ea977f249fb6aef90ffed760b4d 2500w" />

Below is a mapping of the record fields from Resend to IONOS:

| IONOS     | Resend | Example Value                         |
| --------- | ------ | ------------------------------------- |
| Type      | Type   | `TXT Record`                          |
| Host name | Name   | `send`                                |
| TXT value | Value  | `"v=spf1 include:amazonses.com ~all"` |
| TTL       | -      | `1 hour`                              |

## Add TXT DKIM Records

In the same section, select “Add record” again.

1. On the `Add a DNS Record` page, select `TXT`.
2. Type `resend._domainkey` for the `Host name` of the record.
3. Copy the record value from Resend into the `TXT value` field.
4. Use the default TTL of `1 hour`.
5. Select `Save`.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or
  `resend._domainkey.subdomain` if you're using a subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=345d1dc6b7c138dbd92bd6928c634bd9" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/dashboard-domains-resend-dkim.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=37e5d282deda4e727e9f002cf5b8f0dd 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=978f4a7f13387c0d721acd80a944123c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd473e4cdd467d31c1e2d4a507f5d914 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=784706a47cae7451a0200c461831bc30 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9780d5ff17771270ed33a0176bd7bd55 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=46f59e55a1a791b4a32e13bc49e5f0cd 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-dkim-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f824ef363e11048dd685cf8afad2cf53" data-og-width="2955" width="2955" data-og-height="1848" height="1848" data-path="images/dashboard-domains-ionos-dkim-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-dkim-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=be04733f8430819fa2ab9df5d0432c80 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-dkim-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=35fe34001b0274c09590a1cdd09aa4a3 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-dkim-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a778c9c741fa68dd8deaca7a3bc4eedc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-dkim-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ea691d8671f894943a3905842d700670 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-dkim-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=0771e50817112a4d7d74f9ad344babba 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-ionos-dkim-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e786f819deb06e5b02f4d1251031b705 2500w" />

Below is a mapping of the record fields from Resend to IONOS:

| IONOS     | Resend | Example Value                |
| --------- | ------ | ---------------------------- |
| Type      | Type   | `TXT Record`                 |
| Host name | Name   | `send`                       |
| TXT value | Value  | `p=example_demain_key_value` |
| TTL       | -      | `1 hour`                     |

## Complete Verification

Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take a few hours to complete the verification process (often much faster).

## Troubleshooting

If your domain is not successfully verified, these are some common troubleshooting methods.

<AccordionGroup>
  <Accordion title="Resend shows my domain verification failed.">
    Review the records you added to IONOS to rule out copy and paste errors.
  </Accordion>

  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).
  </Accordion>
</AccordionGroup>


# Is it better to send emails from a subdomain or the root domain?
Source: https://resend.com/docs/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain

Discover why sending emails from a subdomain can be better than using a root domain.

We recommend sending emails from a subdomain (`notifications.acme.com`) instead of your root/apex domain (`acme.com`).

There are **two main goals you should achieve with your domain setup**:

* Reputation Isolation
* Sending Purpose Transparency

## Reputation Isolation

Things happen. Maybe someone decides to DDOS your signup page and you get stuck sending tens of thousands of bounced verification emails to burner addresses. Or maybe a cold outreach campaign gets out of hand and your sending gets pegged as spam.

Whatever it is, you want to be consistently hedging your reputation. One way to do this is by not using your root domain. This allows you to quarantine a compromised subdomain if needed. If your root domain ends up with a jeopardized reputation, it can be a long road to recovery.

## Sending Purpose Transparency

All of us want all of our emails to go right to the top of the priority folder of the inbox, but the reality is, not all of our email should. A password reset email should have higher priority than a monthly product update. Inbox providers like Outlook and Gmail are constantly trying to triage incoming mail to put only the most important stuff in that priority spot, and move the rest towards Promotional or even Spam.

By segmenting your sending purposes by subdomain, you are giving Inbox Providers clear indication of how they should place your emails, which will build trust and confidence.

## Avoid "Lookalike" Domains

Never use domains that look like your main brand but aren’t actually your main brand. These brand-adjacent domains like `getacme-mail.com` or `acme-alerts.com` can appear suspicious to spam filters and confusing to your recipients. Inbox providers may flag them as phishing or spoofing attempts, and your users are more likely to ignore, delete, or even report the emails as spam.

If you’re launching a new project or sending for a different purpose, again use a subdomain of your main domain. Sticking with clear, consistent subdomains helps reinforce your brand identity and builds trust with inbox providers and recipients alike.

<Note>
  We cover this in depth in our [deliverability
  guide](/knowledge-base/how-do-i-avoid-gmails-spam-folder#establish-sending-patterns).
</Note>


# Send emails with Leap and Resend
Source: https://resend.com/docs/knowledge-base/leap-new-integration

Learn how to add the Resend integration to your Leap.new project.

[Leap](https://leap.new) is a platform for building full-stack web and mobile apps via chat.

## 1. Ask Leap to add Resend

You can add Resend in a Leap project by asking the chat to add email sending with Resend.

**Example prompt**

```
When someone fills out the contact form, send an email using Resend.
```

## 2. Add your Resend API key

To use Resend with Leap, you'll need to add a Resend API key, which you can create in the [Resend Dashboard](https://resend.com/api-keys). Do not share your API key with others or expose it in the browser or other client-side code.

Leap will prompt you to set a secret value on the Infrastructure page. Paste your key value and click **Update secret**.

<img src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/leap-new-integration.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d1c68aa7b6144ffcd8ee2793cdebe67d" alt="adding the Resend integration to a leap.new chat" data-og-width="3360" width="3360" data-og-height="2100" height="2100" data-path="images/leap-new-integration.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/leap-new-integration.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=85fa70d109462c9f5f63fc548825564d 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/leap-new-integration.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=75d801baa69988a8ffc8f99cdb8ffdb9 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/leap-new-integration.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=cf8de66906546502c08e22fcd00a6329 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/leap-new-integration.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f412e543f5e54d01a8158df825281609 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/leap-new-integration.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=bfc0165713fd70500260705a81d53e06 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/leap-new-integration.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=99d2aac664e970d8f765ab5f9f1fd06e 2500w" />

<Info>
  Learn more about the Resend integration in the [Leap
  documentation](https://docs.leap.new/integrations/resend).
</Info>

## 3. Add a custom domain to your Resend account

By default, you can only send emails to your own email address.

To send emails to other email addresses:

1. Add a [custom domain to your Resend account](https://resend.com/domains).
2. Add the custom domain to the `from` field in the `resend` function in Leap (or ask the chat to update these fields).

Get more help adding a custom domain in [Resend's documentation](/dashboard/domains/introduction).


# Send emails with Lovable and Resend
Source: https://resend.com/docs/knowledge-base/lovable-integration

Learn how to add the Resend integration to your Lovable project.

export const YouTube = ({id}) => {
  return <iframe className="w-full aspect-video rounded-xl" src={`https://www.youtube.com/embed/${id}`} title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen></iframe>;
};

[Lovable](https://lovable.dev) is a platform for building web sites, tools, apps, and projects via chat. You can add Resend in a Lovable project by asking the chat to add email sending with Resend.

If you prefer to watch a video, check out our video walkthrough below.

<YouTube id="0gw693uZt0w" />

## 1. Add your Resend API key

To use Resend with Lovable, you'll need to add a Resend API key, which you can create in the [Resend Dashboard](https://resend.com/api-keys). Do not share your API key with others or expose it in the browser or other client-side code.

Lovable may integrate Resend in a few different ways:

* Use the Supabase integration to store the API key **(highly recommended)**
* Ask users to provide their own API key
* Add the API key directly in the code

You may need to prompt Lovable to store the API key for Resend using Supabase. Clicking **Add API key** will open a modal where you can add the API key.

<img src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/lovable-integration.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c071ba3ae671bc6cafd8dfd43e12772d" alt="adding the Resend integration to a Lovable chat" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/lovable-integration.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/lovable-integration.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=71dba7b6bc78c7bb2530fd3b6cdfec36 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/lovable-integration.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=03cf46a9c1d8291d9074ed5027d3c6f4 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/lovable-integration.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=39dcccf2658d43ee8c04dff4a98ff817 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/lovable-integration.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c934b77a84ec24d74875389fdc7595e3 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/lovable-integration.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=339b019e6e9c0ffb2407193def0236b8 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/lovable-integration.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9cc37decca471f7322714d1df6a06123 2500w" />

<Info>
  At the time of writing, Lovable does not securely handle API keys
  independently. Instead, it uses the [Supabase integration to store
  secrets](https://docs.lovable.dev/integrations/supabase#storing-secrets-api-keys-%26-config).
</Info>

## 2. Add a custom domain to your Resend account

By default, you can only send emails to your own email address.

To send emails to other email addresses:

1. Add a [custom domain to your Resend account](https://resend.com/domains).
2. Add the custom domain to the `from` field in the `resend` function in Lovable (or ask the chat to update these fields).

Get more help adding a custom domain in [Resend's documentation](/dashboard/domains/introduction).


# MCP Server
Source: https://resend.com/docs/knowledge-base/mcp-server

Learn how to use the MCP Server to send emails.

export const YouTube = ({id}) => {
  return <iframe className="w-full aspect-video rounded-xl" src={`https://www.youtube.com/embed/${id}`} title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen></iframe>;
};

## What is an MCP Server?

MCP is an open protocol that standardizes how applications provide context to LLMs. Among other benefits, it provides LLMs tools to act on your behalf.

If you prefer to watch a video, check out our video walkthrough below.

<YouTube id="5QHOhvT-AFg" />

## What can Resend's MCP Server do?

Currently, Resend's MCP Server is a simple server you must build locally that can send emails using Resend's API on your behalf.

* Send plain text and HTML emails
* Schedule emails for future delivery
* Add CC and BCC recipients
* Configure reply-to addresses
* Customizable sender email (requires verification)

As an example, you could use this to run local scripts, chat with Claude, or process data and send the results to yourself or your team.

<video autoPlay muted loop playsInline className="w-full" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server.mp4?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=296653de6b6a5a471fb2357fcc766e58" data-path="images/mcp-server.mp4" />

## How to use Resend's MCP Server

Build the project locally to use this MCP server to use it in a [supported MCP client](#mcp-client-integrations).

<Steps>
  <Step title="Clone this project locally.">
    ```bash  theme={null}
    git clone https://github.com/resend/mcp-send-email.git
    ```
  </Step>

  <Step title="Build the project">
    ```
    npm install
    npm run build
    ```
  </Step>

  <Step title="Setup Resend">
    1. [Create an API Key](https://resend.com/api-keys): copy this key to your clipboard
    2. [Verify your own domain](https://resend.com/domains): to send to email addresses other than your own
  </Step>
</Steps>

## MCP Client Integrations

With the MCP server built, you can now add it to a supported MCP client.

### Cursor

<Steps>
  <Step title="Open Cursor Settings">
    Open the command palette (`cmd`+`shift`+`p` on macOS or `ctrl`+`shift`+`p` on Windows) and choose **Cursor Settings**.
  </Step>

  <Step title="Add the MCP server">
    Select **MCP** from the left sidebar and click **Add new global MCP server** and add the following config:

    ```json  theme={null}
    {
      "mcpServers": {
        "resend": {
          "type": "command",
          "command": "node ABSOLUTE_PATH_TO_MCP_SEND_EMAIL_PROJECT/build/index.js --key=YOUR_RESEND_API_KEY"
        }
      }
    }
    ```

    You can get the absolute path to your build script by right-clicking on the `/build/index.js` file in Cursor and selecting `Copy Path`.

    **Possible arguments**

    * `--key`: Your Resend API key (required)
    * `--sender`: Your sender email address from a verified domain (optional)
    * `--reply-to`: Your reply-to email address (optional)

    <Info>
      If you don't provide a sender email address, the MCP server will ask you to
      provide one each time you call the tool.
    </Info>

    Adding the MCP server to Cursor's global settings will let you send emails from any project on your machine using Cursor's Agent mode.
  </Step>

  <Step title="Test the sending">
    Test sending emails by going to `email.md` in the cloned project.

    * Replace the to: email address with your own
    * Select all text in `email.md`, and press `cmd+l`
    * Tell cursor to "send this as an email" in the chat (make sure cursor is in Agent mode by selecting "Agent" on lower left side dropdown).

    <img width="541" alt="Cursor chat with email.md file selected and Agent mode enabled" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-1.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=fa2e1425ad8347080815dcd1dde4b7d8" data-og-width="882" data-og-height="376" data-path="images/mcp-server-1.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-1.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=dbdd880a1701b6a795635e33e129b62b 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-1.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9e875f6e0a24e5574ac97f2b9d2d594a 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-1.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d59c85a4ea1c3d375245f1e8a9015523 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-1.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=4d56eb32baf2b586d5bb5f20ba426406 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-1.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=383fd69fc6081851ececb24f10d03e5a 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-1.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=380bba86ffb5c22b4828121b82f0da7c 2500w" />
  </Step>
</Steps>

### Claude Desktop

<Steps>
  <Step title="Open Claude Desktop settings">
    Open Claude Desktop settings and navigate to the "Developer" tab. Click `Edit Config`.
  </Step>

  <Step title="Add the MCP server">
    Add the following config:

    ```json  theme={null}
    {
      "mcpServers": {
        "resend": {
          "command": "node",
          "args": ["ABSOLUTE_PATH_TO_MCP_SEND_EMAIL_PROJECT/build/index.js"],
          "env": {
            "RESEND_API_KEY": "YOUR_RESEND_API_KEY"
          }
        }
      }
    }
    ```

    You can get the absolute path to your build script by right-clicking on the `/build/index.js` file in your IDE and selecting `Copy Path`.

    **Possible environment variables**

    * `RESEND_API_KEY`: Your Resend API key (required)
    * `SENDER_EMAIL_ADDRESS`: Your sender email address from a verified domain (optional)
    * `REPLY_TO_EMAIL_ADDRESS`: Your reply-to email address (optional)

    <Info>
      If you don't provide a sender email address, the MCP server will ask you to
      provide one each time you call the tool.
    </Info>
  </Step>

  <Step title="Test the server">
    Close and reopen Claude Desktop. Verify that the `resend` tool is available in the Claude developer settings.

    <img alt="Claude Desktop developer settings with Resend MCP server showing" width="541" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-2.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=4d5c737476c68debac2d0adef163fa6f" data-og-width="1584" data-og-height="1120" data-path="images/mcp-server-2.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-2.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=14cf03642a38d4ccb66885252da6ebd3 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-2.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=875b082f959d327eeef871892e7aed3f 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-2.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=6d34d65ae31bf92ccbe3d675c08f01f9 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-2.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=15b671ad1c2b087f2d45d47eb6118783 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-2.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=6dd1751cbf3d65acb4cfad0e794cb44e 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/mcp-server-2.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1d54794409ba8526e4cdfd233a8df479 2500w" />

    Chat with Claude and tell it to send you an email using the `resend` tool.
  </Step>
</Steps>


# Namecheap
Source: https://resend.com/docs/knowledge-base/namecheap

Verify your domain on Namecheap with Resend.

## Add Domain to Resend

First, log in to your [Resend Account](https://resend.com/login) and [add a domain](https://resend.com/domains).

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=418dd93c2f2ead0b0d83d1b7c2fb0970" data-og-width="3360" width="3360" data-og-height="2100" height="2100" data-path="images/dashboard-domains-resend-add-domain.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=28a4feab47f2b86c34c7b1314f636f0c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bf121272193472fdd2c882fe4b29ced5 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=950e2318cb41511a6f7105afa50be42c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e5a7d9a4d237a3435e8fffb85c3650f1 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a4944168fa1595f1843c8789944f1ef3 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=17d0c63a766375cab10239e4025c8dac 2500w" />

<Tip>
  It is [best practice to use a
  subdomain](/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain)
  (updates.example.com) instead of the root domain (example.com). This allows
  for proper reputation segmentation based on topics or purpose (e.g.
  transactional and marketing).
</Tip>

## Log in to Namecheap

1. Log in to your [Namecheap account](https://ap.www.namecheap.com).

2. Click `Manage` for the domain.

   <img alt="Domain Details" src="https://mintcdn.com/resend/svdlrksWLy8Dr3X-/images/dashboard-domains-namecheap-manage.png?fit=max&auto=format&n=svdlrksWLy8Dr3X-&q=85&s=cb8698fd0e0cab38eb335766a9d0b7d8" data-og-width="3404" width="3404" data-og-height="1816" height="1816" data-path="images/dashboard-domains-namecheap-manage.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/svdlrksWLy8Dr3X-/images/dashboard-domains-namecheap-manage.png?w=280&fit=max&auto=format&n=svdlrksWLy8Dr3X-&q=85&s=5a0e948a5a73886cf592bbc581ce81f1 280w, https://mintcdn.com/resend/svdlrksWLy8Dr3X-/images/dashboard-domains-namecheap-manage.png?w=560&fit=max&auto=format&n=svdlrksWLy8Dr3X-&q=85&s=b37a99118de7410b6fe18891e50aaa3d 560w, https://mintcdn.com/resend/svdlrksWLy8Dr3X-/images/dashboard-domains-namecheap-manage.png?w=840&fit=max&auto=format&n=svdlrksWLy8Dr3X-&q=85&s=4cce75d6b69bb598ef3ef7aec8471a82 840w, https://mintcdn.com/resend/svdlrksWLy8Dr3X-/images/dashboard-domains-namecheap-manage.png?w=1100&fit=max&auto=format&n=svdlrksWLy8Dr3X-&q=85&s=8c17e45593503dc0387310f7b15838fa 1100w, https://mintcdn.com/resend/svdlrksWLy8Dr3X-/images/dashboard-domains-namecheap-manage.png?w=1650&fit=max&auto=format&n=svdlrksWLy8Dr3X-&q=85&s=3dce18551c5f5b2d5b004acb2ef19b16 1650w, https://mintcdn.com/resend/svdlrksWLy8Dr3X-/images/dashboard-domains-namecheap-manage.png?w=2500&fit=max&auto=format&n=svdlrksWLy8Dr3X-&q=85&s=af448f7ac1128e739644fe6be85bee7e 2500w" />

   <Info>You may need to expand a dropdown to see the `Manage` button.</Info>

3. Go to the `Advanced DNS` page for the domain you want to verify.

   <img alt="Domain Details" src="https://mintcdn.com/resend/svdlrksWLy8Dr3X-/images/dashboard-domains-namecheap-advanced-dns.png?fit=max&auto=format&n=svdlrksWLy8Dr3X-&q=85&s=b958e136050178c70eb4820e703803c6" data-og-width="3404" width="3404" data-og-height="1816" height="1816" data-path="images/dashboard-domains-namecheap-advanced-dns.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/svdlrksWLy8Dr3X-/images/dashboard-domains-namecheap-advanced-dns.png?w=280&fit=max&auto=format&n=svdlrksWLy8Dr3X-&q=85&s=d232bb5ecb3a9e76c7a5931316c0477c 280w, https://mintcdn.com/resend/svdlrksWLy8Dr3X-/images/dashboard-domains-namecheap-advanced-dns.png?w=560&fit=max&auto=format&n=svdlrksWLy8Dr3X-&q=85&s=c5f53620ddb9db50082088dd491e4374 560w, https://mintcdn.com/resend/svdlrksWLy8Dr3X-/images/dashboard-domains-namecheap-advanced-dns.png?w=840&fit=max&auto=format&n=svdlrksWLy8Dr3X-&q=85&s=8a0ac227c2e060b7dcb8c205c058cfc4 840w, https://mintcdn.com/resend/svdlrksWLy8Dr3X-/images/dashboard-domains-namecheap-advanced-dns.png?w=1100&fit=max&auto=format&n=svdlrksWLy8Dr3X-&q=85&s=fd995eecacd584685899612de5536f96 1100w, https://mintcdn.com/resend/svdlrksWLy8Dr3X-/images/dashboard-domains-namecheap-advanced-dns.png?w=1650&fit=max&auto=format&n=svdlrksWLy8Dr3X-&q=85&s=79187a412f77a0eddde4f8d0a85db26d 1650w, https://mintcdn.com/resend/svdlrksWLy8Dr3X-/images/dashboard-domains-namecheap-advanced-dns.png?w=2500&fit=max&auto=format&n=svdlrksWLy8Dr3X-&q=85&s=2b9f194e93a7ce58581f76bad06d8540 2500w" />

## Add MX SPF Record

<Warning>
  If you are changing the MX configuration from `Gmail` to `Custom MX`, you need
  to [setup new MX records for
  Gmail](https://support.google.com/a/answer/174125). If you don't setup new
  records, receiving mail in your gmail inboxes will stop.
</Warning>

Under the `Mail Settings` section, click the dropdown and select `Custom MX`:

1. Type `send` for the `Host` of the record.
2. Copy the MX Value from Resend into the `Value` field.
3. Use the `Automatic` TTL.
4. Select `Save all changes`.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bb0db2dd2809135194cfb62b695225cd" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a95639f0752fdbaefd0eae3b93ec6255 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9e579bee139584def82c0a8688466681 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=80c20d31f9598b0f8aeb4b267725b4fe 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f66dc758dec3ac85919063c4bb66f4d5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=187033c1e79e5f6f3b47fa0466def756 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a0531e4d1d25117efaef896d40331e3 2500w" />

<br />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=dda5ff041cce1341e22123fd70111ef3" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-namecheap-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=25dbc4febfaf7f637162e7e4b3e0c4fb 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=caaf998f5c06ada80dd2b1954a1641a8 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=48f022ed9dadd69c7ccb9308b260f8fa 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=eb14633d7f907ffacce7386204306696 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5f41e798097b00f0b842a2e2262076b7 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4d22358160f5e8cdb23c5ec4e46bc7b6 2500w" />

Below is a mapping of the record fields from Resend to Namecheap:

| Namecheap | Resend   | Example Value                           |
| --------- | -------- | --------------------------------------- |
| Type      | Type     | `MX Record`                             |
| Host      | Name     | `send`                                  |
| TTL       | -        | `Automatic`                             |
| Value     | Value    | `feedback-smtp.us-east-1.amazonses.com` |
| -         | Priority | `10`                                    |

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

<Info>
  Namecheap does not label the `priority` column. It is the empty column after
  `Value`. Do not use the same priority for multiple records. If Priority `10`
  is already in use, try a number slightly higher like `11` or `12`.
</Info>

## Add TXT SPF Record

Under the `Host Records` section, click `Add New Record`:

1. Set the `Type` to `TXT Record`.
2. Enter `send` into the `Host` field.
3. Copy the TXT Value from Resend into the `Value` field.
4. Use the `Automatic` TTL.
5. Select `Save all changes`.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=747425d0a224baeee2846c9a707d5bbc" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=04f13a4953c918b5ffa05474c6e6190c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fa09e290427c24278edb3306e241e2f0 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4e796dc0356e2176d0dfa9467aa9af8f 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5e27ef23ba82f5fe62d483849c5a8ec5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=991e5fe09e65097107fafe4de36c0bda 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6fd70252df24dce6a9768e38d5c75ae0 2500w" />

<br />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b742409a1de5a3291dc64e1846c2cf77" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-namecheap-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=458cf92fd9a613dac0302898e9f54def 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=df523d0d6ad296689e0752a28cdda8af 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=78c459812577180d72dfd279a5a58543 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ae365a3ef61fbd002f0053358c3b13e2 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f834de948fb71c51c66ab747865982ec 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=363faa874a093a0ba04015b879e7a642 2500w" />

Below is a mapping of the record fields from Resend to Namecheap:

| Namecheap | Resend | Example Value                         |
| --------- | ------ | ------------------------------------- |
| Type      | Type   | `TXT Record`                          |
| Host      | Name   | `send`                                |
| TTL       | -      | `Automatic`                           |
| Value     | Value  | `"v=spf1 include:amazonses.com ~all"` |

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

## Add TXT DKIM Records

In that same `Host Records` section, click `Add New Record`.

1. Set the `Type` to `TXT Record`.
2. Enter `resend._domainkey` into the `Host` field.
3. Copy the TXT Value from Resend into the `Value` field.
4. Use the `Automatic` TTL.
5. Select `Save all changes`.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=345d1dc6b7c138dbd92bd6928c634bd9" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/dashboard-domains-resend-dkim.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=37e5d282deda4e727e9f002cf5b8f0dd 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=978f4a7f13387c0d721acd80a944123c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd473e4cdd467d31c1e2d4a507f5d914 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=784706a47cae7451a0200c461831bc30 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9780d5ff17771270ed33a0176bd7bd55 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=46f59e55a1a791b4a32e13bc49e5f0cd 2500w" />

<br />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-dkim-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=0cd6480b613eaed711006b58c7b7a67a" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-namecheap-dkim-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-dkim-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=170ce2a4a2baf122af2e917a5c16d17b 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-dkim-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=78e3a57e55f673cb4d173ef9d6b72e54 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-dkim-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=18ea12b598094e2d30e274138ec9da3e 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-dkim-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3dc2f6525cb223765c4ed2f2a03bab48 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-dkim-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ebad32b26f7dad6b7b9c310b7e896c53 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-namecheap-dkim-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2e0c45e11427c732a505490f4d107563 2500w" />

Below is a mapping of the record fields from Resend to Namecheap:

| Namecheap | Resend | Example Value                |
| --------- | ------ | ---------------------------- |
| Type      | Type   | `TXT Record`                 |
| Host      | Name   | `resend._domainkey`          |
| TTL       | -      | `Automatic`                  |
| Value     | Value  | `p=example_demain_key_value` |

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or
  `resend._domainkey.subdomain` if you're using a subdomain).
</Info>

## Complete Verification

Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take up to 72 hours to complete the verification process (often much faster).

## Troubleshooting

If your domain is not successfully verified, these are some common troubleshooting methods.

<AccordionGroup>
  <Accordion title="Resend shows my domain verification failed.">
    Review the records you added to Namecheap to rule out copy and paste errors.
  </Accordion>

  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).
  </Accordion>
</AccordionGroup>


# Porkbun
Source: https://resend.com/docs/knowledge-base/porkbun

Verify your domain on Porkbun with Resend.

## Add Domain to Resend

First, log in to your [Resend Account](https://resend.com/login) and [add a domain](https://resend.com/domains).

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=418dd93c2f2ead0b0d83d1b7c2fb0970" data-og-width="3360" width="3360" data-og-height="2100" height="2100" data-path="images/dashboard-domains-resend-add-domain.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=28a4feab47f2b86c34c7b1314f636f0c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bf121272193472fdd2c882fe4b29ced5 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=950e2318cb41511a6f7105afa50be42c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e5a7d9a4d237a3435e8fffb85c3650f1 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a4944168fa1595f1843c8789944f1ef3 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=17d0c63a766375cab10239e4025c8dac 2500w" />

<Tip>
  It is [best practice to use a
  subdomain](/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain)
  (updates.example.com) instead of the root domain (example.com). This allows
  for proper reputation segmentation based on topics or purpose (e.g.
  transactional and marketing).
</Tip>

## Log in to Porkbun

Log in to your [Porkbun account](https://porkbun.com/account/domainsSpeedy):

1. Select the `DNS` option under your domain to manage DNS records.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-domains.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=44389c4ae53707e508d38a34a794cec3" data-og-width="2903" width="2903" data-og-height="1785" height="1785" data-path="images/dashboard-domains-porkbun-domains.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-domains.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cc9c832c81685f06f20dbd7cddc98669 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-domains.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ff19806fd165a02910ab3273472e929b 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-domains.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=60b377fcb40fd2c6329de35257ce33fa 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-domains.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=397075911c8f098744e83827c1635eb6 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-domains.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9c293b0c0eb90b18c88324382303dd67 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-domains.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=16b20ab3226b3cfffd49f80e669bd1a8 2500w" />

## Add MX SPF Record

In the `DNS` section on Porkbun copy and paste the values MX from Resend:

1. On the `Type` page, choose `MX`.
2. Type `send` for the `Host` of the record.
3. Copy the MX Value from Resend into the `Answer / Value` field.
4. Use the default TTL of `600`.
5. In the `Priority` field enter `10`.
6. Select `Add`.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bb0db2dd2809135194cfb62b695225cd" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a95639f0752fdbaefd0eae3b93ec6255 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9e579bee139584def82c0a8688466681 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=80c20d31f9598b0f8aeb4b267725b4fe 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f66dc758dec3ac85919063c4bb66f4d5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=187033c1e79e5f6f3b47fa0466def756 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a0531e4d1d25117efaef896d40331e3 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=65428888fca00600f2bdf31d14db8eaf" data-og-width="2897" width="2897" data-og-height="1767" height="1767" data-path="images/dashboard-domains-porkbun-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=455d3859b20fe99882c7e797368a7721 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=580144f74230de368512157f9fdc95ff 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=7471801ed082038ff0761015c1a2eb8d 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=da6279c2660e33551f131c3c0129e021 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d67a9117ccb90fc39974bdf69d9f9218 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=619d5c492cc7a788bc58c2f55db786fd 2500w" />

Below is a mapping of the record fields from Resend to Porkbun:

| Porkbun        | Resend   | Example Value                           |
| -------------- | -------- | --------------------------------------- |
| Type           | Type     | `MX Record`                             |
| Host           | Name     | `send`                                  |
| Answer / Value | Value    | `feedback-smtp.us-east-1.amazonses.com` |
| TTL            | -        | `600`                                   |
| Priority       | Priority | `10`                                    |

<Info>
  Do not use the same priority for multiple records. If Priority `10` is already
  in use on another record, try a number slightly higher like `11` or `12`.
</Info>

## Add TXT SPF Record

On the same section:

1. On the `Type` page, choose `TXT`.
2. Type `send` for the `Host` of the record.
3. Copy the TXT Value Resend into the `Answer / Value` field.
4. Use the default TTL of `600`.
5. Select `Add Record`.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=747425d0a224baeee2846c9a707d5bbc" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=04f13a4953c918b5ffa05474c6e6190c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fa09e290427c24278edb3306e241e2f0 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4e796dc0356e2176d0dfa9467aa9af8f 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5e27ef23ba82f5fe62d483849c5a8ec5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=991e5fe09e65097107fafe4de36c0bda 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6fd70252df24dce6a9768e38d5c75ae0 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=7ef4c8c51fd01d854c6404b96b2a1a27" data-og-width="2904" width="2904" data-og-height="1767" height="1767" data-path="images/dashboard-domains-porkbun-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=423790234c4fae56acd004d451eabd36 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e706b958a400e2337c684f04521fbdb6 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=68d70f69fea553d8e8bb05ff32952cde 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=355db2ca034675d3a9d3717813b12548 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8e44103c79a4cf97e623d29d9f4d0cf7 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3d709d0d408729cb05c4d1a4f62ee16e 2500w" />

Below is a mapping of the record fields from Resend to Porkbun:

| Porkbun        | Resend | Example Value                         |
| -------------- | ------ | ------------------------------------- |
| Type           | Type   | `TXT Record`                          |
| Host           | Name   | `send`                                |
| Answer / Value | Value  | `"v=spf1 include:amazonses.com ~all"` |
| TTL            | -      | `600`                                 |

## Add TXT DKIM Records

On the same `Create Record` section:

1. On the `Type` page, choose `TXT`.
2. Type `resend._domainkey` for the `Host` of the record.
3. Copy the TXT Value Resend into the `Answer / Value` field.
4. Use the default TTL of `600`.
5. Select `Add Record`.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or
  `resend._domainkey.subdomain` if you're using a subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=345d1dc6b7c138dbd92bd6928c634bd9" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/dashboard-domains-resend-dkim.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=37e5d282deda4e727e9f002cf5b8f0dd 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=978f4a7f13387c0d721acd80a944123c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd473e4cdd467d31c1e2d4a507f5d914 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=784706a47cae7451a0200c461831bc30 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9780d5ff17771270ed33a0176bd7bd55 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=46f59e55a1a791b4a32e13bc49e5f0cd 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-dkim-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9f3a33882f02d34489d5adc55f28c7b8" data-og-width="2903" width="2903" data-og-height="1768" height="1768" data-path="images/dashboard-domains-porkbun-dkim-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-dkim-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3948c85bf162952c3465b31d2b68188c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-dkim-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=11e0f58cbbdfa689a287578bc5a683a8 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-dkim-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=46f7414f834dea9dc3a07391a697cbed 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-dkim-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5b75bb5d73f6161b689fb57a03359f8f 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-dkim-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3b3b0dcbf31194aa7f9571e1ad781fcc 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-porkbun-dkim-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b458486c52924670d4c459e460ab2159 2500w" />

Below is a mapping of the record fields from Resend to Porkbun:

| Porkbun        | Resend | Example Value                |
| -------------- | ------ | ---------------------------- |
| Type           | Type   | `TXT Record`                 |
| Host           | Name   | `send`                       |
| Answer / Value | Value  | `p=example_demain_key_value` |
| TTL            | -      | `600`                        |

## Complete Verification

Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take a few hours to complete the verification process (often much faster).

## Troubleshooting

If your domain is not successfully verified, these are some common troubleshooting methods.

<AccordionGroup>
  <Accordion title="Resend shows my domain verification failed.">
    Review the records you added to Porkbun to rule out copy and paste errors.
  </Accordion>

  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).
  </Accordion>
</AccordionGroup>


# Send emails with Replit and Resend
Source: https://resend.com/docs/knowledge-base/replit-integration

Learn how to add the Resend integration to your Replit project.

export const YouTube = ({id}) => {
  return <iframe className="w-full aspect-video rounded-xl" src={`https://www.youtube.com/embed/${id}`} title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen></iframe>;
};

[Replit](https://replit.com/) is a platform for building sites and apps with AI. You can add Resend in a Replit project by asking the chat to add email sending with Resend.

**Example prompt**

```
When someone fills out the contact form, send an email using Resend.
```

Prefer watching a video? Check out our video walkthrough below.

<YouTube id="gXwFWFMcnnY" />

## 1. Add a custom domain to your Resend account

By default, you can only send emails to your own email address.

To send emails to other email addresses:

1. Add a [custom domain to your Resend account](https://resend.com/domains).
2. Add the custom domain to the `from` field in the `resend` function in Replit (or ask the chat to update these fields).

Get more help adding a custom domain in [Resend's documentation](/dashboard/domains/introduction).

## 2. Add your Resend API key and from address

To use Resend with Replit, you'll need to add a Resend API key, which you can create in the [Resend Dashboard](https://resend.com/api-keys). Do not share your API key with others or expose it in the browser or other client-side code.

The from address is the email address that will be used to send emails. Use your custom domain you added in step 1 here (e.g., `hello@yourdomain.com`).

<img src="https://mintcdn.com/resend/873NN72QQCCHs00J/images/replit-integration.png?fit=max&auto=format&n=873NN72QQCCHs00J&q=85&s=7c6dee645c882748990a7973150b252f" alt="adding the Resend integration to a Replit chat" data-og-width="1920" width="1920" data-og-height="1080" height="1080" data-path="images/replit-integration.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/873NN72QQCCHs00J/images/replit-integration.png?w=280&fit=max&auto=format&n=873NN72QQCCHs00J&q=85&s=6ceb79a381e2410a78d588d3372b855b 280w, https://mintcdn.com/resend/873NN72QQCCHs00J/images/replit-integration.png?w=560&fit=max&auto=format&n=873NN72QQCCHs00J&q=85&s=f12638b6db44015b3984fe99cda57e23 560w, https://mintcdn.com/resend/873NN72QQCCHs00J/images/replit-integration.png?w=840&fit=max&auto=format&n=873NN72QQCCHs00J&q=85&s=418a2cea8140f612a47dbe1b04e25491 840w, https://mintcdn.com/resend/873NN72QQCCHs00J/images/replit-integration.png?w=1100&fit=max&auto=format&n=873NN72QQCCHs00J&q=85&s=31da7dcb80ebb985c0e685e469987569 1100w, https://mintcdn.com/resend/873NN72QQCCHs00J/images/replit-integration.png?w=1650&fit=max&auto=format&n=873NN72QQCCHs00J&q=85&s=5fa3c8956cb7e4599162da358762dfbb 1650w, https://mintcdn.com/resend/873NN72QQCCHs00J/images/replit-integration.png?w=2500&fit=max&auto=format&n=873NN72QQCCHs00J&q=85&s=2a108ec2f5bb1b0aeb5eb3629f4a79f6 2500w" />

<Note>
  Replit tracks the details of your Resend integration in the [Integrations
  page](https://replit.com/integrations).
</Note>


# What are Resend account sending limits?
Source: https://resend.com/docs/knowledge-base/resend-sending-limits

Learn what different sending limits apply to accounts.

Resend regulates sending emails in two ways:

1. sending volume
2. sending rate

These limits help improve your deliverability and likelihood of reaching your recipient's inbox.

## Free Account Daily and Monthly Sending Limits

Free accounts have a daily sending limit of 100 emails/day and 3,000 emails/month. Multiple `To`, `CC`, or `BCC` recipients count towards this limit.

## Paid Plan Limit

* Transactional Pro and Scale plans have no daily limits, though the plan tier will dictate the monthly limit. To see your current month usage, view the [**Usage page**](https://resend.com/settings/usage). Multiple `To`, `CC`, or `BCC` recipients count towards the monthly limit.
* Marketing Pro plans have no sending limits.

## Rate Limits

All accounts start with a rate limit of 2 requests per second. The [rate limits](/api-reference/introduction#rate-limit) follow the [IETF standard](https://datatracker.ietf.org/doc/html/draft-ietf-httpapi-ratelimit-headers) for stating the rate limit in the response header. If you have specific requirements, [contact support](https://resend.com/help) to request a rate increase.

## Bounce Rate

All accounts must maintain a bounce rate of under **4%**. The [**Metrics page**](https://resend.com/metrics) within an account and/or [webhooks](https://resend.com/docs/dashboard/webhooks/event-types#email-bounced) allow you to monitor your account bounce rates.

Maintaining a bounce rate above 4% may result in a temporary pause in sending until the bounce rate is reduced.

Tips to keep a bounce rate low:

* Remove inactive user email addresses from email lists.
* Only send to recipients who have given consent to receive email.
* When testing, avoid sending to fake email addresses. Use Resend's [test email addresses](/dashboard/emails/send-test-emails) instead.
* If you are using open/click tracking, periodically remove recipients who are not engaging with your emails from your email lists.

## Spam Rate

All accounts must have a spam rate of under **0.08%**. The [**Metrics page**](https://resend.com/metrics) within an account and/or [webhooks](https://resend.com/docs/dashboard/webhooks/event-types#email-complained) allow you to monitor your account spam rates.

Maintaining a spam rate over 0.08% may result in a temporary pause in sending until the spam rate is reduced.

Tips to keep a spam rate low:

* Give recipients an easy way to opt-out of emails.
* Send relevant and timely emails.
* Only send to recipients who have given consent to receive email.


# AWS Route 53
Source: https://resend.com/docs/knowledge-base/route53

Verify your domain on Route 53 with Resend.

## Add Domain to Resend

First, log in to your [Resend Account](https://resend.com/login) and [add a domain](https://resend.com/domains).

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=418dd93c2f2ead0b0d83d1b7c2fb0970" data-og-width="3360" width="3360" data-og-height="2100" height="2100" data-path="images/dashboard-domains-resend-add-domain.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=28a4feab47f2b86c34c7b1314f636f0c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bf121272193472fdd2c882fe4b29ced5 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=950e2318cb41511a6f7105afa50be42c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e5a7d9a4d237a3435e8fffb85c3650f1 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a4944168fa1595f1843c8789944f1ef3 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=17d0c63a766375cab10239e4025c8dac 2500w" />

<Tip>
  It is [best practice to use a
  subdomain](/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain)
  (updates.example.com) instead of the root domain (example.com). This allows
  for proper reputation segmentation based on topics or purpose (e.g.
  transactional and marketing).
</Tip>

## Log in to Route 53

Then, log in to your [AWS Management Console, and open Route 53 console](https://console.aws.amazon.com/route53/), then click on your domain name. From there, click on `Create Record`.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-createrecord.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=93d90903872f328b3f593e933d29f4fe" data-og-width="1510" width="1510" data-og-height="908" height="908" data-path="images/dashboard-domains-route53-createrecord.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-createrecord.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f157974546c8ac8cd07262b8fdab45a5 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-createrecord.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6caee08a6cf8d5a949ad1aae3fe6dd38 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-createrecord.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=421baff4e1d4371491d7ec453e23e1a1 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-createrecord.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4fee560a03261e4848eb423f1dde74cc 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-createrecord.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8380bdcb997d868690442bde7ec1e6ea 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-createrecord.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=17d29e4a7e487e2505c4f05f18acf55d 2500w" />

## Add MX SPF Record

1. Type in `send` for the `Record name`.
2. Select the `Record type` dropdown, and choose `MX`.
3. Copy the MX Value from your domain in Resend into the `Value` field.
4. Be sure to include the `10` in the `Value` field, as seen in the screenshot.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bb0db2dd2809135194cfb62b695225cd" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a95639f0752fdbaefd0eae3b93ec6255 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9e579bee139584def82c0a8688466681 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=80c20d31f9598b0f8aeb4b267725b4fe 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f66dc758dec3ac85919063c4bb66f4d5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=187033c1e79e5f6f3b47fa0466def756 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a0531e4d1d25117efaef896d40331e3 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8b798e983ecec8edb48c777143edfce5" data-og-width="1512" width="1512" data-og-height="909" height="909" data-path="images/dashboard-domains-route53-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4ca4c23bb9f9b18be5116fc7008839ce 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=37225bcc1842c60201f98742d53b11b2 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=7319e53b05ce4b6151c9f6f26a6d5cd8 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=52013e3042894a27e412e6a912c3a6a4 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=7661a013018e9118ef4c56c3a4d625ee 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=18af999a962838f89a4f02bb796d6851 2500w" />

Below is a mapping of the record fields from Resend to Route 53:

| Route 53       | Resend           | Example Value                              |
| -------------- | ---------------- | ------------------------------------------ |
| Record Type    | Type             | `MX Record`                                |
| Record name    | Name             | `send`                                     |
| Value          | Value & Priority | `10 feedback-smtp.us-east-1.amazonses.com` |
| TTL            | -                | `Use Route 53 Default (300)`               |
| Routing policy | -                | `Simple routing`                           |

<Info>
  Route 53 does not label the `priority` column, and you will need to add this
  in to the `Value` section, as shown in the screenshot. Do not use the same
  priority for multiple records. If Priority `10` is already in use, try a
  number slightly higher like `11` or `12`.
</Info>

## Add TXT SPF Record

In the same section, choose `Add another record`:

1. Type in `send` for the `Record name`.
2. Click the `Record type` dropdown.
3. Select the `Record type` dropdown, and choose `TXT`.
4. Copy TXT Value from your domain in Resend into the `Value` field.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=747425d0a224baeee2846c9a707d5bbc" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=04f13a4953c918b5ffa05474c6e6190c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fa09e290427c24278edb3306e241e2f0 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4e796dc0356e2176d0dfa9467aa9af8f 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5e27ef23ba82f5fe62d483849c5a8ec5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=991e5fe09e65097107fafe4de36c0bda 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6fd70252df24dce6a9768e38d5c75ae0 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=79d4f534f637964bc06005f34cafe92b" data-og-width="1509" width="1509" data-og-height="908" height="908" data-path="images/dashboard-domains-route53-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6d717b2919bf295508e8e8f9ff1f9598 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=128c1c173c00d7a60a4d81bd58bfd453 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b9b42bc3a7182b042d3c467a17853cd2 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d0b6b17d05cd06a1534d21793e87d8c3 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a198633b1b07f28040b3b4086836e474 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=65273710240e189d588886d4a4bfcc9b 2500w" />

Below is a mapping of the record fields from Resend to Route 53:

| Route 53       | Resend | Example Value                         |
| -------------- | ------ | ------------------------------------- |
| Record type    | Type   | `TXT Record`                          |
| Record name    | Name   | `send`                                |
| Value          | Value  | `"v=spf1 include:amazonses.com ~all"` |
| TTL            | -      | `Use Route 53 Default (300)`          |
| Routing policy | -      | `Simple routing`                      |

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

## Add TXT DKIM Records

In the same section, choose `Add another record`:

1. Type in `resend._domainkey` for the the `Record name`.
2. Change the `Record Type` to `TXT`.
3. Copy the TXT Value value from your domain in Resend to the `Value` text box.
4. Click on `Create Records`.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=345d1dc6b7c138dbd92bd6928c634bd9" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/dashboard-domains-resend-dkim.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=37e5d282deda4e727e9f002cf5b8f0dd 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=978f4a7f13387c0d721acd80a944123c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd473e4cdd467d31c1e2d4a507f5d914 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=784706a47cae7451a0200c461831bc30 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9780d5ff17771270ed33a0176bd7bd55 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=46f59e55a1a791b4a32e13bc49e5f0cd 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-dkim-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=00e9fa493cb8a6541fa0d16323b1a7af" data-og-width="1513" width="1513" data-og-height="912" height="912" data-path="images/dashboard-domains-route53-dkim-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-dkim-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=619baf1427240a166a744fef9ca74a42 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-dkim-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=36af0efabddd9748dd777d9bc596e41c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-dkim-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=14c0f4ecf37ed85b4641fd84ec2857b4 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-dkim-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=94372258a3c022a4bce9e85a0bdc4442 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-dkim-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=85645af66181e8c4d50e32b83e1c29d7 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-route53-dkim-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=283bcdf7d90228749ed25774ddafe286 2500w" />

Below is a mapping of the record fields from Resend to Route 53:

| Route 53       | Resend | Example Value                |
| -------------- | ------ | ---------------------------- |
| Record type    | Type   | `TXT Record`                 |
| Record name    | Name   | `resend._domainkey`          |
| Value          | Value  | `p=example_demain_key_value` |
| TTL            | -      | `Use Route 53 Default (300)` |
| Routing policy | -      | `Simple routing`             |

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or
  `resend._domainkey.subdomain` if you're using a subdomain).
</Info>

## Complete Verification

Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take up to 5 hours to complete the verification process (often much faster).

## Troubleshooting

If your domain is not successfully verified, these are some common troubleshooting methods.

<AccordionGroup>
  <Accordion title="Resend shows my domain verification failed.">
    Review the records you added to Route 53 to rule out copy and paste errors.
  </Accordion>

  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).
  </Accordion>
</AccordionGroup>


# How to prevent bounces with @privaterelay.appleid.com recipients?
Source: https://resend.com/docs/knowledge-base/sending-apple-private-relay

Sending to Apple Private Email Relay requires specific configuration steps to ensure your emails get delivered

If your website or application supports Sign In with Apple, your customers have the option to receive emails from you via Apple’s Private Email Relay service. This feature allows users to keep their actual email addresses private when they sign up or log in.

When a user selects the Hide My Email option, Apple assigns them a unique, randomly generated email address under the `@privaterelay.appleid.com` domain, which you can link to that specific user.

To ensure your emails are delivered through Apple’s Private Email Relay, you must first access the Apple Developer Portal and navigate to `Certificates, Identifiers & Profiles` > `More` > `Sign in with Apple for Email Communication` > `Configure`.

<Info>
  **Apple Offers Multiple Hide My Email Services**

  Starting with iOS 15, Apple provides two separate Hide My Email services—one through Sign in with Apple and another via iCloud+.

  This guide is specifically for apps and websites utilizing Sign in with Apple, which generates a unique email address for account creation and login purposes.
</Info>

## Register your sending domains

Apple mandates that you list the domains from which you will send emails to its service. Additionally, if your return-path domain differs from your sending domain, you must include that as well.

If you use Resend, note that its return-path domain is different since it operates through a subdomain. You will find this subdomain in your Domain settings, formatted as `send.yourdomain.tld` or `send.yoursubdomain.yourdomain.tld` for MX and SPF records. Ensure you add both your primary domain and the subdomain as Apple Email Sources.

## Register your email addresses

Alongside your Sending Domains, Apple requires registration of all email addresses used to send messages from those domains.

You can add these email addresses one by one or in a comma-separated list. If you use other email sources outside of Resend to send messages to Private Relay addresses, include those as well.

## Authenticate your sending domains

Since Resend mandates SPF and DKIM authentication for all domains sending emails through its service, your domain will automatically meet Apple’s authentication requirements.

## Still experiencing bounces from @privaterelay.appleid.com?

At times, emails sent to `@privaterelay.appleid.com` may still bounce. While the bounce messages may not always contain detailed explanations, common reasons include:

* The user has deleted their Hide My Email address from Apple’s settings.
* The user has exceeded their daily limit of 100 emails sent to and from their Hide My Email address.
* A misconfiguration in your settings—double-check that all Sending Domains and From Addresses are correctly registered and authenticated with Apple.

Apple allows the account owner and admins in the Apple Developer Portal to receive notifications if messages fail to deliver through the relay. You can enable this setting in the portal.

***

Once you have completed these three steps, you will be ready to send emails to customers using Hide My Email addresses via Apple’s Private Email Relay service.

For additional details on Apple Private Email Relay and configuration options, refer to Apple’s official documentation:

* [Apple: Configure Private Email Relay Service](https://developer.apple.com/help/account/configure-app-capabilities/configure-private-email-relay-service/)
* [Apple: Communicating Using the Private Email Relay Service](https://developer.apple.com/documentation/signinwithapple/communicating-using-the-private-email-relay-service/)


# Should I add an unsubscribe link to all of my emails sent with Resend?
Source: https://resend.com/docs/knowledge-base/should-i-add-an-unsubscribe-link

Learn best practices about using unsubscribe links.

Transactional emails are generally exempt from including an unsubscribe link. Unlike marketing emails, transactional emails serve a functional purpose, such as account confirmation, password resets, and order confirmations.

As a best practice, we recommend telling recipients how to opt out of receiving future email from you if the content is more related to nurturing relationships with your customers, rather than pragmatic, action-oriented emails.

Laws enforced by the FTC and GDPR prioritize giving recipients an easy way to give and withdraw their consent to recieving email marketing content. Additionally, not having an option for opting out of emails risks recipients complaining or marking the email as spam, which can hurt your reputation as a sender.

Here is more on how to [manually add and manage unsubscribe links](https://resend.com/docs/dashboard/emails/add-unsubscribe-to-transactional-emails).

If you're using [Resend Broadcasts](https://resend.com/docs/dashboard/audiences/managing-unsubscribe-list), the unsubscribe headers are added automatically to your emails. You can include the Unsubscribe Footer in your Broadcasts, which will be automatically replaced with the correct link for each contact or use `{{{RESEND_UNSUBSCRIBE_URL}}}` as a link target should you want to customize the unsubscribe footer.


# Squarespace
Source: https://resend.com/docs/knowledge-base/squarespace

Verify your domain on Squarespace with Resend.

## Add Domain to Resend

First, log in to your [Resend Account](https://resend.com/login) and [add a domain](https://resend.com/domains).

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=418dd93c2f2ead0b0d83d1b7c2fb0970" data-og-width="3360" width="3360" data-og-height="2100" height="2100" data-path="images/dashboard-domains-resend-add-domain.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=28a4feab47f2b86c34c7b1314f636f0c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bf121272193472fdd2c882fe4b29ced5 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=950e2318cb41511a6f7105afa50be42c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e5a7d9a4d237a3435e8fffb85c3650f1 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a4944168fa1595f1843c8789944f1ef3 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=17d0c63a766375cab10239e4025c8dac 2500w" />

<Tip>
  It is [best practice to use a
  subdomain](/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain)
  (updates.example.com) instead of the root domain (example.com). This allows
  for proper reputation segmentation based on topics or purpose (e.g.
  transactional and marketing).
</Tip>

## Log in to Squarespace

Log in to your [Squarespace domains page](https://account.squarespace.com/domains) and click on your domain.

<img alt="Domain Details" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-domains-main.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8362f1932f033cb983149883a9a459b6" data-og-width="3808" width="3808" data-og-height="2128" height="2128" data-path="images/squarespace-domains-main.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-domains-main.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2cfa2630897112928ce232a48172fa3a 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-domains-main.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=641174111e56fc6637626fc803605cda 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-domains-main.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f98c1e7d95c5738c78d7194f763ff2b8 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-domains-main.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2ea6b44129e47e10b447d2adafdeffdb 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-domains-main.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=abba6bf36e054e1f1ef314caf904ae21 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-domains-main.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1e26b1739de84904edccd309a17fe8d5 2500w" />

## Add MX SPF Record

Scroll down to the **Custom records** section and select `Add record` on Squarespace.

1. Type `send` for the `Host` of the record.
2. Set the `Type` to `MX`.
3. Set the `Priority` to `10`.
4. Use the Default 4 hours for `TTL`.
5. Copy the MX Value from Resend into the `Mail Server` field
6. Select `Save`.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bb0db2dd2809135194cfb62b695225cd" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a95639f0752fdbaefd0eae3b93ec6255 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9e579bee139584def82c0a8688466681 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=80c20d31f9598b0f8aeb4b267725b4fe 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f66dc758dec3ac85919063c4bb66f4d5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=187033c1e79e5f6f3b47fa0466def756 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a0531e4d1d25117efaef896d40331e3 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-mx.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1222dfd2f85a612e61a52f15c2ac9818" data-og-width="3760" width="3760" data-og-height="2080" height="2080" data-path="images/squarespace-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-mx.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=57997b35909a2444d42950b6fe38b3c6 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-mx.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=adb6c9f2f806b66059441757d543f182 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-mx.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8b67b3af818b09e029134f251f3dbc91 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-mx.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=4a4a248cefac6d882119b5496f18cb4f 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-mx.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=be2097df4c882c59e004058354d716f4 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-mx.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c6811425bbfebd859c0f05539108dbef 2500w" />

Below is a mapping of the record fields from Resend to Squarespace:

| Squarespace | Resend   | Example Value                           |
| ----------- | -------- | --------------------------------------- |
| Type        | Type     | `MX`                                    |
| Host        | Name     | `send`                                  |
| TTL         | -        | `4 hrs` (default)                       |
| Mail Server | Value    | `feedback-smtp.us-east-1.amazonses.com` |
| Priority    | Priority | `10`                                    |

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

<Info>
  Do not use the same priority for multiple records. If Priority `10` is already
  in use, try a number slightly higher like `11` or `12`.
</Info>

## Add TXT SPF Record

In the same **Custom records** section, select `Add Record` on Squarespace.

1. Type `send` for the `Host` of the record.
2. Set the `Type` to `TXT`.
3. Use the Default 4 hours for `TTL`.
4. Copy the TXT Value from Resend into the `Text` field
5. Select `Save`.

Add the **TXT Record** from your domain in Resend to Squarespace and click "Save".

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=747425d0a224baeee2846c9a707d5bbc" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=04f13a4953c918b5ffa05474c6e6190c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fa09e290427c24278edb3306e241e2f0 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4e796dc0356e2176d0dfa9467aa9af8f 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5e27ef23ba82f5fe62d483849c5a8ec5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=991e5fe09e65097107fafe4de36c0bda 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6fd70252df24dce6a9768e38d5c75ae0 2500w" />

<br />

<img alt="Domain Details" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-txt.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=13d1b0604c22b16161d1b99e9bc2f8d8" data-og-width="3808" width="3808" data-og-height="2128" height="2128" data-path="images/squarespace-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-txt.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c024badbaf6d991dbd41e383c098431c 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-txt.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=a830dad19bc8133f259f863adb36ab93 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-txt.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9d227072d138968d89b2dea3f3ccfe4d 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-txt.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=321a0bce5df0f7da026b74aed2a2e83c 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-txt.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8176975bed1c18a10f54fdc0c87f1b68 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-spf-txt.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=77dc840c794b2a7ccfdc8210510ae320 2500w" />

Below is a mapping of the record fields from Resend to Squarespace:

| Squarespace | Resend | Example Value                         |
| ----------- | ------ | ------------------------------------- |
| Type        | Type   | `TXT`                                 |
| Host        | Name   | `send`                                |
| TTL         | -      | `4 hrs` (default)                     |
| Text        | Value  | `"v=spf1 include:amazonses.com ~all"` |

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

## Add TXT DKIM Records

In the same **Custom records** section, select `Add Record` on Squarespace.

1. Type `resend._domainkey` for the `Host` of the record.
2. Set the `Type` to `TXT`.
3. Use the Default 4 hours for `TTL`.
4. Copy the TXT Value from Resend into the `Text` field
5. Select `Save`.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=345d1dc6b7c138dbd92bd6928c634bd9" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/dashboard-domains-resend-dkim.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=37e5d282deda4e727e9f002cf5b8f0dd 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=978f4a7f13387c0d721acd80a944123c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd473e4cdd467d31c1e2d4a507f5d914 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=784706a47cae7451a0200c461831bc30 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9780d5ff17771270ed33a0176bd7bd55 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=46f59e55a1a791b4a32e13bc49e5f0cd 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-dkim-txt.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=119a6ade9688e65297e2dbff30e8256d" data-og-width="3808" width="3808" data-og-height="2128" height="2128" data-path="images/squarespace-dkim-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-dkim-txt.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2cad01947e7fd0a574f1d0a792a075d0 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-dkim-txt.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=6d08868ad91b6f64a81f9cb707077312 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-dkim-txt.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1ab2bf39649d6306dd574c0fc1be5c5f 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-dkim-txt.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e94c27d41e5ed94bdb3e196214f1f9a1 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-dkim-txt.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=49a665af8c596915b38d56e13d679ca6 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/squarespace-dkim-txt.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=70510620dfff16e005fc60e184ea1d38 2500w" />

Below is a mapping of the record fields from Resend to Squarespace:

| Squarespace | Resend | Example Value                |
| ----------- | ------ | ---------------------------- |
| Type        | Type   | `TXT`                        |
| Host        | Name   | `resend._domainkey`          |
| TTL         | -      | `4 hrs` (default)            |
| Text        | Value  | `p=example_demain_key_value` |

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or
  `resend._domainkey.subdomain` if you're using a subdomain).
</Info>

## Complete Verification

Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take up to 72 hours to complete the verification process (often much faster).

## Troubleshooting

If your domain is not successfully verified, these are some common troubleshooting methods.

<AccordionGroup>
  <Accordion title="Resend shows my domain verification failed.">
    Review the records you added to Squarespace to rule out copy and paste errors.
  </Accordion>

  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).
  </Accordion>
</AccordionGroup>


# Strato
Source: https://resend.com/docs/knowledge-base/strato

Verify your domain on Strato with Resend.

## Add Domain to Resend

First, log in to your [Resend Account](https://resend.com/login) and [add a domain](https://resend.com/domains).

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=418dd93c2f2ead0b0d83d1b7c2fb0970" data-og-width="3360" width="3360" data-og-height="2100" height="2100" data-path="images/dashboard-domains-resend-add-domain.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=28a4feab47f2b86c34c7b1314f636f0c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bf121272193472fdd2c882fe4b29ced5 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=950e2318cb41511a6f7105afa50be42c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e5a7d9a4d237a3435e8fffb85c3650f1 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a4944168fa1595f1843c8789944f1ef3 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=17d0c63a766375cab10239e4025c8dac 2500w" />

<Tip>
  It is [best practice to use a
  subdomain](/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain)
  (updates.example.com) instead of the root domain (example.com). This allows
  for proper reputation segmentation based on topics or purpose (e.g.
  transactional and marketing).
</Tip>

## Log in to Strato

Log in to your [Strato account](https://www.strato.es/apps/CustomerService):

1. In the left-hand navigation, go to Domains > Manage Domain.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-domain-manager.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=684004473fd6679100907921ce2767df" data-og-width="2676" width="2676" data-og-height="1556" height="1556" data-path="images/dashboard-domains-strato-domain-manager.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-domain-manager.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8ee1ca43277416aad511bc02c0645a22 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-domain-manager.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=b31c4767e2c4b763f9c2e85b9f33863b 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-domain-manager.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5f862d4cae80d302482316c1fa53c8d6 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-domain-manager.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=406ee02fefe9f482a0e369991962df06 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-domain-manager.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=412b6303f288d15ffcb2a2167cfe67d4 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-domain-manager.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=74d186e01e0a9784081c61fc7ac15901 2500w" />

## Add MX SPF Record

1. On the domain page, click on the gear icon to redirect to Settings.
2. Create a new subdomain named `send`.
3. Navigate to the subdomain settings.
4. Go to the `DNS` tab, you'll see a list of DNS records you can update. Click on `manage` MX record.
5. Select own mail server.
6. Copy MX value from Resend into `Server` field.
7. Use the default priority `Low`.
8. Save settings.

<Info>
  By default, Strato domains use Strato mail server which uses `mail` as their
  send path. You will need to bypass this default behavior by creating a
  subdomain and setting the MX record there.
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bb0db2dd2809135194cfb62b695225cd" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a95639f0752fdbaefd0eae3b93ec6255 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9e579bee139584def82c0a8688466681 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=80c20d31f9598b0f8aeb4b267725b4fe 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f66dc758dec3ac85919063c4bb66f4d5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=187033c1e79e5f6f3b47fa0466def756 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a0531e4d1d25117efaef896d40331e3 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9c884d56f98f468503cb10d28b6cd60f" data-og-width="2676" width="2676" data-og-height="1542" height="1542" data-path="images/dashboard-domains-strato-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8b24e49a7ea899b205f83b1c33cb50d3 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=35e741a5c70583dd89bb139455f51fec 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ff97f297c4265a67c28ee0e158b22d80 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=feca11b40b1dd13d6260bd953201ee97 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=3c2851e92716db04d8440e4c4b9b556a 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=ae00fe866d20320ce48755d28ed3d052 2500w" />

Below is a mapping of the record fields from Resend to Strato:

| Strato      | Resend   | Example Value                            |
| ----------- | -------- | ---------------------------------------- |
| Type        | Type     | `MX Record`                              |
| Name        | Name     | `send`                                   |
| Mail server | Value    | `feedback-smtp.eu-west-1.amazonses.com.` |
| Priority    | Priority | `Low`                                    |

## Add TXT SPF Record

On the base domain settings:

1. Go to the `DNS` tab.
2. Manage TXT and CNAME records.
3. On the bottom, click `Create another record`.
4. Choose `TXT` type.
5. Add `send` for the `name` record.
6. For `value` input `v=spf1 include:amazonses.com ~all`.
7. Save settings.

<Info>
  Strato provides a standard DMARC record similar to Resend's recommended value:
  `v=DMARC1;p=reject;`.
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=747425d0a224baeee2846c9a707d5bbc" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=04f13a4953c918b5ffa05474c6e6190c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fa09e290427c24278edb3306e241e2f0 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4e796dc0356e2176d0dfa9467aa9af8f 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5e27ef23ba82f5fe62d483849c5a8ec5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=991e5fe09e65097107fafe4de36c0bda 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6fd70252df24dce6a9768e38d5c75ae0 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d3484aaa1f6eda375fce393939d69ada" data-og-width="1458" width="1458" data-og-height="933" height="933" data-path="images/dashboard-domains-strato-spf-dkim.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=327048341c74c44148c929533bedf240 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8e49b30305b73da1752c044eced85510 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9b990bff9396ae9b4e480941d95e9043 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=1962985af4b2105ab83333fc00bb6bf5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9494f3f61da603afb96dffd6768830d2 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4182c3c716cb8dde28c0ef5d48a4cff3 2500w" />

Below is a mapping of the record fields from Resend to Strato:

| Strato | Resend | Example Value                       |
| ------ | ------ | ----------------------------------- |
| Type   | Type   | `TXT Record`                        |
| Name   | Name   | `send`                              |
| Value  | Value  | `v=spf1 include:amazonses.com ~all` |

## Add TXT DKIM Records

On the same TXT and CNAME manage page:

1. Click `Create another record`.
2. Choose `TXT` type.
3. Add `resend._domainkey` for the `Name` record.
4. Copy the record value from Resend into the TXT value field.
5. Save settings.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or
  `resend._domainkey.subdomain` if you're using a subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=345d1dc6b7c138dbd92bd6928c634bd9" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/dashboard-domains-resend-dkim.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=37e5d282deda4e727e9f002cf5b8f0dd 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=978f4a7f13387c0d721acd80a944123c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd473e4cdd467d31c1e2d4a507f5d914 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=784706a47cae7451a0200c461831bc30 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9780d5ff17771270ed33a0176bd7bd55 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=46f59e55a1a791b4a32e13bc49e5f0cd 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=d3484aaa1f6eda375fce393939d69ada" data-og-width="1458" width="1458" data-og-height="933" height="933" data-path="images/dashboard-domains-strato-spf-dkim.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=327048341c74c44148c929533bedf240 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8e49b30305b73da1752c044eced85510 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9b990bff9396ae9b4e480941d95e9043 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=1962985af4b2105ab83333fc00bb6bf5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9494f3f61da603afb96dffd6768830d2 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-strato-spf-dkim.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4182c3c716cb8dde28c0ef5d48a4cff3 2500w" />

Below is a mapping of the record fields from Resend to Strato:

| Strato | Resend | Example Value                |
| ------ | ------ | ---------------------------- |
| Type   | Type   | `TXT Record`                 |
| Name   | Name   | `send`                       |
| Value  | Value  | `p=example_demain_key_value` |

<Info>
  Copy DKIM value using the small copy icon in Resend. DKIM records are
  case-sensitive and must match up exactly.
</Info>

## Complete Verification

Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take a few hours to complete the verification process (often much faster).

## Troubleshooting

If your domain is not successfully verified, these are some common troubleshooting methods.

<AccordionGroup>
  <Accordion title="Resend shows my domain verification failed.">
    Review the records you added to Strato to rule out copy and paste errors.
  </Accordion>

  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).
  </Accordion>
</AccordionGroup>


# Send emails with v0 and Resend
Source: https://resend.com/docs/knowledge-base/v0-integration

Learn how to add the Resend integration to your v0 project.

[v0](https://v0.dev) by Vercel is a platform for building web sites, tools, apps, and projects via chat. You can add Resend in a v0 project by asking the chat to add email sending with Resend.

## 1. Add your Resend API key

To use Resend with v0, you'll need to add a Resend API key, which you can create in the [Resend Dashboard](https://resend.com/api-keys).

<Note>
  Do not share your API key with others or expose it in the browser or other
  client-side code.
</Note>

<img src="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/v0-integration.png?fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=cb85c63c4d0bca95571920a08324432f" alt="adding the Resend integration to a v0 chat" data-og-width="3808" width="3808" data-og-height="2128" height="2128" data-path="images/v0-integration.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/v0-integration.png?w=280&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=50b38b9adb1c3bb7ca723541c769c330 280w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/v0-integration.png?w=560&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=2a4b6eb558568a8fff286a1f304ad317 560w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/v0-integration.png?w=840&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=4d17778498f6f98968ecf7091859f85a 840w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/v0-integration.png?w=1100&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=5410e161b281a7347ae4e5f2d66eb215 1100w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/v0-integration.png?w=1650&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=accd2fd395d3105181ac036c532dda7a 1650w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/v0-integration.png?w=2500&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=7a4727d618641d1316bdc9e4bd526832 2500w" />

## 2. Add a custom domain to your Resend account

By default, you can only send emails to your own email address.

To send emails to other email addresses:

1. Add a [custom domain to your Resend account](https://resend.com/domains).
2. Add the custom domain to the `from` field in the `resend` function in v0 (or ask the chat to update these fields).

Get more help adding a custom domain in [Resend's documentation](/dashboard/domains/introduction).


# Vercel
Source: https://resend.com/docs/knowledge-base/vercel

Verify your domain on Vercel with Resend.

<Note>
  This guide helps you verify your domain on Vercel with Resend. We also have
  [an official integration for
  Vercel](https://resend.com/blog/vercel-integration) that helps you set up your
  API keys on Vercel projects so you can start sending emails with Resend. [View
  the integration here](https://vercel.com/resend/~/integrations/resend).
</Note>

## Add Domain to Resend

First, log in to your [Resend Account](https://resend.com/login) and [add a domain](https://resend.com/domains).

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=418dd93c2f2ead0b0d83d1b7c2fb0970" data-og-width="3360" width="3360" data-og-height="2100" height="2100" data-path="images/dashboard-domains-resend-add-domain.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=28a4feab47f2b86c34c7b1314f636f0c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bf121272193472fdd2c882fe4b29ced5 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=950e2318cb41511a6f7105afa50be42c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e5a7d9a4d237a3435e8fffb85c3650f1 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a4944168fa1595f1843c8789944f1ef3 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-add-domain.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=17d0c63a766375cab10239e4025c8dac 2500w" />

<Tip>
  It is [best practice to use a
  subdomain](/knowledge-base/is-it-better-to-send-emails-from-a-subdomain-or-the-root-domain)
  (updates.example.com) instead of the root domain (example.com). This allows
  for proper reputation segmentation based on topics or purpose (e.g.
  transactional and marketing).
</Tip>

## Log in to Vercel

Log in to your [Vercel account](https://vercel.com/login) and select the `Domains` tab.

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-domains.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4b4ab73110a36775175b39587eea68f0" data-og-width="1200" width="1200" data-og-height="676" height="676" data-path="images/dashboard-domains-vercel-domains.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-domains.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=868b49719974b2a5a7cf1e4317f9d987 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-domains.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=eba99de72c3d9a9d9e3e37fc595055f4 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-domains.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=7ddd25da707cccce4df92145b2275ebc 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-domains.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=dd8cd592b4f1b4bad66917ae1f75ce9c 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-domains.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=95272ce43d4cc7a03710f307312137e3 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-domains.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=821b432b4b171a6fa1f562275dcaae07 2500w" />

## Add MX SPF Record

Copy and paste the values in Resend to Vercel.

1. Type `send` for the `Name` of the record in Vercel.
2. Expand the `Type` dropdown and select `MX`.
3. Copy the record value from Resend into the `Value` field in Vercel.
4. Add `10` for the `Priority`.
5. Select `Add`.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=bb0db2dd2809135194cfb62b695225cd" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a95639f0752fdbaefd0eae3b93ec6255 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9e579bee139584def82c0a8688466681 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=80c20d31f9598b0f8aeb4b267725b4fe 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=f66dc758dec3ac85919063c4bb66f4d5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=187033c1e79e5f6f3b47fa0466def756 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2a0531e4d1d25117efaef896d40331e3 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-mx.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9d91de47106d0bd4005bac0cfe68779e" data-og-width="1200" width="1200" data-og-height="676" height="676" data-path="images/dashboard-domains-vercel-spf-mx.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-mx.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a15788a1c7a677819fa30090d833408f 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-mx.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8e8d118f8a334dfcdd4fb33992eca135 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-mx.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fc309c65c06824e96d52c897345095ba 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-mx.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cf368fb5e6d3e0a692943cb5de5c5619 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-mx.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=dc10e67a9d132c1e8529ca52182cca3f 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-mx.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=e7189a5702cc345501239d5ea8c0ffcc 2500w" />

Below is a mapping of the record fields from Resend to Vercel:

| Vercel   | Resend   | Example Value                           |
| -------- | -------- | --------------------------------------- |
| Type     | Type     | `MX Record`                             |
| Name     | Name     | `send`                                  |
| Value    | Value    | `feedback-smtp.us-east-1.amazonses.com` |
| TTL      | -        | `Use Vercel default (60)`               |
| Priority | Priority | `10`                                    |

<Info>
  Do not use the same priority for multiple records. If Priority `10` is already
  in use on another record, try a number slightly higher like `11` or `12`.
</Info>

## Add TXT SPF Record

In the same section, add another record in Vercel.

1. Type `send` for the `Name` of the record.
2. Expand the `Type` dropdown and select `TXT`.
3. Copy the `TXT` record value from Resend into the `Value` field in Vercel.
4. Use the default TTL of `60`.
5. Select `Add`.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `send.example.com`, paste only `send` (or `send.subdomain` if you're using a
  subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=747425d0a224baeee2846c9a707d5bbc" data-og-width="3024" width="3024" data-og-height="1888" height="1888" data-path="images/dashboard-domains-resend-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=04f13a4953c918b5ffa05474c6e6190c 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=fa09e290427c24278edb3306e241e2f0 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4e796dc0356e2176d0dfa9467aa9af8f 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=5e27ef23ba82f5fe62d483849c5a8ec5 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=991e5fe09e65097107fafe4de36c0bda 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=6fd70252df24dce6a9768e38d5c75ae0 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=27b350fc1a7745dd47c623fdaf9a2df4" data-og-width="1200" width="1200" data-og-height="676" height="676" data-path="images/dashboard-domains-vercel-spf-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=a991246f8e4adcaa35f5788868e9bdc6 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=2af46aaacb4543bfe8cbe85b612d0e17 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=7508d7938fa2d77a16bd3b97db944b7c 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=1f19f53e80a9dc88ab3eb96b40d5a020 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cb8ab4b1eaa2ade06e6742aed45972da 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-spf-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=03bedfa6fbfb1862fd2e2e58c2fa43d1 2500w" />

Below is a mapping of the record fields from Resend to Vercel:

| Vercel | Resend | Example Value                         |
| ------ | ------ | ------------------------------------- |
| Type   | Type   | `TXT Record`                          |
| Name   | Name   | `send`                                |
| Value  | Value  | `"v=spf1 include:amazonses.com ~all"` |
| TTL    | -      | `Use Vercel default (60)`             |

## Add TXT DKIM Records

In the same section, add another record in Vercel.

1. Type `resend._domainkey` for the `Name` of the record.
2. Expand the `Type` dropdown and select `TXT`.
3. Copy the record value from Resend into the `Value` field in Vercel.

<Info>
  Omit your domain from the record values in Resend when you paste. Instead of
  `resend._domainkey.example.com`, paste only `resend._domainkey` (or
  `resend._domainkey.subdomain` if you're using a subdomain).
</Info>

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=345d1dc6b7c138dbd92bd6928c634bd9" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/dashboard-domains-resend-dkim.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=37e5d282deda4e727e9f002cf5b8f0dd 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=978f4a7f13387c0d721acd80a944123c 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=cd473e4cdd467d31c1e2d4a507f5d914 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=784706a47cae7451a0200c461831bc30 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9780d5ff17771270ed33a0176bd7bd55 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-resend-dkim.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=46f59e55a1a791b4a32e13bc49e5f0cd 2500w" />

<img alt="Domain Details" src="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-dkim-txt.png?fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8553d093e572970b0335c1fe9b83e003" data-og-width="1200" width="1200" data-og-height="676" height="676" data-path="images/dashboard-domains-vercel-dkim-txt.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-dkim-txt.png?w=280&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=18d7072f83f5c00bf9614c140ae32208 280w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-dkim-txt.png?w=560&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9dc50e33021748be6f5c096b04168281 560w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-dkim-txt.png?w=840&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=9c36637c6ed2aa1b442f4538a32b3125 840w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-dkim-txt.png?w=1100&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=11fdf9662ffafb207e26fe564000598b 1100w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-dkim-txt.png?w=1650&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=8b4748250865923f5010bf5443fd6218 1650w, https://mintcdn.com/resend/JHWt09hsc7E33HK2/images/dashboard-domains-vercel-dkim-txt.png?w=2500&fit=max&auto=format&n=JHWt09hsc7E33HK2&q=85&s=4e1844e679ea459fdb8a8e9325980165 2500w" />

Below is a mapping of the record fields from Resend to Vercel:

| Vercel | Resend | Example Value                |
| ------ | ------ | ---------------------------- |
| Type   | Type   | `TXT Record`                 |
| Name   | Name   | `resend._domainkey`          |
| Value  | Value  | `p=example_demain_key_value` |
| TTL    | -      | `Use Vercel default (60)`    |

## Complete Verification

Now click [Verify DNS Records](https://resend.com/domains) on your Domain in Resend. It may take a few hours to complete the verification process (often much faster).

## Troubleshooting

If your domain is not successfully verified, these are some common troubleshooting methods.

<AccordionGroup>
  <Accordion title="Resend shows my domain verification failed.">
    Review the records you added to Vercel to rule out copy and paste errors.
  </Accordion>

  <Accordion title="It has been longer than 72 hours and my domain is still Pending.">
    [Review our guide on a domain not verifying](/knowledge-base/what-if-my-domain-is-not-verifying).
  </Accordion>
</AccordionGroup>


# Domain and/or IP Warm-up Guide
Source: https://resend.com/docs/knowledge-base/warming-up

Learn how to warm up a domain or IP to avoid deliverability issues.

Warming up a domain or IP refers to the practice of progressively increasing your sending volume to maximize your deliverability. The goal is to send at a consistent rate and avoid any spikes in email volume that might be concerning to inbox service providers.

Whenever you change your sending patterns—whether because you're using a new domain, a new IP, or a new vendor, or because your volume will increase—you should warm-up your domain and/or IP.

A thought-out warm-up plan limits greylisting and delivery throttling, as well as helping establish a good domain and IP reputation.

As your volume increases, you'll need to monitor your bounce rate to ensure it remains below 4%, and your spam rate below 0.08%. An increase in these rates would be a sign that your warm-up plan needs to be slowed down and an investigation into the root causes of the increases started.

Following these rules and metrics will establish a good domain reputation.

<Info>
  Each sender has different constraints and needs, so these numbers are meant as
  a baseline. Our [Support team](https://resend.com/help) can work with you on
  devising a plan adapted to your needs.
</Info>

# Existing domain

If you're already sending from an existing domain with established reputation and volumes, you can use the following guidelines to start sending with Resend.

| **Day** | **Messages per day** | **Messages per hour** |
| ------- | -------------------- | --------------------- |
| **1**   | Up to 1,000 emails   | 100 Maximum           |
| **2**   | Up to 2,500 emails   | 300 Maximum           |
| **3**   | Up to 5,000 emails   | 600 Maximum           |
| **4**   | Up to 5,000 emails   | 800 Maximum           |
| **5**   | Up to 7,500 emails   | 1,000 Maximum         |
| **6**   | Up to 7,500 emails   | 1,500 Maximum         |
| **7**   | Up to 10,000 emails  | 2,000 Maximum         |

# New domain

Before you start sending emails with a brand new domain, it's especially important to have a warm-up plan so you can maximize your deliverability right from the start.

| **Day** | **Messages per day** | **Messages per hour** |
| ------- | -------------------- | --------------------- |
| **1**   | Up to 150 emails     |                       |
| **2**   | Up to 250 emails     |                       |
| **3**   | Up to 400 emails     |                       |
| **4**   | Up to 700 emails     | 50 Maximum            |
| **5**   | Up to 1,000 emails   | 75 Maximum            |
| **6**   | Up to 1,500 emails   | 100 Maximum           |
| **7**   | Up to 2,000 emails   | 150 Maximum           |

# Warming up your Dedicated IP with Resend

In order for a Dedicated IP to be beneficial or useful, you first need to establish a certain sending volume and patterns. Once you've established this volume and these patterns, our [Support team](https://resend.com/help) can set it up for you.

We provide an automatic warm-up process so that you can simply focus on sending.

[Learn more about requesting a Dedicated IP](https://resend.com/docs/knowledge-base/how-do-dedicated-ips-work#how-to-request-a-dedicated-ip).

# What about third-party warm-up services?

We know email deliverability is important, and it can be tempting to use services promising quick fixes. However, using tools that artificially boost engagement can harm your long-term sender reputation. These services often rely on manipulating anti-spam filters, which can backfire as email providers like Gmail adjust their systems.

Instead, we recommend focusing on sustainable practices—such as sending relevant content, maintaining a clean list, and using proper authentication. These methods build trust with email providers and improve your deliverability over time.


# What attachment types are not supported?
Source: https://resend.com/docs/knowledge-base/what-attachment-types-are-not-supported

Learn which file attachment extensions are unsupported.

Resend accepts all file attachment types except for those in the following list.

|          |       |       |         |           |
| -------- | ----- | ----- | ------- | --------- |
| .adp     | .app  | .asp  | .bas    | .bat      |
| .cer     | .chm  | .cmd  | .com    | .cpl      |
| .crt     | .csh  | .der  | .exe    | .fxp      |
| .gadget  | .hlp  | .hta  | .inf    | .ins      |
| .isp     | .its  | .js   | .jse    | .ksh      |
| .lib     | .lnk  | .mad  | .maf    | .mag      |
| .mam     | .maq  | .mar  | .mas    | .mat      |
| .mau     | .mav  | .maw  | .mda    | .mdb      |
| .mde     | .mdt  | .mdw  | .mdz    | .msc      |
| .msh     | .msh1 | .msh2 | .mshxml | .msh1xml  |
| .msh2xml | .msi  | .msp  | .mst    | .ops      |
| .pcd     | .pif  | .plg  | .prf    | .prg      |
| .reg     | .scf  | .scr  | .sct    | .shb      |
| .shs     | .sys  | .ps1  | .ps1xml | .ps2      |
| .ps2xml  | .psc1 | .psc2 | .tmp    | .url      |
| .vb      | .vbe  | .vbs  | .vps    | .vsmacros |
| .vss     | .vst  | .vsw  | .vxd    | .ws       |
| .wsc     | .wsf  | .wsh  | .xnk    |           |


# What counts as email consent?
Source: https://resend.com/docs/knowledge-base/what-counts-as-email-consent

Learn what valid email permission looks like and why it matters.

Getting consent to send email isn’t just a legal requirement. It’s also essential for keeping your deliverability strong and your Resend account in good standing.

This guide explains what valid email permission looks like, why it matters, and how to set it up properly.

## Why consent matters

Many senders assume that if someone provides an email address, that automatically means it’s okay to email them. But that’s not always true and can often cause large-scale deliverability problems, especially for marketing or bulk messages.

Mailbox providers like Gmail and Outlook closely monitor how recipients react to your emails, paying special attention to whether people mark your emails as spam. High complaint rates or low overall engagement signal that your messages weren’t wanted, which can hurt your reputation and lead to filtering, blocking, or delivery issues.

## What *doesn’t* count as permission

These common methods are **not** considered valid:

* Including a clause in your Terms of Service that says users “agree to receive emails”
* Using a **pre-checked** box on your signup form for marketing messages
* Assuming someone is opted in unless they unsubscribe

These approaches violate email best practices and don’t meet legal standards [like GDPR](https://gdpr-info.eu/art-7-gdpr/).

## What *does* count as permission

Valid consent means the recipient **clearly and knowingly agreed** to receive the specific kind of email you're sending.

[According to GDPR](https://gdpr-info.eu/recitals/no-32/) (and general best practices), consent must be:

* **Freely given** – without pressure, bundling, or tricks
* **Specific** – clearly describes the type of messages the user will receive
* **Informed** – the user knows who you are and how you’ll use their data
* **Unambiguous** – requires an active opt-in (like checking a box)

In other words, recipients should be able to consent to each message type from a particular sender.

## What happens if you send without consent?

If you send to recipients who didn’t explicitly opt in, here’s what can happen:

1. Some of those people will **mark the message as spam**.
2. Mailbox providers may **block your mail or filter it to the spam folder**.
3. If your spam complaint or bounce rate remains high, [Resend may have to **pause or terminate your account**](https://resend.com/legal/acceptable-use) to protect our sending reputation.

And this applies *globally*, not just in the EU. Even if your emails are technically legal in your country, violating consent can lead to your mail being blocked or filtered to the spam folder.

## Best practice: Let people say “yes”

The easiest way to get consent is to **ask for it clearly and separately**. Add an unchecked checkbox to your signup form, like this:

>  Yes, I want to receive product updates and occasional marketing emails

**Follow these best practices:**

* Keep it **optional** and **unchecked** by default
* Make the wording clear and specific
* Place it outside of your Terms of Service
* Include a one-click unsubscribe link in every email

<img alt="Example of a consent checkbox and unsubscribe link" src="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/what-counts-as-email-consent.jpeg?fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=db80d9ae5b8eae269c0f7237d0f92ef0" data-og-width="1606" width="1606" data-og-height="757" height="757" data-path="images/what-counts-as-email-consent.jpeg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/what-counts-as-email-consent.jpeg?w=280&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=d35ce96d1b7b4c607070d9908932cdcb 280w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/what-counts-as-email-consent.jpeg?w=560&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=afd7c2b862ed88a2b9431495d9b93b0f 560w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/what-counts-as-email-consent.jpeg?w=840&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=5b777521b33d284a59e95627bf25dd56 840w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/what-counts-as-email-consent.jpeg?w=1100&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=fea05ebebfebed4a052359fd98b15db6 1100w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/what-counts-as-email-consent.jpeg?w=1650&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=0bd5616a0f8551d56ded9434d72e2320 1650w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/what-counts-as-email-consent.jpeg?w=2500&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=7cea1f42d70a29bac52480e6c406d0b0 2500w" />

## Still have questions?

Following best practices helps everyone — your recipients, your deliverability, and the health of the email ecosystem. When you start with clear consent, your messages are the ones people are *glad* to receive.

If you’re new to permission-based sending, please reach out to [Support](https://resend.com/help) and we’ll help you make sure everything’s on track.


# What email addresses to use for testing?
Source: https://resend.com/docs/knowledge-base/what-email-addresses-to-use-for-testing

Learn what email addresses are safe to use for testing with Resend

## Safe email addresses for testing

When testing email functionality, it's important to use designated test addresses to avoid unintended consequences like deliverability issues or spam complaints.

Resend provides a set of safe email addresses specifically designed for testing, ensuring that you can simulate different email events without affecting your domain's reputation.

### Why not use @example.com or @test.com?

Many developers attempt to use domains like `@example.com` or `@test.com` for testing purposes. However, these domains are not designed for email traffic and often reject messages, leading to bounces.

A high bounce rate can negatively impact your sender reputation and affect future deliverability. To prevent this, Resend blocks such addresses and returns a `422 Unprocessable Entity` error if you attempt to send to them.

### List of addresses to use

To help you safely test email functionality, Resend provides the following test addresses, each designed to simulate a different delivery event:

| Address                | Delivery event simulated |
| ---------------------- | ------------------------ |
| `delivered@resend.dev` | Email being delivered    |
| `bounced@resend.dev`   | Email bouncing           |

Using these addresses in your tests allows you to validate email flows without risking real-world deliverability problems. For more help sending test emails, see our [testing documentation](/dashboard/emails/send-test-emails).

Whether you need to confirm that an email has been sent, track engagement events, or simulate a bounce scenario, these addresses provide a controlled and predictable way to test your email integration with Resend.


# What if an email says delivered but the recipient has not received it?
Source: https://resend.com/docs/knowledge-base/what-if-an-email-says-delivered-but-the-recipient-has-not-received-it

Learn the steps to take when an email is delivered, but the recipient does not receive it.

Some emails may be marked as `Delivered` but not reach the recipient's inbox due to various inbox sorting variables. This guide provides reasons for and advice on avoiding such issues.

## Why does this happen

When an email is sent, it is marked as `Delivered` once the recipient server accepts it with a `250 OK` response. However, the server can then direct the email to the inbox, queue it for later, route it to the spam folder, or even discard it. This is done by major inbox providers (e.g., Gmail, Yahoo, Outlook), as well as by IT departments and individual users who set up firewalls or filtering rules.

As a result, even though most legitimate emails should land in the intended inboxes, your message might end up in the spam/junk folder or, in rare cases, be deleted.

**Inbox Providers do not share any information on how the messages are later filtered.** Resend is only notified about the initial acceptance and marks the email as `Delivered`. Any subsequent events (e.g., open/click events, unsubscribes) require recipient engagement.

## How to avoid this

### If you are in contact with the user

The easiest way to solve this is by cooperating with the end user. If you have direct communication with the recipient, you can ask them to **check these places for your email**:

* Corporate spam filters or firewalls
* Personal inbox filtering
* Promotional, spam, or deleted folders
* Group inboxes or queues

If they find it, ask them to mark the email as `Not Spam` or add your domain to an allowlist.

### If you are not in contact with the user

Debugging without direct contact with the user is challenging. However, there are some optimizations that can **improve your chances of delivering to their inbox next time**:

* [Configure DMARC](/dashboard/domains/dmarc) to build trust with the inbox provider
* Warm up new domains slowly before sending large volumes
* Change all links in your email to use your own domain (matching your sender domain)
* Turn off open and click tracking
* Reduce the number of images in your email
* Improve wording to be succinct, clear, and avoid spammy words

We have an [extensive but practical deliverability guide](/knowledge-base/how-do-i-avoid-gmails-spam-folder) that covers these topics in more detail.


# What if my domain is not verifying?
Source: https://resend.com/docs/knowledge-base/what-if-my-domain-is-not-verifying

Learn what steps to take when your domain doesn't seem to verifying.

Verifying a domain involves a few steps:

1. Add your domain to Resend
2. Copy the required DNS records from Resend
3. Add these records to your DNS provider
4. Wait for verification to complete

When this process is completed correctly, your domain will often verify within 15 minutes of adding the DNS records. What should you do if your domain isn't verifying?

<Tip>
  If your are having any conflict issues with the `MX` records, [checkout this
  guide](/knowledge-base/how-do-i-avoid-conflicting-with-my-mx-records).
</Tip>

## Common verification issues

When your domain doesn't verify as expected, it's typically due to DNS configuration issues. This guide will help you troubleshoot and resolve common verification problems.

### Incorrect DNS records

Usually when a domain doesn't verify, it's because the DNS records were not added correctly. Here's how to check:

1. Confirm that you've added all required records (DKIM, SPF, and MX)
2. Verify that the records are added at the correct location (the `send` subdomain, not the root domain)
3. Check that record values match exactly what Resend generated for you
4. Use a DNS lookup tool like [dns.email](https://dns.email) to verify your records are publicly visible

### DNS provider auto-appending domain names

Some DNS providers automatically append your domain name to record MX values, causing verification failures.

**Problem:**

Your MX record appears as:

`feedback-smtp.eu-west-1.amazonses.com.yourdomain.com`

Instead of:

`feedback-smtp.eu-west-1.amazonses.com`

**Solution:**

In your DNS provider, add a trailing period (dot) at the end of the record value:

`feedback-smtp.eu-west-1.amazonses.com.`

The trailing period tells your DNS provider that this is a fully qualified domain name that should not be modified.

<Tip>
  Note: The region your domain is added to is in this MX record. It may be
  `us-east-1`, `eu-west-1`, `ap-northeast-1`, or `sa-east-1` depending on the
  region.
</Tip>

### Nameserver conflicts

If your domain's DNS is managed in multiple places (e.g., Vercel, Cloudflare, your domain registrar), you might be adding records in the wrong location.

**How to check:** Run a nameserver lookup for your domain using a tool like [dns.email](https://dns.email) to see which provider actually controls your DNS. Add the Resend records at that provider, not elsewhere.

### DKIM record value mismatches

The DKIM record must match exactly what Resend generated. Common mistakes include:

1. Adding extra quotes or spaces
2. Truncating long values
3. Adding SPF information to the DKIM record
4. Not copying the entire value

Always copy and paste the exact value from Resend's domain configuration page.

### DNS Propagation

After adding or correcting your DNS records:

1. DNS changes can take up to 72 hours to propagate globally (though often much faster)
2. Use the "Restart verification" button in the Resend dashboard to trigger a fresh verification check
3. If verification still fails after 24 hours, use [dns.email](https://dns.email) to check if your records are visible publicly

## Need more help?

If you've followed all the steps above and your domain still isn't verifying, contact [Resend support](https://resend.com/help) with:

1. Your domain name
2. Screenshots of your DNS configuration

Our team will help identify any remaining issues preventing successful verification.

<AccordionGroup>
  <Accordion title="Check your records in the browser">
    Tools like [dns.email](https://dns.email) allow you to check your DNS records in the browser.

    Go to this URL and replace `yourdomain.com` with the domain you added in Resend.

        <img src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-1.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0eb947321d0b35119432dab44d756260" alt="Check domain records with dns.email" data-og-width="3516" width="3516" data-og-height="2380" height="2380" data-path="images/domain-not-verifying-1.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-1.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9372bcbe9b1c6ad61cf930be2806161a 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-1.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=16824976bc1835d9289b9a9f68b7c10e 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-1.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=28cce8cab4a47ad9bbfbad1bb5ee63ca 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-1.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=70070c347a4b62e0b6776a54aba03002 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-1.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ab959ec4ca1135ca55f27efb4fb6cb73 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-1.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1a4dc79b53ee5e8d0bd6f666821450cb 2500w" />

    You are looking to see the same values that you see in Resend.
  </Accordion>

  <Accordion title="Check your records in the terminal">
    Checking your DNS records in the terminal is just as easy. You can use the `nslookup` command and a record type flag to get the same information.

    Replace `yourdomain.com` with whatever you added as the domain in Resend:

    Check your DKIM `TXT` record:

    ```
    nslookup -type=TXT resend._domainkey.yourdomain.com
    ```

    Check your SPF `TXT` record:

    ```
    nslookup -type=TXT send.yourdomain.com
    ```

    Check your SPF `MX` record:

    ```
    nslookup -type=MX send.yourdomain.com
    ```

        <img src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-2.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e48a16939eebfc986f9216a2cfd49b08" alt="Check domain records with nslookup" data-og-width="1924" width="1924" data-og-height="1202" height="1202" data-path="images/domain-not-verifying-2.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-2.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d417f414888774990f6a352a143eb9a5 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-2.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e918e59a95ddcc1769eb64b0fa6149a9 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-2.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f58ebc1c002447103b9f748628cc148a 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-2.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5a41b19537c2754590d6cf1a1487d24c 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-2.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b6e62e0427d5f6254449dfd9c9dbc824 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/domain-not-verifying-2.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=633cd99ebfec3b12270521cb9a5d265f 2500w" />

    You are looking to see the same values that you see in Resend.
  </Accordion>
</AccordionGroup>


# What is Resend Pricing
Source: https://resend.com/docs/knowledge-base/what-is-resend-pricing

Learn more about Resend's pricing plans.

You can learn more about Resend's pricing at [resend.com/pricing](https://resend.com/pricing).


# What sending feature should I be using?
Source: https://resend.com/docs/knowledge-base/what-sending-feature-to-use

How to pick between our different sending features depending on your number of recipients and the nature of the message.

Resend allows you to send both **Transactional** and **Marketing** emails.

## What's the difference between Transactional and Marketing emails?

### What is a Transactional email?

A **Transactional email** is a message triggered by a user action or required for legal compliance. These emails are essential communications that users **cannot unsubscribe** from. Common examples include:

* Order confirmations
* Password reset emails
* Account notifications

Typically, transactional emails are **1-to-1** messages sent in response to a specific event.

### What is a Marketing email?

A **Marketing email** is any email that is not transactional. These can be **promotional**, **informative**, or **general communication** messages.

Marketing emails are regulated by laws like **CAN-SPAM** (US) and **CASL** (Canada), and **recipients must have the option to unsubscribe**.

Examples of marketing emails:

* Promotional offers and discounts
* Newsletters
* Product updates

Marketing emails can be **1-to-1** (e.g., abandoned cart reminders) or **1-to-many** (e.g., newsletters).

## Should I be sending a Transactional or a Marketing email?

While not exhaustive, here's a table listing different examples of emails and the most appropriate type for each example.

| Type of Message    | Type of Recipient | Transactional | Marketing |
| ------------------ | ----------------- | ------------- | --------- |
| Order confirmation | Single            | ✓             | ⨯         |
| Password reset     | Single            | ✓             | ⨯         |
| Abandoned cart     | Single            | ⨯             | ✓         |
| Newsletter         | Multiple          | ⨯             | ✓         |
| Promotional offer  | Multiple          | ⨯             | ✓         |

## How to send an email with Resend?

### How to send a Transactional email?

You can send a Transactional email using:

* Our [Send Email API](/api-reference/emails/send-email)
* Our [Batch Send API](/api-reference/emails/send-batch-emails) (send up to 100 transactional emails in one API call)

### How to send a Marketing email?

You can send Marketing emails using:

* [Resend no-code Editor](/dashboard/broadcasts/introduction) – a collaborative interface for designing emails
* [Broadcast API](/api-reference/broadcasts/create-broadcast) – for programmatic sending


# What's the difference between Opportunistic TLS vs Enforced TLS?
Source: https://resend.com/docs/knowledge-base/whats-the-difference-between-opportunistic-tls-vs-enforced-tls

Understand the different TLS configurations available.

Resend supports TLS 1.2, TLS 1.1 and TLS 1.0 for TLS connections.

There are two types of TLS configurations available:

* Opportunistic TLS
* Enforced TLS

## What is Opportunistic TLS?

Opportunistic TLS means that Resend always attempts to make a secure connection to the receiving mail server.

If the receiving server does not support TLS, the fallback is sending the message unencrypted.

## What is Enforced TLS?

Enforced TLS means that the email communication must use TLS no matter what.

If the receiving server does not support TLS, the email will not be sent.

## Is Enforced TLS better than Opportunistic TLS?

One strategy is not necessarily better than the other.

The decision is less about one option being safe and the other being unsafe, and more about one option being safe and the other being safer.

When you have Enforced TLS enabled, you might see an increase in bounce rates because some outdated mail servers do not support TLS.

So it's important to understand the different use cases for each configuration. If you're sending sensitive information like authentication emails, you might want to use Enforced TLS. If you're sending marketing emails, you might want to use Opportunistic TLS.

In simple terms, with Opportunistic TLS, delivery is more important than security. On the other hand, with Enforced TLS, security is more important than delivery.


# Why are my emails landing on the Suppression List?
Source: https://resend.com/docs/knowledge-base/why-are-my-emails-landing-on-the-suppression-list

Learn why your emails land on the Suppression List and how to remove them.

When sending to an email address results in a hard bounce, Resend places this address on the Suppression List. Emails placed on the list cannot be sent to until they are removed.

<Info>
  We place emails on the Suppression List to protect domain reputation, both
  yours and ours. Sending an email to a known hard bounce recipient can damage
  domain reputation and affect email deliverability.
</Info>

## Reasons emails are placed on the Suppression List

Here are some possible reasons an email address is placed on the Suppression List:

* The recipient's email address **contains a typo**.
* The recipient's email address **doesn't exist**.
* The recipient's email server has **permanently blocked delivery**.

## View email bounce details

You can view the reason an email bounced on the [Emails](https://resend.com/emails) page. Open the [Emails](https://resend.com/emails) page and search for the recipient's email address in question.

A human-readable summary of the reason for the bounce displays. For more technical details and suggested next steps, click the **See details** button.

<img alt="Email Bounced button" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-1.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9b189d98b12e5c0e85393c004698388e" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/email-suppression-list-1.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-1.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8510dc097062e6467927cf332a653dad 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-1.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1db6371680e74d4521522fc19c671e78 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-1.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=21e8ea479a8162bb3f3364501cd79258 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-1.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=911a8a0869c8315d719ea140c76af922 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-1.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=de791bfcba501497b975fd3f2964116a 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-1.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=40b0830bf8f600ec249c7875243e3092 2500w" />

## Removing an email address from the Suppression List

You may be able to send a message to the same recipient in the future if the issue that caused the message to bounce is resolved and the email address is removed from the Suppression List.

<Warning>
  Remember, if you do not address the issue that caused the email to bounce, the
  email address will return to the Suppression List the next time you attempt to
  send to it.
</Warning>

To remove your recipient from the Suppression List, click on the email in the [emails dashboard](https://resend.com/emails), and click **Remove from suppression list**.

<img alt="Email Bounced button" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=baf9f0a40313b856be978b728fb1d01c" data-og-width="2992" width="2992" data-og-height="1868" height="1868" data-path="images/email-suppression-list-2.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5cd771fb178129ea877cb7a8c4ae7232 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1afcefe9521079a01a864660d4cadb3f 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=754178c89bd180234e114b26931ad834 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ba26e1577b0f049e9d52b087004ed564 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0e3a00dfb4ff6af14ab63702bb457fba 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/email-suppression-list-2.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e08834d9cda300da7cb0473c4d100b10 2500w" />


# Why are my open rates not accurate?
Source: https://resend.com/docs/knowledge-base/why-are-my-open-rates-not-accurate

Learn why your open rate statistics are not accurate and what you can do about it.

## How are open rates tracked?

A 1x1 pixel transparent GIF image is inserted in each email and includes a unique reference. When the image is downloaded, an open event is triggered.

## Why are my open rates not accurate?

Open tracking is generally not accurate because each inbox handles incoming email differently.

**Clipped messages in Gmail** happen when you send a message over 102KB. A message over this size won’t be counted as an open unless the recipient views the entire message. Resend’s Deliverability Insights on the email will note if a message exceeds this threshold.

**Some inboxes do not download images by default** or block/cache assets with a corporate firewall. This approach can prevent the open event from being tracked.

**Other inboxes open the email prior to delivering** in order to scan for malware or to [protect user privacy](https://www.apple.com/newsroom/2021/06/apple-advances-its-privacy-leadership-with-ios-15-ipados-15-macos-monterey-and-watchos-8/). This approach can trigger an open event without the recipient reading your email.

**Emails sent with only a plain text version** will not include open tracking at all. Since open tracking relies on a 1x1 pixel image, plain text emails cannot trigger open events. Only emails with an HTML version can be tracked for opens.

Because of this, open tracking is **not a statistically accurate way** of detecting if your users are engaging with your content.

## Does open tracking impact inbox placement?

Though open tracking should not impact if your email is delivered, it most likely will impact your inbox placement. Trackers are generally **used by marketers and even spammers**. Because of this, inbox providers will often use open tracking as a signal that your email is promotional, or even spam, and categorize accordingly.

**We suggest disabling open rates for transactional email**, to maximize inbox placement.

## What's the alternative?

Instead of relying on open rates, there are a few other ways to still understand your sending.

1. **Track Clicks:** Monitoring the link clicks is an even more granular way to know how a recipient engaged with your email. By knowing if they clicked, you also know that they read parts of your email and took action.
2. **Track Outside the Inbox:** Often emails are sent as a means to an end. Maybe it's to increase page visits of an announcement or convert free users to paid. Tracking your sending by metrics outside of the inbox can be a great way to understand the true impact of your sending.


# Official SDKs
Source: https://resend.com/docs/sdks

Open source client libraries for your favorite platforms.

## Official SDKs

<CardGroup cols={2}>
  <Card title="Node.js" icon="github" href="https://github.com/resend/resend-node">
    github.com/resend/resend-node
  </Card>

  <Card title="PHP" icon="github" href="https://github.com/resend/resend-php">
    github.com/resend/resend-php
  </Card>

  <Card title="Laravel" icon="github" href="https://github.com/resend/resend-laravel">
    github.com/resend/resend-laravel
  </Card>

  <Card title="Python" icon="github" href="https://github.com/resend/resend-python">
    github.com/resend/resend-python
  </Card>

  <Card title="Ruby" icon="github" href="https://github.com/resend/resend-ruby">
    github.com/resend/resend-ruby
  </Card>

  <Card title="Go" icon="github" href="https://github.com/resend/resend-go">
    github.com/resend/resend-go
  </Card>

  <Card title="Java" icon="github" href="https://github.com/resend/resend-java">
    github.com/resend/resend-java
  </Card>

  <Card title="Rust" icon="github" href="https://github.com/resend/resend-rust">
    github.com/resend/resend-rust
  </Card>

  <Card title=".NET" icon="github" href="https://github.com/resend/resend-dotnet">
    github.com/resend/resend-dotnet
  </Card>
</CardGroup>

## Community SDKs

<CardGroup cols={2}>
  <Card title="Elixir" icon="github" href="https://github.com/elixir-saas/resend-elixir">
    github.com/elixir-saas/resend-elixir
  </Card>

  <Card title="NestJS" icon="github" href="https://github.com/jiangtaste/nestjs-resend">
    github.com/jiangtaste/nestjs-resend
  </Card>

  <Card title="Dart" icon="github" href="https://github.com/coderaveHQ/dart_resend">
    github.com/coderaveHQ/dart\_resend
  </Card>
</CardGroup>

## OpenAPI

<CardGroup cols={2}>
  <Card title="OpenAPI" icon="github" href="https://github.com/resend/resend-openapi">
    github.com/resend/resend-openapi
  </Card>
</CardGroup>


# Security
Source: https://resend.com/docs/security

An overview of Resend security features and practices.

## Governance

Resend establishes policies and controls, monitors compliance with those controls, and proves the security and compliance to third-party auditors.

Our policies are based on the following **foundational principles**:

<CardGroup cols={2}>
  <Card title="Least Privilege" icon="square-1">
    Access should be limited to only those with a legitimate business needs,
    based on the principle of least privilege.
  </Card>

  <Card title="Consistency" icon="square-2">
    Security controls should be applied consistently across all areas of the
    enterprise.
  </Card>

  <Card title="Defense in Depth" icon="square-3">
    Security controls should be implemented and layered according to the
    principle of defense-in-depth.
  </Card>

  <Card title="Continuous Improvement" icon="square-4">
    The implementation of controls should be iterative, continuously improving
    effectiveness and decreasing friction.
  </Card>
</CardGroup>

### Compliance Standards

<AccordionGroup>
  <Accordion title="SOC 2 Type II" icon="hourglass-clock">
    Resend is SOC 2 Type II compliant. The audit was completed by Vanta & Advantage Partners.
    You can download a copy of the report on the [Documents](https://resend.com/settings/documents) page.
  </Accordion>

  <Accordion title="GDPR" icon="hourglass-clock">
    Resend is GDPR compliant. You can learn more about our [GDPR compliance](https://resend.com/security/gdpr) or view our [DPA](https://resend.com/legal/dpa).
  </Accordion>
</AccordionGroup>

## Data Protection

<CardGroup cols={1}>
  <Card title="Data at rest" icon="server">
    All datastores are encrypted at rest. Sensitive collections and tables also
    use row-level encryption.
  </Card>

  <Card title="Data in transit" icon="network-wired">
    Resend uses TLS 1.3 or higher everywhere data is transmitted over
    potentially insecure networks.
  </Card>

  <Card title="Data backup" icon="database">
    Resend backs-up all production data using a point-in-time approach. Backups
    are persisted for 30 days, and are globally replicated for resiliency
    against regional disasters.
  </Card>
</CardGroup>

## Product Security

### Penetration testing

Resend engages with third-party firms to conduct penetration testing at least annually.

All areas of the Resend product and cloud infrastructure are in-scope for these assessments, and source code is fully available to the testers in order to maximize the effectiveness and coverage.

You can download the latest penetration test report on the [Documents](https://resend.com/settings/documents) page.

### Vulnerability scanning

Resend uses multiple vulnerability monitoring techniques including code-level scanning, dependency scanning, and security reviews to identify and remediate vulnerabilities.

Vulnerabilities are prioritized based on severity and risk, and are remediated according to the following schedule:

* Critical: 15 Days
* High: 30 Days
* Medium: 90 Day
* Low: 180 Days
* Informational: As needed

## Enterprise Security

<CardGroup cols={1}>
  <Card title="Endpoint protection" icon="computer">
    All company devices are equipped with anti-malware protection. Endpoint security alerts are monitored with 24/7/365 coverage. We use MDM software to enforce secure configuration of endpoints, such as disk encryption, screen lock configuration, and software updates.
  </Card>

  <Card title="Security education" icon="graduation-cap">
    Resend provides comprehensive security training to all employees upon onboarding and annually.

    Resend's conducts threat briefings with employees to inform them of important security and safety-related updates that require special attention or action.
  </Card>

  <Card title="Identity and access management" icon="id-badge">
    Resend employees are granted access to applications based on their role, and automatically deprovisioned upon termination of their employment. Further access must be approved according to the policies set for each application.

    Multi-factor authentication is required for all employees to access company applications.
  </Card>
</CardGroup>

## Responsible Disclosure

To report a vulnerability, please check the guidelines on the [Responsible Disclosure](https://resend.com/security/responsible-disclosure) page.


# Send emails with Astro
Source: https://resend.com/docs/send-with-astro

Learn how to send your first email using Astro, Resend, and Node.js.

export const YouTube = ({id}) => {
  return <iframe className="w-full aspect-video rounded-xl" src={`https://www.youtube.com/embed/${id}`} title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen></iframe>;
};

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

If you prefer to watch a video, check out our video walkthrough below.

<YouTube id="OzDg4QPmmac" />

## 1. Install

Install Resend for Node.js.

<CodeGroup>
  ```bash npm theme={null}
  npm install resend
  ```

  ```bash yarn theme={null}
  yarn add resend
  ```

  ```bash pnpm theme={null}
  pnpm add resend
  ```
</CodeGroup>

## 2. Install an SSR adapter

Because Astro builds a static site by default, [install an SSR adapter](https://docs.astro.build/en/guides/server-side-rendering/) to enable on-demand rendering of routes.

## 3. Add your API key

[Create an API key](https://resend.com/api-keys) in Resend and add it to your `.env` file to keep your API key secret.

```ini .env theme={null}
RESEND_API_KEY="re_xxxxxxxxx"
```

## 4. Send email using HTML

Create an [Astro Action](https://docs.astro.build/en/guides/actions/) under `actions/index.ts`.

The easiest way to send an email is with the `html` parameter.

<CodeGroup>
  ```ts src/actions/index.ts theme={null}
  import { ActionError, defineAction } from 'astro:actions';
  import { Resend } from 'resend';

  const resend = new Resend(import.meta.env.RESEND_API_KEY);

  export const server = {
    send: defineAction({
      accept: 'form',
      handler: async () => {
        const { data, error } = await resend.emails.send({
          from: 'Acme <onboarding@resend.dev>',
          to: ['delivered@resend.dev'],
          subject: 'Hello world',
          html: '<strong>It works!</strong>',
        });

        if (error) {
          throw new ActionError({
            code: 'BAD_REQUEST',
            message: error.message,
          });
        }

        return data;
      },
    }),
  };
  ```
</CodeGroup>

Call the `send` action from any frontmatter route, script, or component.

## 5. Try it yourself

<Card title="Astro Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-astro-example">
  See the full source code.
</Card>


# Send emails using Auth0 with SMTP
Source: https://resend.com/docs/send-with-auth0-smtp

Learn how to integrate Auth0 with Resend SMTP.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Get the Resend SMTP credentials

When configuring your SMTP integration, you'll need to use the following credentials:

* **Host**: `smtp.resend.com`
* **Port**: `465`
* **Username**: `resend`
* **Password**: `YOUR_API_KEY`

## 2. Integrate with Auth0 SMTP

After logging into your [Auth0](https://auth0.com/) dashboard, you'll need to enable the SMTP integration.

1. From your Auth0 dashboard, go to [Branding > Email Provider](https://manage.auth0.com/#/templates/provider).
2. Enable the **Use my own email provider** toggle.
3. Select **SMTP Provider**.
4. Enter a **From** email address, and then enter the Resend SMTP server's **Host**, **Port**, **Username**, and your API key as the **Password**.

<img alt="Auth0 SMTP - Email Provider Settings" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/auth0-smtp.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=91d6c2472ae892f200787d35a3568533" data-og-width="1986" width="1986" data-og-height="2272" height="2272" data-path="images/auth0-smtp.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/auth0-smtp.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2515e6f7fc862f21549ff5f6a1f5ed5a 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/auth0-smtp.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=bee7cd1b8c96adb62a33b9b5691f4455 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/auth0-smtp.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7e7d5041b4acf156c41733bac84bdc73 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/auth0-smtp.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e4da247ed09adcfbcd7171762fd79e26 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/auth0-smtp.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e8bcd9213be903f896c65d255e11e7df 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/auth0-smtp.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2feffb26f8bcfe4993db877c337f83d4 2500w" />

## 3. Send a test email

Once you have configured the SMTP settings, click **Save**. Next send a test email using the **Send Test Email** button. If everything is configured correctly, you will receive a confirmation email. If you did not receive an email, check your [Auth0 Logs](https://manage.auth0.com/#/logs).


# Send emails with AWS Lambda
Source: https://resend.com/docs/send-with-aws-lambda

Learn how to send your first email using AWS Lambda.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Create a AWS Lambda function

Go to [aws.amazon.com](https://aws.amazon.com) and create a new Lambda function using the Node.js 18.x runtime.

<img alt="AWS Lambda - New Function" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-new-function.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=324a1181f685affebb1f50b18765538c" data-og-width="3414" width="3414" data-og-height="1886" height="1886" data-path="images/aws-lambda-new-function.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-new-function.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a3182c8eb1966d9636f31456e00e2ec9 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-new-function.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d797f2e3768184703be6627c29d23273 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-new-function.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=050e88c52777b8d38ce95bf8df426e95 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-new-function.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=21f874a49461776f1c187428c8282ee0 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-new-function.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=c2df9c56cf87833cbfb7358e8d6fcbc1 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-new-function.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b3fa3c2f80d29249d1aab8ae837b17bd 2500w" />

## 2. Edit the handler function

Paste the following code into the browser editor:

```js index.mjs theme={null}
const RESEND_API_KEY = 're_xxxxxxxxx';

export const handler = async (event) => {
  const res = await fetch('https://api.resend.com/emails', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${RESEND_API_KEY}`,
    },
    body: JSON.stringify({
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: 'hello world',
      html: '<strong>it works!</strong>',
    }),
  });

  if (res.ok) {
    const data = await res.json();

    return {
      statusCode: 200,
      body: data,
    };
  }
};
```

## 3. Deploy and send email

Click on `Deploy` and then `Test` at the top of the screen.

<img alt="AWS Lambda - Edit Function" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-edit-function.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=0393dc19bce3c93881bf4b433024c40b" data-og-width="3414" width="3414" data-og-height="1886" height="1886" data-path="images/aws-lambda-edit-function.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-edit-function.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a0e20c73afe50bb014377b782795ca66 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-edit-function.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=65843732a55e50eed22c683b34fe7416 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-edit-function.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=e2eca4ce6ae102824f7f6d8fabb2cd53 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-edit-function.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=916affe26c33065b698a9ad542e72a46 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-edit-function.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=89ceedcf272892ec14424394826abfc4 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/aws-lambda-edit-function.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d1fabd5e1e6e4f5dfcd0ba513f197144 2500w" />

## 4. Try it yourself

<Card title="AWS Lambda Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-aws-lambda-example">
  See the full source code.
</Card>


# Send emails with Axum
Source: https://resend.com/docs/send-with-axum

Send your first email using Axum and the Resend Rust SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the Resend Rust SDK and the [Tokio](https://tokio.rs) runtime.

```bash  theme={null}
cargo add resend-rs
cargo add tokio -F macros,rt-multi-thread
```

## 2. Send an Email

```rust  theme={null}
use std::sync::Arc;

use axum::{extract::State, http::StatusCode, routing::get, Router};
use resend_rs::types::CreateEmailBaseOptions;
use resend_rs::{Resend, Result};

// Cloning the Resend client is fine and cheap as the internal HTTP client is
// not cloned.
#[derive(Clone)]
struct AppState {
  resend: Resend,
}

#[tokio::main]
async fn main() {
  let shared_state = Arc::new(AppState {
    resend: Resend::new("re_xxxxxxxxx"),
  });

  // build our application with a single route
  let app = Router::new()
    .route("/", get(endpoint))
    // provide the state so the router can access it
    .with_state(shared_state);

  // run our app with hyper, listening globally on port 3000
  let listener = tokio::net::TcpListener::bind("0.0.0.0:3000").await.unwrap();
  axum::serve(listener, app).await.unwrap();
}

async fn endpoint(State(state): State<Arc<AppState>>) -> Result<String, StatusCode> {
  let from = "Acme <onboarding@resend.dev>";
  let to = ["delivered@resend.dev"];
  let subject = "Hello World";

  let email = CreateEmailBaseOptions::new(from, to, subject)
    .with_html("<strong>It works!</strong>");

  // access the state via the `State` extractor and handle the error
  match state.resend.emails.send(email).await {
    Ok(email) => Ok(email.id.to_string()),
    Err(_) => Err(StatusCode::INTERNAL_SERVER_ERROR),
  }
}
```

Opening your browser at `http://localhost:3000` (or running `curl localhost:3001`) should send an
email and return you its id!

## 3. Try it yourself!

<Card title="Axum Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-axum-example">
  See the full source code.
</Card>


# Send emails with Bun
Source: https://resend.com/docs/send-with-bun

Learn how to send your first email using Bun and the Resend Node.js SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the Resend Node.js SDK.

```bash  theme={null}
bun install resend
```

## 2. Create an email template

Start by creating your email template on `email-template.tsx`.

```tsx email-template.tsx theme={null}
import * as React from 'react';

interface EmailTemplateProps {
  firstName: string;
}

export function EmailTemplate({ firstName }: EmailTemplateProps) {
  return (
    <div>
      <h1>Welcome, {firstName}!</h1>
    </div>
  );
}
```

## 3. Send email using React

Create a new file `index.tsx` and send your first email.

```tsx index.tsx theme={null}
import { Resend } from 'resend';
import { EmailTemplate } from './email-template';

const resend = new Resend(process.env.RESEND_API_KEY);

const server = Bun.serve({
  port: 3000,
  async fetch() {
    const { data, error } = await resend.emails.send({
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: 'Hello World',
      react: EmailTemplate({ firstName: 'Vitor' }),
    });

    if (error) {
      return new Response(JSON.stringify({ error }));
    }

    return new Response(JSON.stringify({ data }));
  },
});

console.log(`Listening on http://localhost:${server.port} ...`);
```

Start the local server by running `bun index.tsx` and navigate to `http://localhost:3000`.

## 3. Try it yourself

<Card title="Bun Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-bun-example">
  See the full source code.
</Card>


# Send emails with Cloudflare Workers
Source: https://resend.com/docs/send-with-cloudflare-workers

Learn how to send your first email using Cloudflare Workers.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)
* Have a Cloudflare worker with a bundling setup
  * Recommended to be bootstrapped with `npm create cloudflare`

## 1. Install

Get the Resend Node.js SDK.

<CodeGroup>
  ```bash npm theme={null}
  npm install resend
  ```

  ```bash yarn theme={null}
  yarn add resend
  ```

  ```bash pnpm theme={null}
  pnpm add resend
  ```
</CodeGroup>

## 2. Create an email template

Start by creating your email template on `src/emails/email-template.tsx`:

```tsx src/emails/email-template.tsx theme={null}
import * as React from 'react';

interface EmailTemplateProps {
  firstName: string;
}

export function EmailTemplate({ firstName }: EmailTemplateProps) {
  return (
    <div>
      <h1>Welcome, {firstName}!</h1>
    </div>
  );
}

export default EmailTemplate;
```

## 3. Send the email using React and the SDK

Change the file extension of the worker's main file to `tsx` and modify your configurations.

After that, you can send your email using the `react` parameter:

```tsx src/index.tsx theme={null}
import { Resend } from 'resend';
import { EmailTemplate } from './emails/email-template';

export default {
  async fetch(request, env, context): Promise<Response> {
    const resend = new Resend('re_xxxxxxxxx');

    const data = await resend.emails.send({
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: 'hello world',
      react: <EmailTemplate firstName="John" />,
    });

    return Response.json(data);
  },
} satisfies ExportedHandler<Env, ExecutionContext>;
```

## 4. Deploy and send email

Run `wrangler deploy` and wait for it to finish. Once it's done, it will
give you a URL to try out, like `https://my-worker.your_name.workers.dev`,
that you can open and verify that your email has been sent.

## 5. Try it yourself

<Card title="Cloudflare Workers Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-cloudflare-workers-example">
  See the full source code.
</Card>


# Send emails using Customer.io with SMTP
Source: https://resend.com/docs/send-with-customer-io-smtp

Learn how to integrate Customer.io with Resend SMTP.

### Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Get the Resend SMTP credentials

When configuring your SMTP integration, you'll need to use the following credentials:

* **Host**: `smtp.resend.com`
* **Port**: `465`
* **Username**: `resend`
* **Password**: `YOUR_API_KEY`

## 2. Integrate with Customer.io SMTP

After logging into your [Customer.io](https://customer.io) account, you'll need to enable the SMTP integration.

1. Go to **Settings** > **Workspace Settings**.

<img alt="Customer.io SMTP - Workspace Settings" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-1.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=97d3402e7acb7c66e5d54ff2886dd4e3" data-og-width="3414" width="3414" data-og-height="1886" height="1886" data-path="images/customer-io-smtp-1.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-1.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5b4635f750141488e068de1bf5140e05 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-1.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=4e656440fb0ff1afbd61a0d7ca275da2 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-1.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b008e95e151cceefc61d59cb50aa75d1 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-1.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=fce421ab414cdce4b2cf5390caf8ee33 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-1.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=2253c58f47a395826a3b7886838a6009 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-1.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=b7b18c99ca7c6e92fc5ab460e9a401ae 2500w" />

2. Go to the Messaging tab and select **Email**.

<img alt="Customer.io SMTP - Email" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-2.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=af35d8a9c99681e1a508694f02157943" data-og-width="3414" width="3414" data-og-height="1886" height="1886" data-path="images/customer-io-smtp-2.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-2.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=d6e2a6cfd4f3ad9618a98067e27801b9 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-2.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6b41245943a57c055e7eaec6f84abc9f 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-2.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3cdda8dce7097c4a86ae3b1100786b61 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-2.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=6e362e3c8d92ad027ef58d69462cc03b 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-2.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7c77742324264b5be8c550a2193b59b4 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-2.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=80076cea4c6b508491a4c4c79102afab 2500w" />

3. Select the **Custom SMTP** tab and click **Add Custom SMTP Server**.

<img alt="Customer.io SMTP - Add Custom SMTP Server" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-3.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=1d18082018463dc5989fb91d8f881b39" data-og-width="3414" width="3414" data-og-height="1886" height="1886" data-path="images/customer-io-smtp-3.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-3.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=66704ff0ca38c530b6f19801d021414e 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-3.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=0d75ab03f8555f83ae6b88467a8ba4cc 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-3.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=52c959b9b7bb5e4e374ff0a923cbb269 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-3.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=cfc6ac8025e122da1b554cecbcafd877 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-3.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a99d2c1bf62ef8858e08f495b38c222b 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-3.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=0829001dadb1d1198692e407dce2b25f 2500w" />

4. Select **Other SMTP** and click **Continue to set up**.

<img alt="Customer.io SMTP - Other SMTP" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-4.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=acc404b8b5b7fc11db0279d84453cb11" data-og-width="3414" width="3414" data-og-height="1886" height="1886" data-path="images/customer-io-smtp-4.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-4.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=7c40495f7483f2894f864ec5565ef481 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-4.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a71ddd0a726fe8559032ef5cee6e7da6 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-4.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=328829343fba2ccd7baa6403219b6960 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-4.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=92fd0a866aa4aa6caa9507821b4aecc8 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-4.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=36d7b59d088e39300e385f66770cea92 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-4.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=cf18f0846dce50c6e77300a32a255bed 2500w" />

5. Copy-and-paste the SMTP credentials from Resend to Customer.io.

<img alt="Customer.io SMTP integration" src="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-5.png?fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=519742fc4d97d06646fdd52de4f373fd" data-og-width="3414" width="3414" data-og-height="1886" height="1886" data-path="images/customer-io-smtp-5.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-5.png?w=280&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=df9d92806579bad07df23eca1bd2ab5d 280w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-5.png?w=560&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=a6044b5b5d6c76d59da01c768e6a37d5 560w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-5.png?w=840&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=3880624e319f52746eb77b4ef0e55e68 840w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-5.png?w=1100&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=23a7d220764020c7e5f280a3d12494df 1100w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-5.png?w=1650&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=ed453e0aa17c6b72d4504d31105e4942 1650w, https://mintcdn.com/resend/ABWmVTZIHGIFNTFD/images/customer-io-smtp-5.png?w=2500&fit=max&auto=format&n=ABWmVTZIHGIFNTFD&q=85&s=5b3c4fc8021d5014c17933304db43021 2500w" />


# Send emails with Deno Deploy
Source: https://resend.com/docs/send-with-deno-deploy

Learn how to send your first email using Deno Deploy.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Create a Deno Deploy project

Go to [dash.deno.com/projects](https://dash.deno.com/projects) and create a new playground project.

<img alt="Deno Deploy - New Project" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-new-project.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=634d342d6e542f4c82eb9c013bfcc817" data-og-width="3414" width="3414" data-og-height="1886" height="1886" data-path="images/deno-deploy-new-project.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-new-project.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f92fd83b5564fdc078867d7d4cbb4262 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-new-project.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=4ca5e87dbc66643ce4cbf18d3399686d 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-new-project.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=da3c6bd27d700a1f5372ec24c807855c 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-new-project.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=6ea1fb1720e7309517a12f9bceadecfd 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-new-project.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=6849f1f611cc5b03898c8c4b5b8396dc 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-new-project.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=883f8d6f49eb27cf5c2592d45c8d2397 2500w" />

## 2. Edit the handler function

Paste the following code into the browser editor:

```js index.ts theme={null}
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";

const RESEND_API_KEY = 're_xxxxxxxxx';

const handler = async (_request: Request): Promise<Response> => {
    const res = await fetch('https://api.resend.com/emails', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${RESEND_API_KEY}`
        },
        body: JSON.stringify({
            from: 'Acme <onboarding@resend.dev>',
            to: ['delivered@resend.dev'],
            subject: 'hello world',
            html: '<strong>it works!</strong>',
        })
    });

    if (res.ok) {
        const data = await res.json();

        return new Response(data, {
            status: 200,
            headers: {
                'Content-Type': 'application/json',
            },
        });
    }
};

serve(handler);
```

## 3. Deploy and send email

Click on `Save & Deploy` at the top of the screen.

<img alt="Deno Deploy - Playground" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-playground.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=fb62c969114e48e5401fecc67f5a4d76" data-og-width="3414" width="3414" data-og-height="1886" height="1886" data-path="images/deno-deploy-playground.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-playground.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=36893350ecf4039eef7514f5c7b548aa 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-playground.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=df997f1dba4ed30bb02f78632002f0e2 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-playground.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=26bcd5520ec035f9270eed86d2809af8 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-playground.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e4d65d030da04239429ad1bcf2a10e87 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-playground.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0b139a96b092a4776f2d87a2c1524217 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/deno-deploy-playground.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e704749e9adc3179f481bb7129c79073 2500w" />

## 4. Try it yourself

<Card title="Deno Deploy Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-deno-deploy-example">
  See the full source code.
</Card>


# Send emails using Django with SMTP
Source: https://resend.com/docs/send-with-django-smtp

Learn how to integrate Django with Resend SMTP.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)
* Install `virtualenv` by running `pip install virtualenv`

## 1. Setup your environment

Create and activate your new virtualenv.

```bash  theme={null}
virtualenv venv
source venv/bin/activate
```

Install dependencies.

```sh  theme={null}
pip install -r requirements.txt
```

Set your `RESEND_API_KEY` environment variable by running.

```sh  theme={null}
export RESEND_API_KEY="re_xxxxxxxxx"
```

## 2. Send email using Django's SMTP EmailMessage

Set the necessary attributes in your `settings.py` file.

```py  theme={null}
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
RESEND_SMTP_PORT = 587
RESEND_SMTP_USERNAME = 'resend'
RESEND_SMTP_HOST = 'smtp.resend.com'
```

Use Django's `get_connection` and `EmailMessage`

```py  theme={null}
import os
from django.conf import settings
from django.http import JsonResponse
from django.core.mail import EmailMessage, get_connection

# Sample Django view
def index(request):

    subject = "Hello from Django SMTP"
    recipient_list = ["delivered@resend.dev"]
    from_email = "onboarding@resend.dev"
    message = "<strong>it works!</strong>"

    with get_connection(
        host=settings.RESEND_SMTP_HOST,
        port=settings.RESEND_SMTP_PORT,
        username=settings.RESEND_SMTP_USERNAME,
        password=os.environ["RESEND_API_KEY"],
        use_tls=True,
        ) as connection:
            r = EmailMessage(
                  subject=subject,
                  body=message,
                  to=recipient_list,
                  from_email=from_email,
                  connection=connection).send()
    return JsonResponse({"status": "ok"})
```

## 3. Try it yourself

<Card title="Django SMTP Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-django-smtp-example">
  See the full source code.
</Card>


# Send emails with .NET
Source: https://resend.com/docs/send-with-dotnet

Learn how to send your first email using the Resend .NET SDK.

export const YouTube = ({id}) => {
  return <iframe className="w-full aspect-video rounded-xl" src={`https://www.youtube.com/embed/${id}`} title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen></iframe>;
};

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

Prefer watching a video? Check out our video walkthrough below.

<YouTube id="HvFURxq1tgQ" />

## 1. Install

<CodeGroup>
  ```bash dotnet CLI theme={null}
  dotnet add package Resend
  ```

  ```bash Visual Studio (Package Manager Console) theme={null}
  PM> Install-Package Resend
  ```
</CodeGroup>

## 2. Send emails using HTML

In the startup of your application, configure the DI container as follows:

```csharp  theme={null}
using Resend;

builder.Services.AddOptions();
builder.Services.AddHttpClient<ResendClient>();
builder.Services.Configure<ResendClientOptions>( o =>
{
    o.ApiToken = Environment.GetEnvironmentVariable( "RESEND_APITOKEN" )!;
} );
builder.Services.AddTransient<IResend, ResendClient>();
```

Send an email using the injected `IResend` instance:

```csharp  theme={null}
using Resend;

public class FeatureImplementation
{
    private readonly IResend _resend;


    public FeatureImplementation( IResend resend )
    {
        _resend = resend;
    }


    public Task Execute()
    {
        var message = new EmailMessage();
        message.From = "Acme <onboarding@resend.dev>";
        message.To.Add( "delivered@resend.dev" );
        message.Subject = "hello world";
        message.HtmlBody = "<strong>it works!</strong>";

        await _resend.EmailSendAsync( message );
    }
}
```

## 3. Try it yourself

<CardGroup cols={2}>
  <Card title="ASP.NET Controller API" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-dotnet/tree/master/examples/WebControllerApi">
    See the full source code.
  </Card>

  <Card title="" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-dotnet/tree/master/examples">
    List of .NET examples (API, Web, HTML rendering, Async sending).
  </Card>
</CardGroup>


# Send emails with Elixir
Source: https://resend.com/docs/send-with-elixir

Learn how to send your first email using the Resend Elixir SDK.

<Info>
  This guides utilizes an [open source
  library](https://github.com/elixir-saas/resend-elixir) contributed by a
  community member. It's not developed, maintained, or supported by Resend
  directly.
</Info>

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Install by adding `resend` to your list of dependencies in `mix.exs`:

<CodeGroup>
  ```elixir mix.exs theme={null}
  def deps do
    [
      {:resend, "~> 0.4.0"}
    ]
  end
  ```
</CodeGroup>

## 2. Send email using HTML

The easiest way to send an email is by using the `html` parameter.

```elixir send.exs theme={null}
client = Resend.client(api_key: System.get_env("RESEND_API_KEY"))

Resend.Emails.send(client, %{
  from: "Acme <onboarding@resend.dev>",
  to: ["delivered@resend.dev"],
  subject: "hello world",
  html: "<strong>it works!</strong>"
})
```

## 3. Try it yourself

<Card title="Elixir Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-elixir-example">
  See the full source code.
</Card>


# Send emails with Express
Source: https://resend.com/docs/send-with-express

Learn how to send your first email using Express and the Resend Node.js SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the Resend Node.js SDK.

<CodeGroup>
  ```bash npm theme={null}
  npm install resend
  ```

  ```bash yarn theme={null}
  yarn add resend
  ```

  ```bash pnpm theme={null}
  pnpm add resend
  ```
</CodeGroup>

## 2. Send email using HTML

The easiest way to send an email is by using the `html` parameter.

```js server.ts theme={null}
import express, { Request, Response } from "express";
import { Resend } from "resend";

const app = express();
const resend = new Resend("re_xxxxxxxxx");

app.get("/", async (req: Request, res: Response) => {
  const { data, error } = await resend.emails.send({
    from: "Acme <onboarding@resend.dev>",
    to: ["delivered@resend.dev"],
    subject: "hello world",
    html: "<strong>it works!</strong>",
  });

  if (error) {
    return res.status(400).json({ error });
  }

  res.status(200).json({ data });
});

app.listen(3000, () => {
  console.log("Listening on http://localhost:3000");
});
```

## 3. Try it yourself

<Card title="Express Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-express-example">
  See the full source code.
</Card>


# Send emails with FastAPI
Source: https://resend.com/docs/send-with-fastapi

Learn how to send your first email using FastAPI and the Resend Python SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the Resend Python SDK.

<CodeGroup>
  ```bash Pip theme={null}
  pip install resend
  ```
</CodeGroup>

## 2. Send email using HTML

The easiest way to send an email is by using the `html` parameter.

```py main.py theme={null}
import resend
from typing import Dict
from fastapi import FastAPI

resend.api_key = "re_xxxxxxxxx"

app = FastAPI()

@app.post("/")
def send_mail() -> Dict:
    params: resend.Emails.SendParams = {
        "from": "onboarding@resend.dev",
        "to": ["delivered@resend.dev"],
        "subject": "Hello World",
        "html": "<strong>it works!</strong>",
    }
    email: resend.Email = resend.Emails.send(params)
    return email
```

## 3. Try it yourself

<Card title="FastAPI Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-fastapi-example">
  See the full source code.
</Card>


# Send emails with Flask
Source: https://resend.com/docs/send-with-flask

Learn how to send your first email using Flask and the Resend Python SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the Resend Python SDK.

<CodeGroup>
  ```bash Pip theme={null}
  pip install resend
  ```
</CodeGroup>

## 2. Send email using HTML

The easiest way to send an email is by using the `html` parameter.

```py index.py theme={null}
import resend
import os
from flask import Flask, jsonify

resend.api_key = os.environ["RESEND_API_KEY"]

app = Flask(__name__)


@app.route("/")
def index():
    params: resend.Emails.SendParams = {
        "from": "Acme <onboarding@resend.dev>",
        "to": ["delivered@resend.dev"],
        "subject": "hello world",
        "html": "<strong>it works!</strong>",
    }

    r = resend.Emails.send(params)
    return jsonify(r)


if __name__ == "__main__":
    app.run()
```

## 3. Try it yourself

<Card title="Flask Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-flask-example">
  See the full source code.
</Card>


# Send emails with Go
Source: https://resend.com/docs/send-with-go

Learn how to send your first email using the Resend Go SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the Resend Go SDK.

<CodeGroup>
  ```bash bash theme={null}
  go get github.com/resend/resend-go/v2
  ```
</CodeGroup>

## 2. Send email using HTML

The easiest way to send an email is by using the `html` parameter.

```Go main.go theme={null}
package main

import "github.com/resend/resend-go/v2"

func main() {
    apiKey := "re_xxxxxxxxx"

    client := resend.NewClient(apiKey)

    params := &resend.SendEmailRequest{
        From:    "Acme <onboarding@resend.dev>",
        To:      []string{"delivered@resend.dev"},
        Html:    "<strong>hello world</strong>",
        Subject: "Hello from Golang",
        Cc:      []string{"cc@example.com"},
        Bcc:     []string{"bcc@example.com"},
        ReplyTo: "replyto@example.com",
    }

    sent, err := client.Emails.Send(params)
    if err != nil {
        fmt.Println(err.Error())
        return
    }
    fmt.Println(sent.Id)
}
```

## 3. Try it yourself

<Card title="Golang Examples" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-go-example">
  See the full source code.
</Card>


# Send emails with Hono
Source: https://resend.com/docs/send-with-hono

Learn how to send your first email using Hono and the Resend Node.js SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the Resend Node.js SDK.

<CodeGroup>
  ```bash npm theme={null}
  npm install resend
  ```

  ```bash yarn theme={null}
  yarn add resend
  ```

  ```bash pnpm theme={null}
  pnpm add resend
  ```
</CodeGroup>

## 2. Create an email template

Start by creating your email template on `emails/email-template.tsx`.

```tsx emails/email-template.tsx theme={null}
import * as React from 'react';

interface EmailTemplateProps {
  firstName: string;
}

export function EmailTemplate({ firstName }: EmailTemplateProps) {
  return (
    <div>
      <h1>Welcome, {firstName}!</h1>
    </div>
  );
}
```

To use JSX/TSX with Hono, we need to modify the `tsconfig.json`.

```json tsconfig.json theme={null}
{
  "compilerOptions": {
    "jsx": "react-jsx",
    "jsxImportSource": "react"
  }
}
```

## 3. Send email using React

Create a new file `index.tsx` and send your first email.

```ts index.tsx theme={null}
import { Hono } from 'hono';
import { Resend } from 'resend';
import { EmailTemplate } from './emails/email-template';

const app = new Hono();
const resend = new Resend('re_xxxxxxxxx');

app.get('/', async (c) => {
  const { data, error } = await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'hello world',
    react: <EmailTemplate firstName="John" />,
  });

  if (error) {
    return c.json(error, 400);
  }

  return c.json(data);
});

export default app;
```

## 4. Try it yourself

<Card title="Hono Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-hono-example">
  See the full source code.
</Card>


# Send emails with Java
Source: https://resend.com/docs/send-with-java

Learn how to send your first email using the Resend Java SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

<CodeGroup>
  ```bash Gradle theme={null}
  implementation 'com.resend:resend-java:3.1.0'
  ```

  ```xml Maven theme={null}
  <dependency>
      <groupId>com.resend</groupId>
      <artifactId>resend-java</artifactId>
      <version>3.1.0</version>
  </dependency>
  ```
</CodeGroup>

## 2. Send emails using HTML

```java Main.java theme={null}
import com.resend.*;

public class Main {
    public static void main(String[] args) {
        Resend resend = new Resend("re_xxxxxxxxx");

        CreateEmailOptions params = CreateEmailOptions.builder()
                .from("Acme <onboarding@resend.dev>")
                .to("delivered@resend.dev")
                .subject("it works!")
                .html("<strong>hello world</strong>")
                .build();

         try {
            CreateEmailResponse data = resend.emails().send(params);
            System.out.println(data.getId());
        } catch (ResendException e) {
            e.printStackTrace();
        }
    }
}
```

## 3. Try it yourself

<Card title="Java Examples" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-java-example">
  See the full source code.
</Card>


# Send emails with Laravel
Source: https://resend.com/docs/send-with-laravel

Learn how to send your first email using Laravel.

export const YouTube = ({id}) => {
  return <iframe className="w-full aspect-video rounded-xl" src={`https://www.youtube.com/embed/${id}`} title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen></iframe>;
};

## Prerequisites

To get the most out of this guide, you will need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

Prefer watching a video? Check out this video walkthrough below.

<YouTube id="xUTeIIt982w" />

## 1. Install

First, install Resend for Laravel using the Composer package manager:

```bash Composer theme={null}
composer require resend/resend-laravel
```

## 2. Configuration

### API key

Next, you should configure your Resend API key in your application's `.env` file:

```ini .env theme={null}
RESEND_API_KEY=re_xxxxxxxxx
```

### Mail driver

To use Resend as your mail driver, first create a new mailer definition, in the `mailers` array within your application's `config/mail.php` configuration file:

```php mail.php theme={null}
'resend' => [
    'transport' => 'resend',
],
```

Next, update your application's `.env` file to use the Resend mail driver:

```ini .env theme={null}
MAIL_MAILER=resend
MAIL_FROM_ADDRESS=onboarding@resend.dev
MAIL_FROM_NAME=Acme
```

## 3. Send an email

Resend for Laravel provides two convenient ways to send emails, using Laravel's email service or the `Resend` API facade.

### Using the Mail Facade

```php OrderShipmentController.php theme={null}
<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Mail\OrderShipped;
use App\Models\Order;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Mail;

class OrderShipmentController extends Controller
{
    /**
     * Ship the given order.
     */
    public function store(Request $request): RedirectResponse
    {
        $order = Order::findOrFail($request->order_id);

        // Ship the order...

        Mail::to($request->user())->send(new OrderShipped($order));

        return redirect('/orders');
    }
}
```

### Using the Resend Facade

```php OrderShipmentController.php theme={null}
<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Mail\OrderShipped;
use App\Models\Order;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Resend\Laravel\Facades\Resend;

class OrderShipmentController extends Controller
{
    /**
     * Ship the given order.
     */
    public function store(Request $request): RedirectResponse
    {
        $order = Order::findOrFail($request->order_id);

        // Ship the order...

        Resend::emails()->send([
            'from' => 'Acme <onboarding@resend.dev>',
            'to' => [$request->user()->email],
            'subject' => 'hello world',
            'html' => (new OrderShipped($order))->render(),
        ])

        return redirect('/orders');
    }
}
```

## 4. Receiving webhook requests

By default, Resend for Laravel includes a webhook controller to respond to the `/resend/webhook` URL path. The controller will dispatch a Laravel event that corresponds to a Resend event. For example, an `email.delivered` event type will send an `EmailDelivered` Laravel event.

### Register the webhook endpoint

Register your publicly accessible HTTPS URL in the Resend dashboard.

<Tip>
  For develoment, you can create a tunnel to your localhost server using a tool like
  [ngrok](https://ngrok.com/download) or [VS Code Port Forwarding](https://code.visualstudio.com/docs/debugtest/port-forwarding). These tools serve your local dev environment at a public URL you can use to test your local webhook endpoint.

  Example: `https://example123.ngrok.io/api/webhook`
</Tip>

<img alt="Add Webhook" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/laravel-create-webhook.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f551f634ded549840bc894726ca3483b" data-og-width="1280" width="1280" data-og-height="800" height="800" data-path="images/laravel-create-webhook.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/laravel-create-webhook.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=360f7e12e311bd1f1b7747e656c1ce17 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/laravel-create-webhook.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e221eecabbcc0ccd2494207863146cea 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/laravel-create-webhook.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9d867a496fa10b89be8484d93a5bf3a6 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/laravel-create-webhook.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c72a9f30742ce39b7f452d5b4b8a1f27 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/laravel-create-webhook.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=52f996384831162a7d3346adb58bd064 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/laravel-create-webhook.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=749ebd5c46b77a32cfce9a66cdd805f0 2500w" />

### CSRF protection

Webhook requests from Resend need to bypass Laravel's CSRF protection. Be sure to list the URI as an exception in your application's `App\Http\Middleware\VerifyCsrfToken` middleware or list the route outside of the web middleware group:

```php  theme={null}
protected $except = [
    'resend/*',
];
```

### Verifying webhook signatures

To enable webhook verification, ensure that the `RESEND_WEBHOOK_SECRET` environment variable is set in your application's `.env` file. The **Signing secret** can be retrieved from your [Resend dashboard](https://resend.com/webhooks).

## 5. Try it yourself

<Card title="Laravel Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-laravel-example">
  See the full source code.
</Card>


# Send emails using Laravel with SMTP
Source: https://resend.com/docs/send-with-laravel-smtp

Learn how to send your first email using Laravel with SMTP.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Setup your environment

First, configure your Resend SMTP details in your application's `.env` file:

```ini .env theme={null}
MAIL_MAILER=smtp
MAIL_HOST=smtp.resend.com
MAIL_PORT=587
MAIL_USERNAME=resend
MAIL_PASSWORD=re_xxxxxxxxx
MAIL_ENCRYPTION=tls
MAIL_FROM_ADDRESS=onboarding@resend.dev
MAIL_FROM_NAME=Acme
```

## 2. Send an email

Now you're ready to send emails with Laravel's powerful email service. Here's an example of how you could send your first email using Resend SMTP:

```php OrderShipmentController.php theme={null}
<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Mail\OrderShipped;
use App\Models\Order;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Mail;

class OrderShipmentController extends Controller
{
    /**
     * Ship the given order.
     */
    public function store(Request $request): RedirectResponse
    {
        $order = Order::findOrFail($request->order_id);

        // Ship the order...

        Mail::to($request->user())->send(new OrderShipped($order));

        return redirect('/orders');
    }
}
```

## 3. Try it yourself

<Card title="Laravel Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-laravel-example">
  See the full source code.
</Card>


# Send emails using Liferay with SMTP
Source: https://resend.com/docs/send-with-liferay-smtp

Learn how to integrate Liferay with Resend SMTP.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Get the Resend SMTP credentials

When configuring your SMTP integration, you'll need to use the following credentials:

* **Host**: `smtp.resend.com`
* **Port**: `465`
* **Username**: `resend`
* **Password**: `YOUR_API_KEY`

## 2. Integrate with Liferay

After logging into your Liferay instance as the admin user, you'll need to enable the SMTP integration.

1. Navigate to **Control Panel** → **Server Administration** → **Mail**.

<img alt="Liferay - SMTP" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/liferay-smtp-1.jpg?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=94e43af6a43bc9fa8ce8cc486eeb4f05" data-og-width="1600" width="1600" data-og-height="865" height="865" data-path="images/liferay-smtp-1.jpg" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/liferay-smtp-1.jpg?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9995edfac8b98dc11358bc33e11c73f9 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/liferay-smtp-1.jpg?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=db2e237220df2531b1385e006c3eba8e 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/liferay-smtp-1.jpg?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ad816fc70adf3b3d0654063565f12826 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/liferay-smtp-1.jpg?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=209fb4bba0fb7f3fa5a83f5f776c3197 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/liferay-smtp-1.jpg?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=dfb738e79143296b153b83955c632d63 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/liferay-smtp-1.jpg?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=99ffcafc285c62d6450d43256fdeb12d 2500w" />

2. Copy-and-paste the SMTP credentials from Resend to Liferay.

* **Outgoing SMTP Server**: `smtp.resend.com`
* **Outgoing Port**: `465`
* **Enable StartTLS**: `True`
* **User Name**: `resend`
* **Password**: `YOUR_API_KEY`

Make sure to replace `YOUR_API_KEY` with an existing key or create a new [API Key](https://resend.com/api-keys).

For the additional JavaMail properties, you can use:

```
mail.smtp.auth=true
mail.smtp.starttls.enable=true
mail.smtp.starttls.required=true
```


# Send emails using Metabase with SMTP
Source: https://resend.com/docs/send-with-metabase-smtp

Learn how to integrate Metabase with Resend SMTP.

### Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Get the Resend SMTP credentials

When configuring your SMTP integration, you'll need to use the following credentials:

* **Host**: `smtp.resend.com`
* **Port**: `465`
* **Username**: `resend`
* **Password**: `YOUR_API_KEY`

## 2. Integrate with Metabase SMTP

After logging into your [Metabase Cloud](https://www.metabase.com/cloud/login) account, you’ll need to enable the SMTP integration.

1. From your Metabase Cloud Admin Panel, go to **Settings > Email** in the left menu. You should see the form below.

<img alt="Metabse Cloud SMTP" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-1.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b11a45255f8f9058f03cebbd604eb4e5" data-og-width="1488" width="1488" data-og-height="1352" height="1352" data-path="images/metabase-smtp-1.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-1.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=52e44d8a6b355bd6d4f9073e565d9bd6 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-1.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=0092205568cb73595485f109514b9ab1 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-1.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b883b10ee66006d11554b5ac1c8dc499 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-1.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=50ce85961e9dc5a6ad7910af18b8ca08 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-1.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=a7e7bc6f9a81978e06bdec9687132cb8 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-1.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=9af06df6027518e060c04d3f8a37ab47 2500w" />

2. Copy-and-paste the SMTP credentials from Resend to Metabase Cloud. Finally, click the **Save** button and all of your emails will be sent through Resend.

<img alt="Metabse Cloud SMTP" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-2.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=ca2550e6061a992cc3c9a345eacd4c39" data-og-width="3600" width="3600" data-og-height="2250" height="2250" data-path="images/metabase-smtp-2.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-2.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b49b01b6110dbc62bf113f11d06c94ad 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-2.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f8a40a0c63be85703c5621498efae4f2 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-2.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=a604f67aa691e23a42bf67fa57648b52 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-2.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=fa64c995ef817d701835967394bc167a 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-2.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=4fb560d82c8ede648b2b27b5aa37438f 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/metabase-smtp-2.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5a4ed7aadf369ade8b7acf53fb4605bb 2500w" />


# Send emails using NextAuth with SMTP
Source: https://resend.com/docs/send-with-nextauth-smtp

Learn how to send your first email using NextAuth.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Install the [NextAuth](https://next-auth.js.org/getting-started/example#install-nextauth) package.

<CodeGroup>
  ```bash npm theme={null}
  npm install next-auth
  ```

  ```bash yarn theme={null}
  yarn add next-auth
  ```

  ```bash pnpm theme={null}
  pnpm add next-auth
  ```
</CodeGroup>

Then, install the [Nodemailer](https://www.npmjs.com/package/nodemailer) package.

<CodeGroup>
  ```bash npm theme={null}
  npm install nodemailer
  ```

  ```bash yarn theme={null}
  yarn add nodemailer
  ```

  ```bash pnpm theme={null}
  pnpm add nodemailer
  ```
</CodeGroup>

## 2. Configure SMTP credentials

Add your Resend SMTP crendentials in your application's `.env` file:

```ini .env theme={null}
EMAIL_SERVER_USER=resend
EMAIL_SERVER_PASSWORD=YOUR_API_KEY
EMAIL_SERVER_HOST=smtp.resend.com
EMAIL_SERVER_PORT=465
EMAIL_FROM=onboarding@resend.dev
```

## 3. Configure Email Provider

Finally, in your \[...nextauth].js file (typically located in pages/api/auth), configure the Email provider with your SMTP settings:

```js index.ts theme={null}
import NextAuth from 'next-auth';
import EmailProvider from 'next-auth/providers/email';
import nodemailer from 'nodemailer';

export default NextAuth({
  providers: [
    EmailProvider({
      server: {
        host: process.env.EMAIL_SERVER_HOST,
        port: process.env.EMAIL_SERVER_PORT,
        auth: {
          user: process.env.EMAIL_SERVER_USER,
          pass: process.env.EMAIL_SERVER_PASSWORD,
        },
      },
      from: process.env.EMAIL_FROM,
    }),
    // ... other providers as needed
  ],
  // ... any other NextAuth.js configs
});
```


# Send emails with Next.js
Source: https://resend.com/docs/send-with-nextjs

Learn how to send your first email using Next.js and the Resend Node.js SDK.

export const YouTube = ({id}) => {
  return <iframe className="w-full aspect-video rounded-xl" src={`https://www.youtube.com/embed/${id}`} title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen></iframe>;
};

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

Prefer watching a video? Check out our video walkthrough below.

<YouTube id="UqQxfpTQBaE" />

## 1. Install

Get the Resend Node.js SDK.

<CodeGroup>
  ```bash npm theme={null}
  npm install resend
  ```

  ```bash yarn theme={null}
  yarn add resend
  ```

  ```bash pnpm theme={null}
  pnpm add resend
  ```
</CodeGroup>

## 2. Create an email template

Start by creating your email template on `components/email-template.tsx`.

```tsx components/email-template.tsx theme={null}
import * as React from 'react';

interface EmailTemplateProps {
  firstName: string;
}

export function EmailTemplate({ firstName }: EmailTemplateProps) {
  return (
    <div>
      <h1>Welcome, {firstName}!</h1>
    </div>
  );
}
```

## 3. Send email using React

Create an API file under `pages/api/send.ts` if you're using the [Pages Router](https://nextjs.org/docs/pages/building-your-application/routing/api-routes) or create a route file under `app/api/send/route.ts` if you're using the [App Router](https://nextjs.org/docs/app/building-your-application/routing/router-handlers).

Import the React email template and send an email using the `react` parameter.

<CodeGroup>
  ```ts pages/api/send.ts theme={null}
  import type { NextApiRequest, NextApiResponse } from 'next';
  import { EmailTemplate } from '../../components/EmailTemplate';
  import { Resend } from 'resend';

  const resend = new Resend(process.env.RESEND_API_KEY);

  export default async (req: NextApiRequest, res: NextApiResponse) => {
    const { data, error } = await resend.emails.send({
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: 'Hello world',
      react: EmailTemplate({ firstName: 'John' }),
    });

    if (error) {
      return res.status(400).json(error);
    }

    res.status(200).json(data);
  };
  ```

  ```ts app/api/send/route.ts theme={null}
  import { EmailTemplate } from '../../../components/EmailTemplate';
  import { Resend } from 'resend';

  const resend = new Resend(process.env.RESEND_API_KEY);

  export async function POST() {
    try {
      const { data, error } = await resend.emails.send({
        from: 'Acme <onboarding@resend.dev>',
        to: ['delivered@resend.dev'],
        subject: 'Hello world',
        react: EmailTemplate({ firstName: 'John' }),
      });

      if (error) {
        return Response.json({ error }, { status: 500 });
      }

      return Response.json(data);
    } catch (error) {
      return Response.json({ error }, { status: 500 });
    }
  }
  ```
</CodeGroup>

## 4. Try it yourself

<CardGroup>
  <Card title="Next.js Example (Pages Router)" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-nextjs-pages-router-example">
    See the full source code.
  </Card>

  <Card title="Next.js Example (App Router)" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-nextjs-app-router-example">
    See the full source code.
  </Card>
</CardGroup>


# Send emails with Node.js
Source: https://resend.com/docs/send-with-nodejs

Learn how to send your first email using the Resend Node.js SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the Resend Node.js SDK.

<CodeGroup>
  ```bash npm theme={null}
  npm install resend
  ```

  ```bash yarn theme={null}
  yarn add resend
  ```

  ```bash pnpm theme={null}
  pnpm add resend
  ```
</CodeGroup>

## 2. Send email using HTML

The easiest way to send an email is by using the `html` parameter.

```js server.ts theme={null}
import { Resend } from 'resend';

const resend = new Resend('re_xxxxxxxxx');

(async function () {
  const { data, error } = await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'Hello World',
    html: '<strong>It works!</strong>',
  });

  if (error) {
    return console.error({ error });
  }

  console.log({ data });
})();
```

## 3. Try it yourself

<Card title="Node.js Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-node-example">
  See the full source code.
</Card>


# Send emails using Nodemailer with SMTP
Source: https://resend.com/docs/send-with-nodemailer-smtp

Learn how to send your first email using Nodemailer with SMTP.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the [Nodemailer](https://www.npmjs.com/package/nodemailer) package.

<CodeGroup>
  ```bash npm theme={null}
  npm install nodemailer
  ```

  ```bash yarn theme={null}
  yarn add nodemailer
  ```

  ```bash pnpm theme={null}
  pnpm add nodemailer
  ```
</CodeGroup>

## 2. Send email using SMTP

When configuring your SMTP integration, you'll need to use the following credentials:

* **Host**: `smtp.resend.com`
* **Port**: `465`
* **Username**: `resend`
* **Password**: `YOUR_API_KEY`

Then use these credentials to create a transport:

```js index.ts theme={null}
import nodemailer from 'nodemailer';

async function main() {
  const transporter = nodemailer.createTransport({
    host: 'smtp.resend.com',
    secure: true,
    port: 465,
    auth: {
      user: 'resend',
      pass: 're_xxxxxxxxx',
    },
  });

  const info = await transporter.sendMail({
    from: 'onboarding@resend.dev',
    to: 'delivered@resend.dev',
    subject: 'Hello World',
    html: '<strong>It works!</strong>',
  });

  console.log('Message sent: %s', info.messageId);
}

main().catch(console.error);
```

## 3. Try it yourself

<Card title="Nodemailer SMTP Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-nodemailer-smtp-example">
  See the full source code.
</Card>


# Send emails with Nuxt
Source: https://resend.com/docs/send-with-nuxt

Learn how to send your first email using Nuxt and the Resend Node.js SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the Resend Node.js SDK.

<CodeGroup>
  ```bash npm theme={null}
  npm install resend
  ```

  ```bash yarn theme={null}
  yarn add resend
  ```

  ```bash pnpm theme={null}
  pnpm add resend
  ```
</CodeGroup>

## 2. Send email using HTML

Create a [Server Route](https://nuxt.com/docs/guide/directory-structure/server) under `server/api/send.ts`.

The easiest way to send an email is by using the `html` parameter.

<CodeGroup>
  ```ts server/api/send.ts theme={null}
  import { Resend } from 'resend';

  const resend = new Resend(process.env.RESEND_API_KEY);

  export default defineEventHandler(async () => {
    try {
      const data = await resend.emails.send({
        from: 'Acme <onboarding@resend.dev>',
        to: ['delivered@resend.dev'],
        subject: 'Hello world',
        html: '<strong>It works!</strong>',
      });

      return data;
    } catch (error) {
      return { error };
    }
  });
  ```
</CodeGroup>

## 3. Try it yourself

<Card title="Nuxt Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-nuxt-example">
  See the full source code.
</Card>


# Send emails with Phoenix
Source: https://resend.com/docs/send-with-phoenix

Learn how to send your first email using Phoenix and the Resend Elixir SDK.

<Info>
  This guides utilizes an [open source
  library](https://github.com/elixir-saas/resend-elixir) contributed by a
  community member. It's not developed, maintained, or supported by Resend
  directly.
</Info>

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Install by adding `resend` to your list of dependencies in `mix.exs`:

<CodeGroup>
  ```elixir mix.exs theme={null}
  def deps do
    [
      {:resend, "~> 0.4.0"}
    ]
  end
  ```
</CodeGroup>

## 2. Send email using Swoosh

This library includes a Swoosh adapter to make using Resend with a new Phoenix project as easy as possible. All you have to do is configure your Mailer:

```elixir  theme={null}
config :my_app, MyApp.Mailer,
  adapter: Resend.Swoosh.Adapter,
  api_key: System.fetch_env!("RESEND_API_KEY")
```

If you're configuring your app for production, configure your adapter in `prod.exs`, and your API key from the environment in `runtime.exs`:

<CodeGroup>
  ```elixir prod.exs theme={null}
  config :my_app, MyApp.Mailer, adapter: Resend.Swoosh.Adapter
  ```

  ```elixir runtime.exs theme={null}
  config :my_app, MyApp.Mailer, api_key: "re_xxxxxxxxx"
  ```
</CodeGroup>

## 3. Try it yourself

<Card title="Phoenix Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-phoenix-example">
  See the full source code.
</Card>


# Send emails with PHP
Source: https://resend.com/docs/send-with-php

Learn how to send your first email using the Resend PHP SDK.

export const YouTube = ({id}) => {
  return <iframe className="w-full aspect-video rounded-xl" src={`https://www.youtube.com/embed/${id}`} title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen></iframe>;
};

## Prerequisites

To get the most out of this guide, you will need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

Prefer watching a video? Check out this video walkthrough below.

<YouTube id="vJRJ7b4QJHw" />

## 1. Install

Get the Resend PHP SDK.

```bash Composer theme={null}
composer require resend/resend-php
```

## 2. Send email using HTML

The easiest way to send an email is by using the `html` parameter.

```php index.php theme={null}
<?php

require __DIR__ . '/vendor/autoload.php';

$resend = Resend::client('re_xxxxxxxxx');

$resend->emails->send([
  'from' => 'Acme <onboarding@resend.dev>',
  'to' => ['delivered@resend.dev'],
  'subject' => 'hello world',
  'html' => '<strong>it works!</strong>',
]);
```

## 3. Try it yourself

<Card title="PHP Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-php-example">
  See the full source code.
</Card>


# Send emails using PHPMailer with SMTP
Source: https://resend.com/docs/send-with-phpmailer-smtp

Learn how to send your first email using PHPMailer with SMTP.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the [PHPMailer](https://github.com/PHPMailer/PHPMailer) package.

<CodeGroup>
  ```bash php theme={null}
  composer require phpmailer/phpmailer
  ```
</CodeGroup>

## 2. Send email using SMTP

When configuring your SMTP integration, you'll need to use the following credentials:

* **Host**: `smtp.resend.com`
* **Port**: `587`
* **Username**: `resend`
* **Password**: `YOUR_API_KEY`

Then use these credentials to send with PHPMailer:

```php  theme={null}
<?php

// Include Composer autoload file to load PHPMailer classes
require __DIR__ . '/vendor/autoload.php';

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

$mail = new PHPMailer(true);

try {
    $mail->isSMTP();
    $mail->Host = 'smtp.resend.com';
    $mail->SMTPAuth = true;
    $mail->Username = 'resend';
    $mail->Password = 're_xxxxxxxxx';
    $mail->SMTPSecure = 'tls';
    $mail->Port = 587;

    // Set email format to HTML
    $mail->isHTML(true);

    $mail->setFrom('onboarding@resend.dev');
    $mail->addAddress('delivered@resend.dev');
    $mail->Subject = 'Hello World';
    $mail->Body = '<strong>It works!</strong>';

    $mail->send();

    // Log the successfully sent message
    echo 'Email successfully sent';
} catch (Exception $e) {
    // Log the detailed error for debugging
    error_log('Mailer Error: ' . $mail->ErrorInfo);
    // Show a generic error message to the user
    echo 'There was an error sending the email.';
}
```

## 3. Try it yourself

<Card title="PHPMailer SMTP Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-phpmailer-smtp-example">
  See the full source code.
</Card>


# Send emails with Python
Source: https://resend.com/docs/send-with-python

Learn how to send your first email using the Resend Python SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the Resend Python SDK.

<CodeGroup>
  ```bash Pip theme={null}
  pip install resend
  ```
</CodeGroup>

## 2. Send email using HTML

The easiest way to send an email is by using the `html` parameter.

```py index.py theme={null}
import os
import resend

resend.api_key = os.environ["RESEND_API_KEY"]

params: resend.Emails.SendParams = {
    "from": "Acme <onboarding@resend.dev>",
    "to": ["delivered@resend.dev"],
    "subject": "hello world",
    "html": "<strong>it works!</strong>",
}

email = resend.Emails.send(params)
print(email)
```

## 3. Try it yourself

<Card title="Python Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-python-example">
  See the full source code.
</Card>


# Send emails with Rails
Source: https://resend.com/docs/send-with-rails

Learn how to send your first email using Rails and the Resend Ruby SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the Resend Ruby SDK.

<CodeGroup>
  ```bash RubyGems theme={null}
  gem install resend
  ```

  ```bash Gemfile theme={null}
  gem 'resend'
  ```
</CodeGroup>

## 2. Send email using Rails Action Mailer

This gem can be used as an Action Mailer delivery method.

First, let's update or create your mailer initializer file with your Resend API Key.

```rb config/initializers/mailer.rb theme={null}
Resend.api_key = "re_xxxxxxxxx"
```

Add these lines of code into your environment config file.

```rb config/environments/environment.rb theme={null}
config.action_mailer.delivery_method = :resend
```

Then create a `UserMailer` class definition.

```rb app/mailers/user_mailer.rb theme={null}
class UserMailer < ApplicationMailer
  default from: 'Acme <onboarding@resend.dev>' # this domain must be verified with Resend
  def welcome_email
    @user = params[:user]
    @url = 'http://example.com/login'
    mail(to: ["delivered@resend.dev"], subject: 'hello world')
  end
end
```

And create your ERB email template.

```html app/views/user_mailer/welcome_email.html.erb theme={null}
<!doctype html>
<html>
  <head>
    <meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />
  </head>
  <body>
    <h1>Welcome to example.com, <%= @user.name %></h1>
    <p>You have successfully signed up to example.com,</p>
    <p>To log in to the site, just follow this link: <%= @url %>.</p>
    <p>Thanks for joining and have a great day!</p>
  </body>
</html>
```

Initialize your `UserMailer` class. This should return a `UserMailer` instance.

```rb  theme={null}
u = User.new name: "derich"
mailer = UserMailer.with(user: u).welcome_email

# => #<Mail::Message:153700, Multipart: false, Headers: <From: from@example.com>, <To: to@example.com>, <Subject: hello world>, <Mime-Version: 1.0>...
```

Finally, you can now send emails using the `deliver_now!` method:

```rb  theme={null}
mailer.deliver_now!

# => {:id=>"a193c81e-9ac5-4708-a569-5caf14220539", :from=>....}
```

## 3. Try it yourself

<Card title="Rails Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-rails-example">
  See the full source code.
</Card>


# Send emails using Rails with SMTP
Source: https://resend.com/docs/send-with-rails-smtp

Learn how to integrate Rails with Resend SMTP.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Setup your environment

Add these lines of code into your environment config file.

```rb config/environments/environment.rb theme={null}
config.action_mailer.delivery_method = :smtp
config.action_mailer.smtp_settings = {
  :address   => 'smtp.resend.com',
  :port      => 465,
  :user_name => 'resend',
  :password  => ENV['RESEND_API_KEY'],
  :tls => true
}
```

## 2. Send email using Rails Action Mailer

Then create a `UserMailer` class definition.

```rb app/mailers/user_mailer.rb theme={null}
class UserMailer < ApplicationMailer
  default from: 'Acme <onboarding@resend.dev>' # this domain must be verified with Resend
  def welcome_email
    @user = params[:user]
    @url = 'http://example.com/login'
    mail(to: ["delivered@resend.dev"], subject: 'hello world')
  end
end
```

And create your ERB email template.

```html app/views/user_mailer/welcome_email.html.erb theme={null}
<!doctype html>
<html>
  <head>
    <meta content="text/html; charset=UTF-8" http-equiv="Content-Type" />
  </head>
  <body>
    <h1>Welcome to example.com, <%= @user.name %></h1>
    <p>You have successfully signed up to example.com,</p>
    <p>To log in to the site, just follow this link: <%= @url %>.</p>
    <p>Thanks for joining and have a great day!</p>
  </body>
</html>
```

Initialize your `UserMailer` class. This should return a `UserMailer` instance.

```rb  theme={null}
u = User.new name: "derich"
mailer = UserMailer.with(user: u).welcome_email

# => #<Mail::Message:153700, Multipart: false, Headers: <From: from@example.com>, <To: to@example.com>, <Subject: hello world>, <Mime-Version: 1.0>...
```

Finally, you can now send emails using the `deliver_now!` method:

```rb  theme={null}
mailer.deliver_now!

# => {:id=>"a193c81e-9ac5-4708-a569-5caf14220539", :from=>....}
```

## 3. Try it yourself

<Card title="Rails SMTP Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-rails-smtp-example">
  See the full source code.
</Card>


# Send emails with Railway
Source: https://resend.com/docs/send-with-railway

Learn how to send your first email using Railway and the Resend Node.js SDK.

[Railway](https://railway.com/?referralCode=resend) enables you to focus on building product instead of managing infrastructure, automatically scaling to support your needs as you grow.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

We've created a [Resend template](https://railway.com/deploy/resend?referralCode=resend\&utm_medium=integration\&utm_source=template\&utm_campaign=generic) using the Resend Node.js SDK as an introduction to using Resend on Railway.

To get started, you deploy the template to Railway.

[![Deploy on Railway](https://railway.com/button.svg)](https://railway.com/deploy/resend?referralCode=resend\&utm_medium=integration\&utm_source=template\&utm_campaign=generic)

<img alt="Deploy button highlighted on Railway" src="https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway.png?fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=a4b37d9be58e4df72a9eec8e89352e1c" data-og-width="1500" width="1500" data-og-height="937" height="937" data-path="images/send-with-railway.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway.png?w=280&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=bf271760ce40cd8079322427a39d77f1 280w, https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway.png?w=560&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=f7888d3ea6f8122a023f08663016c113 560w, https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway.png?w=840&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=1a7363728a7710783f182ba092442c63 840w, https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway.png?w=1100&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=e03bb8355ef18cec8cdc16bf5fd68bf8 1100w, https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway.png?w=1650&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=19f0d8afd95b1cc917a8acb7f803de19 1650w, https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway.png?w=2500&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=83ccd4dc9546a07bedd86b3fdfc2847d 2500w" />

## 2. Add your API key

[Add an API key](https://resend.com/api-keys) from Resend and click **Deploy**.

<img alt="Template modal with API key field highlighted" src="https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway-1.png?fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=0efcfbf778a0193a8c9aa353a07635b6" data-og-width="1500" width="1500" data-og-height="897" height="897" data-path="images/send-with-railway-1.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway-1.png?w=280&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=b8b01d2ee24d3605784c5f2958a07bf6 280w, https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway-1.png?w=560&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=eacb93ee1c7a3035ab3bef8ddaab083c 560w, https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway-1.png?w=840&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=953c1f5c79c803e1dfe488ed21088167 840w, https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway-1.png?w=1100&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=4dc4a00683fe0469c6d7137aaafff1ed 1100w, https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway-1.png?w=1650&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=9c6d30b53278651cf05de5444adf69f0 1650w, https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway-1.png?w=2500&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=edd9d52789be4f1bdfd0c49629db92b4 2500w" />

## 3. Send your first email

Once your deployment finishes, click the deploy URL to open the app and send your first email.

<img alt="Deployment link highlighted" src="https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway-2.png?fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=c4a9f0838a4efb406d349c4e815c1c80" data-og-width="3360" width="3360" data-og-height="2010" height="2010" data-path="images/send-with-railway-2.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway-2.png?w=280&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=adaf5b30745d7ded34847652613f3a40 280w, https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway-2.png?w=560&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=fd1f32f9e6076a58af9d23f8c3e4bd6b 560w, https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway-2.png?w=840&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=c9d3428c7b95ca3cdba47e96c04a6f34 840w, https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway-2.png?w=1100&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=f9f08fcd1ec4d3d11d9cfd31f491265d 1100w, https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway-2.png?w=1650&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=560865688642ba263c03d209ba73e86b 1650w, https://mintcdn.com/resend/UGYfPeFBYurSSqVy/images/send-with-railway-2.png?w=2500&fit=max&auto=format&n=UGYfPeFBYurSSqVy&q=85&s=ee4de56e61dc8b2b1e1321c7350f8eab 2500w" />

While this example uses the [Resend Node.js SDK](https://www.npmjs.com/package/@resend/node), you can add Resend using [any of our Official SDKs](https://resend.com/docs/sdks) that Railway supports.

<Info>
  Keep in mind that as a basic project, this template sends an email with your
  account each time someone visits your deployment URL, so share the link with
  discretion.
</Info>

You can also [set up the project locally](https://docs.railway.com/develop/cli) and make changes to the projectusing the Railway CLI.

## 4. Try it yourself

<Card title="Railway Template" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-node-railway-starter">
  See the full source code.
</Card>


# Send emails with RedwoodJS
Source: https://resend.com/docs/send-with-redwoodjs

Learn how to send your first email using Redwood.js and the Resend Node.js SDK.

### Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

### 1. Install

Get the Resend Node.js SDK.

<CodeGroup>
  ```bash yarn theme={null}
  yarn workspace api add resend
  ```
</CodeGroup>

### 2. Send email using HTML

```bash  theme={null}
yarn rw g function send
```

The easiest way to send an email is by using the `html` parameter.

```ts api/src/functions/send/send.ts theme={null}
import { Resend } from 'resend';
import type { APIGatewayEvent, Context } from 'aws-lambda';

const resend = new Resend('re_xxxxxxxxx');

export const handler = async (event: APIGatewayEvent, context: Context) => {
  const { data, error } = await resend.emails.send({
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'hello world',
    html: '<strong>it works!</strong>',
  });

  if (error) {
    return {
      statusCode: 500,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ error }),
    };
  }

  return {
    statusCode: 200,
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ data }),
  };
};
```

### 3. Try it yourself

<Card title="Redwood.js Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-redwoodjs-example">
  See the full source code.
</Card>


# Send emails with Remix
Source: https://resend.com/docs/send-with-remix

Learn how to send your first email using Remix and the Resend Node.js SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the Resend Node.js SDK.

<CodeGroup>
  ```bash npm theme={null}
  npm install resend
  ```

  ```bash yarn theme={null}
  yarn add resend
  ```

  ```bash pnpm theme={null}
  pnpm add resend
  ```
</CodeGroup>

## 2. Send email using HTML

Create a [Resource Route](https://remix.run/docs/en/1.16.1/guides/resource-routes) under `app/routes/send.ts`.

The easiest way to send an email is by using the `html` parameter.

<CodeGroup>
  ```ts app/routes/send.ts theme={null}
  import { json } from '@remix-run/node';
  import { Resend } from 'resend';

  const resend = new Resend(process.env.RESEND_API_KEY);

  export const loader = async () => {
    const { data, error } = await resend.emails.send({
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: 'Hello world',
      html: '<strong>It works!</strong>',
    });

    if (error) {
      return json({ error }, 400);
    }

    return json(data, 200);
  };
  ```
</CodeGroup>

## 3. Try it yourself

<Card title="Remix Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-remix-example">
  See the full source code.
</Card>


# Send emails using Retool with SMTP
Source: https://resend.com/docs/send-with-retool-smtp

Learn how to integrate Retool with Resend SMTP.

### Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Get the Resend SMTP credentials

When configuring your SMTP integration, you'll need to use the following credentials:

* **Host**: `smtp.resend.com`
* **Port**: `465`
* **Username**: `resend`
* **Password**: `YOUR_API_KEY`

## 2. Integrate with Retool SMTP

Log into your [Retool](https://retool.com) account and create a new SMTP Resource.

1. Go to **Resources** and click **Create New**

<img alt="Retool SMTP - Create new Resources" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-1.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c6edda6c2512e895bfec5b7e47627d96" data-og-width="3025" width="3025" data-og-height="1892" height="1892" data-path="images/retool-smtp-1.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-1.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b81ff63bfdbf7936c5ab264e2af38451 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-1.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=7def2c6a0c5b37eb7dd975975ae1e313 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-1.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1d29434863b0e61e8cde6b3c3b27ddeb 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-1.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=cbdd47996188825d1878074aed3e8908 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-1.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d26a4cb5a99846984e526a4153215497 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-1.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=bc0d60220f7700bb5380a7aeeba9eede 2500w" />

2. Search for **SMTP** and select it

<img alt="Retool SMTP - Search for SMTP" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-2.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=b95716d79754f6d2f8cedd6522d8e8f8" data-og-width="3025" width="3025" data-og-height="1891" height="1891" data-path="images/retool-smtp-2.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-2.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d998af6e513bc8763a182094d9cc9af9 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-2.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=839481d79c8669a965eca472bc6f724c 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-2.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=f143239107f3ca8d50bde5c682f4b729 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-2.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=8bc98e797eab8853f7f8249bc8487b0e 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-2.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2db7c2887f0debfd4b49538fb2c1cfa6 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-2.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c9e6b4f6b754fc952f6d5e1a699a1caf 2500w" />

3. Add name and SMTP credentials

<img alt="Retool SMTP - Add SMTP credentials" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-3.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=cbd6221e4b03dfc909f00f966afc4a2a" data-og-width="3025" width="3025" data-og-height="1892" height="1892" data-path="images/retool-smtp-3.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-3.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c665553c9963f9c7d7d7c0b2f4f941b0 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-3.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=314a64062c5d492d46da510bf3803fe6 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-3.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c65f64784fafd90efb7d01dd37c4ed5b 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-3.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5571a320bfbbf608d98948f14b2f7d1d 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-3.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5e624e1f2202d425e9f689e8010dc349 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/retool-smtp-3.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=bebb774022ea1650a66af0bdb436b9b4 2500w" />


# Send emails with Ruby
Source: https://resend.com/docs/send-with-ruby

Learn how to send your first email using the Resend Ruby SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the Resend Ruby SDK.

<CodeGroup>
  ```bash RubyGems theme={null}
  gem install resend
  ```

  ```bash Gemfile theme={null}
  gem 'resend'
  ```
</CodeGroup>

## 2. Send email using HTML

The easiest way to send an email is by using the `html` parameter.

```rb index.rb theme={null}
require "resend"

Resend.api_key = "re_xxxxxxxxx"

params = {
  "from": "Acme <onboarding@resend.dev>",
  "to": ["delivered@resend.dev"],
  "subject": "hello world",
  "html": "<strong>it works!</strong>"
}

sent = Resend::Emails.send(params)
puts sent
```

## 3. Try it yourself

<Card title="Ruby Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-ruby-example">
  See the full source code.
</Card>


# Send emails with Rust
Source: https://resend.com/docs/send-with-rust

Learn how to send your first email using the Resend Rust SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)

## Install

First, create a rust project with cargo and `cd` into it.

```bash  theme={null}
cargo init resend-rust-example
cd resend-rust-example
```

Next, add add the Rust Resend SDK as well as [Tokio](https://tokio.rs):

```bash  theme={null}
cargo add resend-rs
cargo add tokio -F macros,rt-multi-thread
```

The Rust SDK is Async-first so Tokio is needed.

## Send email

```rust  theme={null}
use resend_rs::types::CreateEmailBaseOptions;
use resend_rs::{Resend, Result};

#[tokio::main]
async fn main() -> Result<()> {
  let resend = Resend::new("re_xxxxxxxxx");

  let from = "Acme <onboarding@resend.dev>";
  let to = ["delivered@resend.dev"];
  let subject = "Hello World";

  let email = CreateEmailBaseOptions::new(from, to, subject)
    .with_html("<strong>It works!</strong>");

  let _email = resend.emails.send(email).await?;

  Ok(())
}
```

## Reading the API key

Instead of using `Resend::new` and hardcoding the API key, the `RESEND_API_KEY` environment variable
can be used instead. The `Resend::default()` should be used in that scenario instead.

### Reading the API key from a `.env` file

Another popular option is to use a `.env` file for environment variables. You can use the
[`dotenvy`](https://crates.io/crates/dotenvy) crate for that:

```bash  theme={null}
cargo add dotenvy
```

```rust  theme={null}
// main.rs
use dotenvy::dotenv;
use resend_rs::types::CreateEmailBaseOptions;
use resend_rs::{Resend, Result};

#[tokio::main]
async fn main() -> Result<()> {
  let _env = dotenv().unwrap();

  let resend = Resend::default();

  let from = "Acme <onboarding@resend.dev>";
  let to = ["delivered@resend.dev"];
  let subject = "Hello World";

  let email = CreateEmailBaseOptions::new(from, to, subject)
    .with_html("<strong>It works!</strong>");

  let _email = resend.emails.send(email).await?;

  Ok(())
}
```

```toml  theme={null}
# .env
RESEND_API_KEY=re_xxxxxxxxx
```


# Send emails with Sinatra
Source: https://resend.com/docs/send-with-sinatra

Learn how to send your first email using Sinatra and the Resend Ruby SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the Resend Ruby SDK.

<CodeGroup>
  ```bash RubyGems theme={null}
  gem install resend
  ```

  ```bash Gemfile theme={null}
  gem 'resend'
  ```
</CodeGroup>

## 2. Send email using HTML

The easiest way to send an email is by using the `html` parameter.

```rb index.rb theme={null}
require "sinatra"
require "resend"

set :port, 5000
set :bind, "0.0.0.0"

Resend.api_key = ENV["RESEND_API_KEY"]

get "/" do

  content_type :json

  params = {
    from: 'Acme <onboarding@resend.dev>',
    to: ['delivered@resend.dev'],
    subject: 'hello world',
    html: '<strong>it works!</strong>',
  }

  Resend::Emails.send(params).to_hash.to_json
end
```

## 3. Try it yourself

<Card title="Sinatra Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-sinatra-example">
  See the full source code.
</Card>


# Send emails with SMTP
Source: https://resend.com/docs/send-with-smtp

Learn how to integrate Resend via SMTP.

export const YouTube = ({id}) => {
  return <iframe className="w-full aspect-video rounded-xl" src={`https://www.youtube.com/embed/${id}`} title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen></iframe>;
};

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

Prefer watching a video? Check out our video walkthrough below.

<YouTube id="MM1JE6-inmc" />

## SMTP Credentials

When configuring your SMTP integration, you'll need to use the following credentials:

* **Host**: `smtp.resend.com`
* **Port**: `25`, `465`, `587`, `2465`, or `2587`
* **Username**: `resend`
* **Password**: `YOUR_API_KEY`

Ports help to instruct the type of security you want to use in your SMTP connection.

| Type     | Port                | Security                                                                  |
| -------- | ------------------- | ------------------------------------------------------------------------- |
| SMTPS    | `465`, `2465`       | Implicit SSL/TLS (Immediately connects via SSL/TLS)                       |
| STARTTLS | `25`, `587`, `2587` | Explicit SSL/TLS (First connects via plaintext, then upgrades to SSL/TLS) |

## Idempotency Key

Idempotency keys are used to prevent duplicate emails. You can add the `Resend-Idempotency-Key` header to your emails sent with SMTP to prevent duplicate emails.

```yaml SMTP {4} theme={null}
From: Acme <onboarding@resend.dev>
To: delivered@resend.dev
Subject: hello world
Resend-Idempotency-Key: welcome-user/123456789

<p>it works!</p>
```

Learn more about [idempotency keys](/dashboard/emails/idempotency-keys).

## Custom Headers

If your SMTP client supports it, you can add custom headers to your emails.

Here are some common use cases for custom headers:

* Prevent threading on Gmail with the `X-Entity-Ref-ID` header
* Include a shortcut for users to unsubscribe with the `List-Unsubscribe` header

## FAQ

Once configured, you should be able to start sending emails via SMTP. Below are some frequently asked questions:

<AccordionGroup>
  <Accordion title="What if I need logs from the server to debug?">
    We currently don't provide SMTP server logs for debugging. If you run into
    issues, please [reach out to support](https://resend.com/help).
  </Accordion>

  <Accordion title="Where do I see the emails sent with SMTP?">
    Emails sent with SMTP will show in your [emails
    table](https://resend.com/emails).
  </Accordion>

  <Accordion title="Does the rate limit apply when sending with SMTP?">
    Yes, the rate limit is the [same as the
    API](https://resend.com/docs/api-reference/introduction#rate-limit).
  </Accordion>
</AccordionGroup>


# Send emails with Supabase Edge Functions
Source: https://resend.com/docs/send-with-supabase-edge-functions

Learn how to send your first email using Supabase Edge Functions.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

Make sure you have the latest version of the [Supabase CLI](https://supabase.com/docs/guides/cli#installation) installed.

## 1. Create Supabase function

Create a new function locally:

```bash  theme={null}
supabase functions new resend
```

## 2. Edit the handler function

Paste the following code into the `index.ts` file:

```ts index.ts theme={null}
const RESEND_API_KEY = Deno.env.get('RESEND_API_KEY');

const handler = async (_request: Request): Promise<Response> => {
  const res = await fetch('https://api.resend.com/emails', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${RESEND_API_KEY}`,
    },
    body: JSON.stringify({
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: 'hello world',
      html: '<strong>it works!</strong>',
    }),
  });

  const data = await res.json();

  return new Response(JSON.stringify(data), {
    status: 200,
    headers: {
      'Content-Type': 'application/json',
    },
  });
};

Deno.serve(handler);
```

## 3. Deploy and send email

Run function locally:

```bash  theme={null}
supabase functions start
supabase functions serve resend --no-verify-jwt
```

Deploy function to Supabase:

```bash  theme={null}
supabase functions deploy resend
```

Open the endpoint URL to send an email:

<img alt="Supabase Edge Functions - Deploy Function" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-edge-functions-deploy-function.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e28cab375d10a57f712e77ff3c888005" data-og-width="3414" width="3414" data-og-height="1886" height="1886" data-path="images/supabase-edge-functions-deploy-function.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-edge-functions-deploy-function.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5ad81866f4e061b55ade5b508e8b6941 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-edge-functions-deploy-function.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=e26ee1713f03952db5111effdd2bee4a 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-edge-functions-deploy-function.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=df3d94fc69f5764d13153e217e7c2982 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-edge-functions-deploy-function.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=d674b6064fa96011569a892cf4e9d683 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-edge-functions-deploy-function.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1907d607d324c5005966a03032ce5a1d 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-edge-functions-deploy-function.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=334c2321da6997bfdec12187653396ee 2500w" />

## 4. Try it yourself

<Card title="Supabase Edge Functions Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-supabase-edge-functions-example">
  See the full source code.
</Card>


# Send emails using Supabase with SMTP
Source: https://resend.com/docs/send-with-supabase-smtp

Learn how to integrate Supabase Auth with Resend SMTP.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Get the Resend SMTP credentials

When configuring your SMTP integration, you'll need to use the following credentials:

* **Host**: `smtp.resend.com`
* **Port**: `465`
* **Username**: `resend`
* **Password**: `YOUR_API_KEY`

## 2. Integrate with Supabase SMTP

After logging into your Supabase account, you'll need to enable the SMTP integration.

1. Go to your Supabase project
2. Click on **Project Settings** in the left sidebar
3. Select the **Authentication** tab
4. Find the SMTP section and toggle the **Enable Custom SMTP** option
5. Add your Sender email and name (these are required fields). For example: `support@acme.com` and `ACME Support`.

<img alt="Supabase Auth - SMTP Sender email and name settings" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-sender-email-name.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=1db59a322b21efb38bc298a5796d32b3" data-og-width="2080" width="2080" data-og-height="618" height="618" data-path="images/supabase-auth-smtp-sender-email-name.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-sender-email-name.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=2e34806461bbb2538976e11b22abfab6 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-sender-email-name.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=a7d329ae9f31e92890088acb9a09c697 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-sender-email-name.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=5c917b24f62b074f0b557905cb428bdf 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-sender-email-name.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=6a4d7d5cc37e6e38142c54ed34976f55 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-sender-email-name.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=af95b5a5e788f1d2e9108c2c1842e6f2 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-sender-email-name.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c93aefe9daf3abb6a56cddf790437958 2500w" />

6. You can copy-and-paste the [SMTP credentials](https://resend.com/settings/smtp) from Resend to Supabase.

<img alt="Supabase Auth - SMTP Settings" src="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-settings.png?fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=70c068d96e4f03c7e2f03b6e71219d4f" data-og-width="2076" width="2076" data-og-height="1536" height="1536" data-path="images/supabase-auth-smtp-settings.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-settings.png?w=280&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=465dbfc732418be3aeafe1ecb3f70c60 280w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-settings.png?w=560&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=67bc5c6b4d7aa2ae1c6010c294d7fc36 560w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-settings.png?w=840&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=a2fd51db77a16bd81d5c29498906c813 840w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-settings.png?w=1100&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=c83fed224cbda52c16d0e5ee74fa8494 1100w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-settings.png?w=1650&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=666714885dfb48bbc1ccf7d175f8a468 1650w, https://mintcdn.com/resend/OWNnQaVDyqcGyhhN/images/supabase-auth-smtp-settings.png?w=2500&fit=max&auto=format&n=OWNnQaVDyqcGyhhN&q=85&s=755196fc8e36cf108db49b9f4d085080 2500w" />

After that, you can click the **Save** button and all of your emails will be sent through Resend.


# Send emails with SvelteKit
Source: https://resend.com/docs/send-with-sveltekit

Learn how to send your first email using SvelteKit and the Resend Node.js SDK.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the Resend Node.js SDK.

<CodeGroup>
  ```bash npm theme={null}
  npm install resend
  ```

  ```bash yarn theme={null}
  yarn add resend
  ```

  ```bash pnpm theme={null}
  pnpm add resend
  ```
</CodeGroup>

## 2. Send email using HTML

Create a [+server API route](https://svelte.dev/docs/kit/routing#server) under `src/routes/send/+server.ts`.

The easiest way to send an email is by using the `html` parameter.

<CodeGroup>
  ```ts src/routes/send/+server.ts theme={null}
  import { Resend } from 'resend';
  import { RESEND_API_KEY } from '$env/static/private'; // define in your .env file

  const resend = new Resend(RESEND_API_KEY);

  export async function POST() {
    try {
      const { data, error } = await resend.emails.send({
        from: 'Acme <onboarding@resend.dev>',
        to: ['delivered@resend.dev'],
        subject: 'Hello world',
        html: '<p>Hello world</p>',
      });

      if (error) {
        return Response.json({ error }, { status: 500 });
      }

      return Response.json({ data });
    } catch (error) {
      return Response.json({ error }, { status: 500 });
    }
  }
  ```
</CodeGroup>

## 3. Try it yourself

<CardGroup>
  <Card title="SvelteKit Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-svelte-kit-example">
    See the full source code.
  </Card>
</CardGroup>


# Send emails with Symfony
Source: https://resend.com/docs/send-with-symfony

Learn how to send your first email using the Symfony Resend Mailer Bridge.

## Prerequisites

To get the most out of this guide, you will need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install

Get the Resend Mailer Bridge package.

```bash Composer theme={null}
composer require symfony/resend-mailer
```

If your application relies on Resend webhook events, you should also install the Symfony Webhook Component.

```bash Composer theme={null}
composer require symfony/webhook
```

## 2. Configuring Mailer

In your `.env.local` file, which you can create if needed, add the following:

```sh  theme={null}
MAILER_DSN=resend+api://API_KEY@default
MAILER_RESEND_SECRET=SIGNING_SECRET
```

Replace `API_KEY` with your Resend API key, and `SIGNING_SECRET` with your webhook secret, which can be retrieved from the Resend dashboard after creating a new webhook endpoint (see below).

## 3. Send your first email

In a controller, inject the `Mailer`:

```php  theme={null}
public function __construct(
    private readonly MailerInterface $mailer,
) {
}
```

In a controller action, use the `$this->mailer` to send your email:

```php  theme={null}
$this->mailer->send(
    (new Email())
        ->from('Acme <onboarding@resend.dev>')
        ->to('delivered@resend.dev')
        ->subject('Hello world')
        ->html('<strong>it works!</strong>')
);
```

Learn more about sending emails with Mailer Component in [Symfony's documentation](https://symfony.com/doc/current/mailer.html#creating-sending-messages).

## 4. Receive and handle webhooks

Thanks to the Webhook Component, you can create a webhook listener.

```php src/Webhook/ResendWebhookListener.php theme={null}
#[AsRemoteEventConsumer('mailer_resend')]
readonly class ResendWebhookListener implements ConsumerInterface
{
    public function __construct(
        #[Autowire(param: 'kernel.project_dir')] private string $projectDir,
    ) {
    }

    public function consume(RemoteEvent $event): void
    {
        if ($event instanceof MailerDeliveryEvent) {
            $this->handleMailDelivery($event);
        } elseif ($event instanceof MailerEngagementEvent) {
            $this->handleMailEngagement($event);
        } else {
            // This is not an email event
            return;
        }
    }

    private function handleMailDelivery(MailerDeliveryEvent $event): void
    {
        // Todo
    }

    private function handleMailEngagement(MailerEngagementEvent $event): void
    {
        // Todo
    }
}
```

Bind your listener to the Webhook routing config:

```yaml config/packages/webhook.yaml theme={null}
framework:
  webhook:
    routing:
      mailer_resend:
        service: 'mailer.webhook.request_parser.resend'
        secret: '%env(MAILER_RESEND_SECRET)%'
```

Next, register your application's webhook endpoint URL (example: `https://{app_domain}/webhook/mailer_resend`) in the [Resend Dashboard](https://resend.com/webhooks):

## 5. Try it yourself

<Card title="Symfony Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-symfony-example">
  See the full source code.
</Card>


# Send emails with Vercel Functions
Source: https://resend.com/docs/send-with-vercel-functions

Learn how to send your first email using Vercel Functions.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

Make sure you have the latest version of the [Vercel CLI](https://vercel.com/docs/cli#installing-vercel-cli) installed.

## 1. Create a Next.js function

Create a route file under `app/api/send/route.ts` if you're using the [App Router](https://nextjs.org/docs/app/building-your-application/routing/router-handlers).

```js route.ts theme={null}
const RESEND_API_KEY = 're_xxxxxxxxx';

export async function POST() {
  const res = await fetch('https://api.resend.com/emails', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${RESEND_API_KEY}`,
    },
    body: JSON.stringify({
      from: 'Acme <onboarding@resend.dev>',
      to: ['delivered@resend.dev'],
      subject: 'hello world',
      html: '<strong>it works!</strong>',
    }),
  });

  if (res.ok) {
    const data = await res.json();
    return Response.json(data);
  }
}
```

## 2. Send email locally

Run function locally:

```bash  theme={null}
npx next dev
```

Open the endpoint URL to send an email: `http://localhost:3000/api/send`

## 3. Send email in production

Deploy function to Vercel:

```bash  theme={null}
vercel
```

Open the endpoint URL to send an email: `https://your-project.vercel.app/api/send`

## 4. Try it yourself

<Card title="Vercel Functions Example" icon="arrow-up-right-from-square" href="https://github.com/resend/resend-vercel-functions-example">
  See the full source code.
</Card>


# Send emails using WordPress with SMTP
Source: https://resend.com/docs/send-with-wordpress-smtp

Learn how to send your first email using Wordpress.

## Prerequisites

To get the most out of this guide, you'll need to:

* [Create an API key](https://resend.com/api-keys)
* [Verify your domain](https://resend.com/domains)

## 1. Install a plugin

First, you'll need to install and activate the [WP Mail SMTP](https://wordpress.org/plugins/wp-mail-smtp/) plugin. Once the plugin is activated you will see the setup wizard. You can skip this step as we'll guide you through how to configure the plugin for Resend. Just click on **Go to the Dashboard** at the bottom of the screen to exit the setup wizard.

<img alt="WP Mail SMTP - Setup Wizard" src="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-setup-wizard.png?fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=034e82ed82a43c1cc25e9119995ac558" data-og-width="2880" width="2880" data-og-height="1462" height="1462" data-path="images/wordpress-setup-wizard.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-setup-wizard.png?w=280&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=6b3e5d61f920bcee0f6935f6f762730e 280w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-setup-wizard.png?w=560&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=86da0fb49fbc2fa225a25b332f44255b 560w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-setup-wizard.png?w=840&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=d1fd29774b3f7d793b1e4a14ccd84e59 840w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-setup-wizard.png?w=1100&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=0a52661387ca6787f7b8933a68d9d470 1100w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-setup-wizard.png?w=1650&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=05b6d3c49f842c966fac12f2e50d9581 1650w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-setup-wizard.png?w=2500&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=b80e84913e35bc7460343a41e4a62399 2500w" />

## 2. Configuration

From your admin dashboard, visit the **WP Mail SMTP > Settings** page to configure the plugin. Firstly, configure your **From Email**, **From Name**, and **Return Path**. Next, we'll configure the SMTP settings for Resend. Select **Other SMTP** in the **Mailer** section.

<img alt="WP Mail SMTP - Settings" src="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-configure.png?fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=12cb502dcffbc76cad7f6bbef00a7f43" data-og-width="2880" width="2880" data-og-height="1462" height="1462" data-path="images/wordpress-configure.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-configure.png?w=280&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=501e4b9c2ecdafcb5d45de3c5475ba35 280w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-configure.png?w=560&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=56784d22779a54e5baadf1872acac90c 560w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-configure.png?w=840&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=3c5db16a12a39a94990c0be53a1c5f9d 840w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-configure.png?w=1100&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=fd4b2c0c06678f81bf5fdda1084f65dc 1100w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-configure.png?w=1650&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=939eb356981246d7f83e4cd0da5a8793 1650w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-configure.png?w=2500&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=f2debaa483536161ffbd7ce35914f2e3 2500w" />

In the **Other SMTP** section, configure the following settings:

* **SMTP Host**: `smtp.resend.com`
* **Encryption**: `SSL`
* **SMTP Port**: `465`
* **Auto TLS**: `ON`
* **Authentication**: `ON`
* **SMTP Username**: `resend`
* **SMTP Password**: `YOUR_API_KEY`

Make sure to replace `YOUR_API_KEY` with an existing key or create a new [API Key](https://resend.com/api-keys).

## 3. Sending a test email

From your admin dashboard, visit the **WP Mail SMTP > Tools** page to send a test email.

<img alt="WP Mail SMTP - Send a Test Email" src="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-test-email.png?fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=bffb755f5673f14a03d84d36a4b361ca" data-og-width="2880" width="2880" data-og-height="1462" height="1462" data-path="images/wordpress-test-email.png" data-optimize="true" data-opv="3" srcset="https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-test-email.png?w=280&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=b6174c2d84f53d9d1f6e3b4002bf9304 280w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-test-email.png?w=560&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=ba4322c50484c467bf17cc7c20449580 560w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-test-email.png?w=840&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=47856c68dcec0393db239a3ce473ff25 840w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-test-email.png?w=1100&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=98b16e71a85dcbf01c7cec285bc2a65b 1100w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-test-email.png?w=1650&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=aa09d93ae06d5c635f58b7d73ebb8d5d 1650w, https://mintcdn.com/resend/lyl6PQTYhtWhUjuS/images/wordpress-test-email.png?w=2500&fit=max&auto=format&n=lyl6PQTYhtWhUjuS&q=85&s=78af8a485bc4f82848621c36391619b3 2500w" />


