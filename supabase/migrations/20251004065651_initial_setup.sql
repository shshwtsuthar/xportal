-- 00001_initial_setup.sql
-- (Content is identical to the previous version, including the corrected audit trigger)
CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;
CREATE TYPE public.application_status AS ENUM ('DRAFT', 'SUBMITTED', 'OFFER_GENERATED', 'OFFER_SENT', 'ACCEPTED', 'REJECTED', 'APPROVED');
CREATE TYPE public.enrollment_status AS ENUM ('PENDING', 'ACTIVE', 'COMPLETED', 'WITHDRAWN', 'DEFERRED');
CREATE TYPE public.invoice_status AS ENUM ('DRAFT', 'SENT', 'PAID', 'VOID', 'OVERDUE');
CREATE TABLE public.events ( id UUID PRIMARY KEY DEFAULT extensions.uuid_generate_v4(), created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL, user_id UUID REFERENCES auth.users(id), rto_id UUID, entity_type TEXT NOT NULL, entity_id UUID NOT NULL, field_name TEXT, old_value JSONB, new_value JSONB, event_type TEXT NOT NULL, description TEXT );
CREATE OR REPLACE FUNCTION public.record_change() RETURNS TRIGGER AS $$ DECLARE user_id UUID := auth.uid(); rto_id UUID; r RECORD; old_val JSONB; new_val JSONB; BEGIN IF (TG_OP = 'INSERT') THEN rto_id := NEW.rto_id; INSERT INTO public.events (user_id, rto_id, entity_type, entity_id, new_value, event_type, description) VALUES (user_id, rto_id, TG_TABLE_NAME, NEW.id, to_jsonb(NEW), 'CREATE', TG_TABLE_NAME || ' record created.'); RETURN NEW; ELSIF (TG_OP = 'UPDATE') THEN rto_id := OLD.rto_id; FOR r IN SELECT key, value FROM jsonb_each(to_jsonb(OLD)) LOOP old_val := to_jsonb(OLD)->r.key; new_val := to_jsonb(NEW)->r.key; IF old_val IS DISTINCT FROM new_val THEN INSERT INTO public.events (user_id, rto_id, entity_type, entity_id, field_name, old_value, new_value, event_type, description) VALUES (user_id, rto_id, TG_TABLE_NAME, OLD.id, r.key, old_val, new_val, 'UPDATE', TG_TABLE_NAME || ' record updated.'); END IF; END LOOP; RETURN NEW; ELSIF (TG_OP = 'DELETE') THEN rto_id := OLD.rto_id; INSERT INTO public.events (user_id, rto_id, entity_type, entity_id, old_value, event_type, description) VALUES (user_id, rto_id, TG_TABLE_NAME, OLD.id, to_jsonb(OLD), 'DELETE', TG_TABLE_NAME || ' record deleted.'); RETURN OLD; END IF; RETURN NULL; END; $$ LANGUAGE plpgsql SECURITY DEFINER;
CREATE OR REPLACE FUNCTION public.handle_updated_at() RETURNS TRIGGER AS $$ BEGIN NEW.updated_at = NOW(); RETURN NEW; END; $$ LANGUAGE plpgsql;